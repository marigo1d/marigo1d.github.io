<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MIT6_S081_record</title>
    <url>/2024/04/12/MIT6-S081-record/</url>
    <content><![CDATA[<p>MIT6-S081课程与操作系统相关学习记录</p>
<span id="more"></span>



<h1 id="MIT6-S081-record"><a href="#MIT6-S081-record" class="headerlink" title="MIT6_S081_record"></a>MIT6_S081_record</h1><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><p>QEMU：近似模拟硬件SiFiveFU540-C000主板(RISC-V,64 bit register, 56 bit physical memory)</p>
<p>intel 8086：20根地址线，16位寄存器</p>
<h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><p>XV6：操作系统</p>
<h2 id="系统启动"><a href="#系统启动" class="headerlink" title="系统启动"></a>系统启动</h2><h3 id="基础信息"><a href="#基础信息" class="headerlink" title="基础信息"></a>基础信息</h3><h4 id="Intel-8086地址空间"><a href="#Intel-8086地址空间" class="headerlink" title="Intel 8086地址空间"></a>Intel 8086地址空间</h4><p>20根地址线，16位寄存器，可访问1MB的内存空间</p>
<p>0x00000-0x9FFFF: DRAM</p>
<p>0xF0000-0xFFFFF: ROM，BIOS代码位置</p>
<p>通过段寄存器左移4位+偏移地址</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240413150024273.png" class="" title="image-20240413150024273">

<img src="/2024/04/12/MIT6-S081-record/image-20240417110651232.png" class="" title="image-20240417110651232">





<h4 id="SiFive-FU540地址空间"><a href="#SiFive-FU540地址空间" class="headerlink" title="SiFive FU540地址空间"></a>SiFive FU540地址空间</h4><p>物理地址0x80000000以前的部分由主板上非DRAM组成（例如：boot ROM，PLIC等）</p>
<p>物理地址对应的硬件（图例为SiFive主板，仅截取部分，物理地址0x80000000以前的部分非DRAM）</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240413150852809.png" class="" title="image-20240413150852809">

<img src="/2024/04/12/MIT6-S081-record/image-20240412184947166.png" class="" title="image-20240412184947166">



<h4 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h4><p>不可见寄存器</p>
<p>GDTR	全局描述符表寄存器</p>
<p>IDTR	中断描述符表寄存器</p>
<p>LDTR	局部描述符表寄存器</p>
<p>TR	任务寄存器</p>
<p>CR0~3	控制寄存器</p>
<p>IP	指令指针寄存器</p>
<p>flags	标志寄存器</p>
<p>DR0~3	调试寄存器</p>
<p>可见寄存器</p>
<p>通用寄存器，可直接访问</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240420144227413.png" class="" title="image-20240420144227413">

<img src="/2024/04/12/MIT6-S081-record/image-20240420144655049.png" class="" title="image-20240420144655049">

<p>段寄存器，段基址*16+偏移</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240420144356905.png" class="" title="image-20240420144356905">



<p>32位与16位</p>
<p>32位地址总线，32位寄存器</p>
<p>寄存器组</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240416185859023.png" class="" title="image-20240416185859023">

<p>通用寄存器组，Eflag和EIP变为32位</p>
<p>段寄存器仍为16位宽！！内容为段选择子</p>
<h4 id="常见汇编语法"><a href="#常见汇编语法" class="headerlink" title="常见汇编语法"></a>常见汇编语法</h4><p>实模式</p>
<p>段内偏移默认基于DS进行偏移</p>
<p>基址寄存器：bx寄存器默认基于DS进行偏移，bp寄存器默认基于SS进行偏移</p>
<p>变址寄存器：si寄存器和di寄存器默认基于ds进行偏移</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax, [0x1234]	//取DS*16+0x1234处的值赋给ax</span><br><span class="line"></span><br><span class="line">add [bx], 0x1234	//将0x1234赋给内存中DS*16+bx处</span><br><span class="line"></span><br><span class="line">mov ax, [fs:0x5678]	//显式指定使用gs寄存器作为段基址，将gs*16+0x5678的值赋给ax</span><br><span class="line"></span><br><span class="line">mov byte [gs:0x01], &#x27;M&#x27;	//显式指定使用gs段寄存器作为段基址，指定操作数为1字节，向gs*16+0x01的位置写入1字节的数据&#x27;M&#x27;</span><br><span class="line"></span><br><span class="line">mov ax, [sp]	//将sp指向的值赋给ax</span><br><span class="line"></span><br><span class="line">mov ax, [bp+4]	//将SS*16+bp+4处的值赋给ax</span><br><span class="line"></span><br><span class="line">mov [di], ax	//将ax的值写入DS*16+di处</span><br><span class="line"></span><br><span class="line">mov [si+0x1234], ax	//将ax的值写入DS*16+si+0x1234处</span><br><span class="line"></span><br><span class="line">mov [bx+di], ax	//将ax的值写入DS*16+bx+di</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">jump $	// $符号表示当前行，该语句为跳转至当前行；$$为当前section</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">section data	//section为伪指令，面向程序员的跳转记号</span><br><span class="line">	var dd 0</span><br><span class="line">section code</span><br><span class="line">	jmp $$</span><br></pre></td></tr></table></figure>

<p>SS为栈底，bp为当前帧底</p>
<p>保护模式</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240420193121630.png" class="" title="image-20240420193121630">

<img src="/2024/04/12/MIT6-S081-record/image-20240420195137241.png" class="" title="image-20240420195137241">







<p>segment与section</p>
<p>section称为节，是指在汇编源码中经由关键字section或segment修饰、逻辑划分的指令或数据区域，汇编器会将这两个关键字修饰的区域在目标文件中编译成节，也就是说“节”最初诞生于目标文件中。</p>
<p>segment称为段，是链接器根据目标文件中属性相同的多个section合并后的section集合，这个集合称为segment，也就是段，链接器把目标文件链接成可执行文件，因此段最终诞生于可执行文件中。我们平时所说的可执行程序内存空间中的代码段和数据段就是指的segment。</p>
<h4 id="显存地址空间"><a href="#显存地址空间" class="headerlink" title="显存地址空间"></a>显存地址空间</h4><p>0xB8000-0xBFFFF为显存中字符显示部分，默认模式为80个字符*25行，一个字符2字节表示</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240420184138573.png" class="" title="image-20240420184138573">





<h3 id="BIOS"><a href="#BIOS" class="headerlink" title="BIOS"></a>BIOS</h3><p>计算机启动时为实模式运行，20位地址线，仅能访问1MB空间</p>
<p>机器上电，cs:ip 初始化为 0xf000:0x1110；</p>
<p>CPU从0xffff0开始执行，执行至0xfffff处指令jump后跳转至 f000:e05b，</p>
<p>BIOS内容代码进行硬件检测（内存检测，显卡检测…），</p>
<p>在0x000-0x3ff处建立数据结构，中断向量表IVT，填写中断例程，</p>
<p>进行启动盘检测(0盘0道1扇区最后2个字节:55AA)，从硬盘0盘0道1扇区加载MBR至0x7c00后，跳转执行MBR。</p>
<h3 id="MBR与Loader"><a href="#MBR与Loader" class="headerlink" title="MBR与Loader"></a>MBR与Loader</h3><p>MBR占512字节（刚好一个扇区），结尾内容为55AA。</p>
<p>MBR程序位于0x7c00，通过指定sp使用0x7c00以下部分作为程序栈</p>
<p>MBR程序</p>
<p>1.上卷清屏，写显存输出符号</p>
<p>2.将loader程序写进内存</p>
<p>loader程序位于0x900，使用0x900以下部分作为程序栈</p>
<p>loader实现从实模式到保护模式，并在保护模式加载内核</p>
<h4 id="启动保护模式"><a href="#启动保护模式" class="headerlink" title="启动保护模式"></a>启动保护模式</h4><p>段寄存器</p>
<p>保存选择子；RPL：特权等级；TI：选择GDT&#x2F;LDT；索引值：GDT&#x2F;LDT表中的第x个段描述符</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240416193845119.png" class="" title="image-20240416193845119">

<p>GDTR</p>
<p>保存GDT的内存地址，GDT的段描述符记录了各内存段的相关信息</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240416193617238.png" class="" title="image-20240416193617238">

<p>LDTR</p>
<p>保存LDT的内存地址，<strong>LDT必须在GDT中声明</strong>，通过GDT获得LDT内存地址后写入LDTR后使用LDT</p>
<p>段描述符</p>
<p>段基址：32位段基址；</p>
<p>段界限：对于数据段和代码段，段界限向高地址延申；对于栈，段界限向低地址延申；若偏移量超界错；段大小由 段界限*G 确定，</p>
<p>S：系统段</p>
<p>TYPE：段类型</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240416192952163.png" class="" title="image-20240416192952163">

<p>段描述符缓冲寄存器</p>
<p>保存处理后的段描述符</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240420192623948.png" class="" title="image-20240420192623948">

<p>地址计算方式&#x3D;32位段基址+32段偏移</p>
<p>loader中实现保护模式的启动</p>
<p>loader程序</p>
<p>1.构建GDT，<strong>GDT内容直接定义在loader内</strong></p>
<p>2.开启A20地址线</p>
<p>A20地址线：20位地址线的CPU自动发生地址回绕（20位段基址+16位段偏移所产生的超出1MB的部分）</p>
<p>32位地址线为了兼容20位地址线产生的地址回绕，在关闭A20地址线时，CPU将进行地址回绕；在开启A20地址线时，正确访问；</p>
<p>3.加载GDT地址到GDTR</p>
<p>4.置位CR0寄存器的PE位</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240416195112069.png" class="" title="image-20240416195112069">

<p>5.将段寄存器内容更新为段选择子内容</p>
<h4 id="页表组成与构建"><a href="#页表组成与构建" class="headerlink" title="页表组成与构建"></a>页表组成与构建</h4><p>虚拟地址与物理地址映射关系</p>
<p>虚实转换由MMU(Memory Management Unit)硬件实现，</p>
<p>CPU中的SATP寄存器保存Page Table Entry，指向最高一级的页目录page directory的物理内存地址</p>
<p>CPU中的TLB(Translation Lookside Buffer)保存近期访问的PTE内容</p>
<p>XV6</p>
<p>页表中的每一项为PTE(Page Table Entry)，一个PTE 54bit，一级页表为3.375KB</p>
<p>通过SATP寄存器获得最高级页表的物理地址PPN，使用L2查最高级页表获得中间级页表的物理地址；使用L1查中间级页表获得最低级页表的物理地址；使用L0查最低级页表，获得物理地址；</p>
<p>通过TLB获取物理地址PPN；</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240412190738605.png" class="" title="image-20240412190738605">

<img src="/2024/04/12/MIT6-S081-record/image-20240412192043741.png" class="" title="image-20240412192043741">



<p>Linux 2.6</p>
<p>虚拟地址高10位，在页目录表中查找对应索引，获得页表的物理地址；</p>
<p>虚拟地址中10位，在页表中查找对应索引，获得页的物理地址；</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240420140907729.png" class="" title="image-20240420140907729">





<p>以下情况为内核较小（仅存在于1MB物理内存以内），用户使用低3GB，内核使用高1GB，每页4KB</p>
<p>建立页目录表–页目录表的项即指向一个页表</p>
<p>e在物理地址0x100000建立页目录表，一个页目录表含1024个页表项PDE，每个页目录表项4B，占4KB，</p>
<p>第0项（保证loader程序在启动页表后能够正常运行）和第768（虚拟地址3GB，用户程序访问内核）项指向物理地址0x101000</p>
<p>第1023项指向页目录表字节的地址</p>
<p>建立页表</p>
<p>在物理地址0x101000建立，一个页表含1024个页表项，每个页表项4B，占4KB，可表示4KB*1024&#x3D;4MB的地址空间</p>
<p>该页表指向的物理地址为0-0x3fffff</p>
<p>loader中实现页表的构建与进入分页模式</p>
<p>loader程序</p>
<p>6.清空页目录占用空间0x100000+4096</p>
<p>7.创建页目录项并写入页目录表第0项(指向第1个页表)，第768项(指向第1个页表)和第1023项(指向页目录表，该项用于修改页目录表)</p>
<p>8.创建页表项写入第1个页表(位于0x101000)，分配物理地址0~0x3fffff(实验用mini内核在此处)</p>
<p>9.创建页目录项并写入页目录表第769项~第1022项(指向第2,3,4…个页表,第2,3,4…个页表位于0x102000,0x103000…)</p>
<p>10.修改gdt中内容：gdt中段描述符基址上移，</p>
<p>11.上移gdt基址，上移esp</p>
<p>12.将页目录地址赋值给cr3，打开cr3的pg位，新gdt值写入gdtr</p>
<h3 id="kernel启动"><a href="#kernel启动" class="headerlink" title="kernel启动"></a>kernel启动</h3><p>makefile所生成kernel文件</p>
<p>kernel程序内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kinit：设置好页表分配器（page allocator）</span><br><span class="line"></span><br><span class="line">kvminit：为kernel分配页表，将低地址设备映射到kernel地址空间（即在kernel页表中写入PTE指向设备）</span><br><span class="line"></span><br><span class="line">kvminithart：页表开始生效，程序计数器将会通过MMU翻译为物理地址</span><br><span class="line"></span><br><span class="line">processinit：设置好初始进程或者说设置好进程表单</span><br><span class="line"></span><br><span class="line">trapinit/trapinithart：设置好user/kernel mode转换代码</span><br><span class="line"></span><br><span class="line">plicinit/plicinithart：设置好中断控制器PLIC（Platform Level Interrupt Controller），我们后面在介绍中断的时候会详细的介绍这部分，这是我们用来与磁盘和console交互方式</span><br><span class="line"></span><br><span class="line">binit：分配buffer cache</span><br><span class="line"></span><br><span class="line">iinit：初始化inode缓存</span><br><span class="line"></span><br><span class="line">fileinit：初始化文件系统</span><br><span class="line"></span><br><span class="line">virtio_disk_init：初始化磁盘</span><br><span class="line"></span><br><span class="line">userinit：最后当所有的设置都完成了，操作系统也运行起来了，会通过userinit运行第一个进程</span><br></pre></td></tr></table></figure>

<p>Intel 8086</p>
<p>加载kernel elf文件前4K到0x10000，根据kernel elf文件前4K文件头信息加载kernel 映像文件到0x100000（此时已进入保护模式，可访问0x100000以后的位置，位于DRAM中），跳转执行kernel</p>
<p>内核加载完成时内存布局</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240416195436728.png" class="" title="image-20240416195436728">







<p>kernel进行：</p>
<p>开启分页机制：创建临时页表，加载页表物理地址到CR3并置位1，…</p>
<p>对系统的各个部分进行初始化：启动其他CPU…</p>
<p>BSP启动APs</p>
<p>kernel初始化完成：</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240413190243827.png" class="" title="image-20240413190243827">



<p>SiFive FU540</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240412184838896.png" class="" title="image-20240412184838896.png">



<h3 id="用户程序启动"><a href="#用户程序启动" class="headerlink" title="用户程序启动"></a>用户程序启动</h3><p>下图截取自教材</p>
<p>虚拟地址：</p>
<p>KERNBASE &#x3D; 0x8000 0000</p>
<p>KERNLINK &#x3D; 0x8010 0000</p>
<p>KERNBASE+PHYSTOP &#x3D; 0x8E00 0000</p>
<p>DEVSPACE &#x3D; 0xFE00 0000</p>
<p>物理地址：</p>
<p>低1M部分：0 - 0x10 0000</p>
<p>部分内核数据+空闲空间（用户程序所分配的页表）：0x10 0000 - 0xE00 0000(PHYSTOP)</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240412200020614.png" class="" title="image-20240412200020614">

<p>用户程序虚拟内存内容</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240413095215393.png" class="" title="image-20240413095215393">











<h2 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h2><h3 id="外部中断"><a href="#外部中断" class="headerlink" title="外部中断"></a>外部中断</h3><img src="/2024/04/12/MIT6-S081-record/image-20240417110342766.png" class="" title="image-20240417110342766">

<p>中断引脚：</p>
<p>INTR: Interupter</p>
<p>NMI: Non Maskable Interupter	中断向量号 2</p>
<p>外部设备中断由中断代理芯片接收后发送中断向量号到CPU中断引脚</p>
<h3 id="内部中断"><a href="#内部中断" class="headerlink" title="内部中断"></a>内部中断</h3><p>软中断：系统调用</p>
<p>异常：指针越界，栈溢出</p>
<h3 id="实模式下的中断向量表"><a href="#实模式下的中断向量表" class="headerlink" title="实模式下的中断向量表"></a>实模式下的中断向量表</h3><p>仅在实模式使用</p>
<p>位于0x00000</p>
<h3 id="保护模式下的中断描述符表"><a href="#保护模式下的中断描述符表" class="headerlink" title="保护模式下的中断描述符表"></a>保护模式下的中断描述符表</h3><p>中断向量号 -&gt; 中断向量表&#x2F;中断描述符表 索引下标</p>
<p>IDTR(Interrupt Descriptor Table Register) 中保存 IDT 位置信息</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240417105214817.png" class="" title="image-20240417105214817">

<p>IDT(Interrupt Descriptor Table)</p>
<p>item: 门</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240417104649804.png" class="" title="image-20240417104649804">

<p>过程</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240417110140482.png" class="" title="image-20240417110140482">



]]></content>
      <categories>
        <category>operation system</category>
      </categories>
      <tags>
        <tag>operation system</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇博客</title>
    <url>/2024/04/11/first_post/</url>
    <content><![CDATA[<p>写一个测试试一下</p>
<p>数学公式测试：$r_n&#x3D;W_n\log_2\left(1+\frac{P_nd_n^{-\beta}h_n^2}{N_0+I_n}\right)$</p>
<p>$$t_n^{loc}&#x3D;\frac{(1-\rho_n)C_n}{f_n}$$</p>
]]></content>
  </entry>
  <entry>
    <title>pic_test</title>
    <url>/2024/04/12/pic-test/</url>
    <content><![CDATA[<p>图片插入测试：</p>
<img src="/2024/04/12/pic-test/img.png" class="">]]></content>
  </entry>
</search>
