<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MIT6_S081_record</title>
    <url>/2024/04/12/MIT6-S081-record/</url>
    <content><![CDATA[<p>MIT6-S081课程与操作系统相关学习记录</p>
<span id="more"></span>



<h1 id="Opsys-learning-record"><a href="#Opsys-learning-record" class="headerlink" title="Opsys_learning_record"></a>Opsys_learning_record</h1><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><p>QEMU：近似模拟硬件SiFiveFU540-C000主板(RISC-V,64 bit register, 56 bit physical memory)</p>
<p>intel 8086：20根地址线，16位寄存器</p>
<h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><p>XV6：操作系统</p>
<h2 id="系统启动"><a href="#系统启动" class="headerlink" title="系统启动"></a>系统启动</h2><h3 id="基础信息"><a href="#基础信息" class="headerlink" title="基础信息"></a>基础信息</h3><h4 id="Intel-8086地址空间"><a href="#Intel-8086地址空间" class="headerlink" title="Intel 8086地址空间"></a>Intel 8086地址空间</h4><p>20根地址线，16位寄存器，可访问1MB的内存空间</p>
<p>0x00000-0x9FFFF: DRAM</p>
<p>0xF0000-0xFFFFF: ROM，BIOS代码位置</p>
<p>通过段寄存器左移4位+偏移地址</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240413150024273.png" class="" title="image-20240413150024273">

<img src="/2024/04/12/MIT6-S081-record/image-20240417110651232.png" class="" title="image-20240417110651232">





<h4 id="SiFive-FU540地址空间"><a href="#SiFive-FU540地址空间" class="headerlink" title="SiFive FU540地址空间"></a>SiFive FU540地址空间</h4><p>物理地址0x80000000以前的部分由主板上非DRAM组成（例如：boot ROM，PLIC等）</p>
<p>物理地址对应的硬件（图例为SiFive主板，仅截取部分，物理地址0x80000000以前的部分非DRAM）</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240413150852809.png" class="" title="image-20240413150852809">

<img src="/2024/04/12/MIT6-S081-record/image-20240412184947166.png" class="" title="image-20240412184947166">



<h4 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h4><p>不可见寄存器</p>
<p>GDTR	全局描述符表寄存器</p>
<p>IDTR	中断描述符表寄存器</p>
<p>LDTR	局部描述符表寄存器</p>
<p>TR	任务寄存器</p>
<p>CR0~3	控制寄存器</p>
<p>IP	指令指针寄存器</p>
<p>flags	标志寄存器</p>
<p>DR0~3	调试寄存器</p>
<p>可见寄存器</p>
<p>通用寄存器，可直接访问</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240420144227413.png" class="" title="image-20240420144227413">

<img src="/2024/04/12/MIT6-S081-record/image-20240420144655049.png" class="" title="image-20240420144655049">

<p>段寄存器，段基址*16+偏移</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240420144356905.png" class="" title="image-20240420144356905">



<p>32位与16位</p>
<p>32位地址总线，32位寄存器</p>
<p>寄存器组</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240416185859023.png" class="" title="image-20240416185859023">

<p>通用寄存器组，Eflag和EIP变为32位</p>
<p>段寄存器仍为16位宽！！内容为段选择子</p>
<h4 id="Intel汇编语法"><a href="#Intel汇编语法" class="headerlink" title="Intel汇编语法"></a>Intel汇编语法</h4><p>实模式</p>
<p>段内偏移默认基于DS进行偏移</p>
<p>基址寄存器：bx寄存器默认基于DS进行偏移，bp寄存器默认基于SS进行偏移</p>
<p>变址寄存器：si寄存器和di寄存器默认基于ds进行偏移</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax, [0x1234]	//取DS*16+0x1234处的值赋给ax</span><br><span class="line"></span><br><span class="line">add [bx], 0x1234	//将0x1234赋给内存中DS*16+bx处</span><br><span class="line"></span><br><span class="line">mov ax, [fs:0x5678]	//显式指定使用gs寄存器作为段基址，将gs*16+0x5678的值赋给ax</span><br><span class="line"></span><br><span class="line">mov byte [gs:0x01], &#x27;M&#x27;	//显式指定使用gs段寄存器作为段基址，指定操作数为1字节，向gs*16+0x01的位置写入1字节的数据&#x27;M&#x27;</span><br><span class="line"></span><br><span class="line">mov ax, [sp]	//将sp指向的值赋给ax</span><br><span class="line"></span><br><span class="line">mov ax, [bp+4]	//将SS*16+bp+4处的值赋给ax</span><br><span class="line"></span><br><span class="line">mov [di], ax	//将ax的值写入DS*16+di处</span><br><span class="line"></span><br><span class="line">mov [si+0x1234], ax	//将ax的值写入DS*16+si+0x1234处</span><br><span class="line"></span><br><span class="line">mov [bx+di], ax	//将ax的值写入DS*16+bx+di</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">jump $	// $符号表示当前行，该语句为跳转至当前行；$$为当前section</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">section data	//section为伪指令，面向程序员的跳转记号</span><br><span class="line">	var dd 0</span><br><span class="line">section code</span><br><span class="line">	jmp $$</span><br></pre></td></tr></table></figure>

<p>SS为栈底，bp为当前帧底</p>
<p>保护模式</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240420193121630.png" class="" title="image-20240420193121630">

<img src="/2024/04/12/MIT6-S081-record/image-20240420195137241.png" class="" title="image-20240420195137241">



<p>segment与section</p>
<p>section称为节，是指在汇编源码中经由关键字section或segment修饰、逻辑划分的指令或数据区域，汇编器会将这两个关键字修饰的区域在目标文件中编译成节，也就是说“节”最初诞生于目标文件中。</p>
<p>segment称为段，是链接器根据目标文件中属性相同的多个section合并后的section集合，这个集合称为segment，也就是段，链接器把目标文件链接成可执行文件，因此段最终诞生于可执行文件中。我们平时所说的可执行程序内存空间中的代码段和数据段就是指的segment。</p>
<h4 id="AT-T汇编语法"><a href="#AT-T汇编语法" class="headerlink" title="AT&amp;T汇编语法"></a>AT&amp;T汇编语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">movl %eax, base_value+(%ebx, %esi,2)	</span><br><span class="line">	//将eax的值写入内存base_value+ebx+esi*2处</span><br><span class="line">	//()括号表示取内的值作为内存地址</span><br><span class="line">	//寄存器前必须有%</span><br><span class="line"></span><br><span class="line">movl $123, %eax	//将立即数123写入寄存器eax</span><br></pre></td></tr></table></figure>



<p>内联汇编</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">asm [volatile] (&quot;&quot;)	//volatile为可选项，表示此处代码不得修改</span><br><span class="line"></span><br><span class="line">asm (&quot;movl $9, %eax;&quot; &quot;pushl %eax&quot;)</span><br><span class="line"></span><br><span class="line">asm [volatile] (&quot;&quot;:output :input :clobber/modify)</span><br><span class="line">	//output和input为c语言变量，clobber/modify可能存在寄存器破坏</span><br><span class="line"></span><br><span class="line">asm (&quot;addl %%ebx, %%eax;&quot;:&quot;=a&quot;(out_sum):&quot;a&quot;(in_a),&quot;b&quot;(in_b))</span><br><span class="line">	//&quot;a&quot;为约束名，约束c语言变量in_a使用寄存器eax</span><br><span class="line">	//&quot;b&quot;为约束名，约束c语言变量in_b使用寄存器ebx</span><br><span class="line">	//&quot;=a&quot;为约束名，将寄存器eax的值写入c语言变量out_sum</span><br><span class="line">	//=为只写，+为读写，&amp;为独占所约束的寄存器</span><br><span class="line">	//由于扩展内联汇编中，%0为占位符符号，故修改寄存器表示为%%eax</span><br><span class="line">	</span><br><span class="line">asm (&quot;movb %0 %1;&quot;::&quot;a&quot;(in_a),&quot;m&quot;(in_b))</span><br><span class="line">	//&quot;a&quot;为约束名，约束c语言变量in_a使用寄存器eax</span><br><span class="line">	//&quot;m&quot;为约束名，使用c语言变量in_b的内存地址</span><br><span class="line">	//%0,%1为序号占位符，所有input和output从左至右被标序号，代表对应的		input/output</span><br><span class="line">	</span><br><span class="line">asm (&quot;divb %[divisor]; movb %%al, %[result]&quot;\</span><br><span class="line">		:[result]&quot;=m&quot;(out)\</span><br><span class="line">		:&quot;a&quot;(in_a),[divisor]&quot;m&quot;(in_b)\</span><br><span class="line">		);</span><br><span class="line">	//[divisor]为in_b的内存地址，通过%[divisor]获取内存的值</span><br><span class="line">	//[result]为out的内存地址，</span><br></pre></td></tr></table></figure>



<h4 id="显存地址空间"><a href="#显存地址空间" class="headerlink" title="显存地址空间"></a>显存地址空间</h4><p>0xB8000-0xBFFFF为显存中字符显示部分，默认模式为80个字符*25行，一个字符2字节表示</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240420184138573.png" class="" title="image-20240420184138573">





<h3 id="BIOS"><a href="#BIOS" class="headerlink" title="BIOS"></a>BIOS</h3><p>计算机启动时为实模式运行，20位地址线，仅能访问1MB空间</p>
<p>机器上电，cs:ip 初始化为 0xf000:0x1110；</p>
<p>CPU从0xffff0开始执行，执行至0xfffff处指令jump后跳转至 f000:e05b，</p>
<p>BIOS内容代码进行硬件检测（内存检测，显卡检测…），</p>
<p>在0x000-0x3ff处建立数据结构，中断向量表IVT，填写中断例程，</p>
<p>进行启动盘检测(0盘0道1扇区最后2个字节:55AA)，从硬盘0盘0道1扇区加载MBR至0x7c00后，跳转执行MBR。</p>
<h3 id="MBR与Loader"><a href="#MBR与Loader" class="headerlink" title="MBR与Loader"></a>MBR与Loader</h3><p>MBR占512字节（刚好一个扇区），结尾内容为55AA。</p>
<p>MBR程序位于0x7c00，通过指定sp使用0x7c00以下部分作为程序栈</p>
<p>MBR程序</p>
<p>1.上卷清屏，写显存输出符号</p>
<p>2.将loader程序写进内存</p>
<p>loader程序位于0x900，使用0x900以下部分作为程序栈</p>
<p>loader实现从实模式到保护模式，并在保护模式加载内核</p>
<h4 id="启动保护模式"><a href="#启动保护模式" class="headerlink" title="启动保护模式"></a>启动保护模式</h4><p>段寄存器</p>
<p>保存选择子；RPL：特权等级；TI：选择GDT&#x2F;LDT；索引值：GDT&#x2F;LDT表中的第x个段描述符</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240416193845119.png" class="" title="image-20240416193845119">

<p>GDTR</p>
<p>保存GDT的内存地址，GDT的段描述符记录了各内存段的相关信息</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240416193617238.png" class="" title="image-20240416193617238">

<p>LDTR</p>
<p>保存LDT的内存地址，<strong>LDT必须在GDT中声明</strong>，通过GDT获得LDT内存地址后写入LDTR后使用LDT</p>
<p>段描述符</p>
<p>段基址：32位段基址；</p>
<p>段界限：对于数据段和代码段，段界限向高地址延申；对于栈，段界限向低地址延申；若偏移量超界错；段大小由 段界限*G 确定，</p>
<p>S：系统段</p>
<p>TYPE：段类型</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240416192952163.png" class="" title="image-20240416192952163">

<p>段描述符缓冲寄存器</p>
<p>保存处理后的段描述符</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240420192623948.png" class="" title="image-20240420192623948">

<p>地址计算方式&#x3D;32位段基址+32段偏移</p>
<p>loader中实现保护模式的启动</p>
<p>loader程序</p>
<p>1.构建GDT，<strong>GDT内容直接定义在loader内</strong></p>
<p>2.开启A20地址线</p>
<p>A20地址线：20位地址线的CPU自动发生地址回绕（20位段基址+16位段偏移所产生的超出1MB的部分）</p>
<p>32位地址线为了兼容20位地址线产生的地址回绕，在关闭A20地址线时，CPU将进行地址回绕；在开启A20地址线时，正确访问；</p>
<p>3.加载GDT地址到GDTR</p>
<p>4.置位CR0寄存器的PE位</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240416195112069.png" class="" title="image-20240416195112069">

<p>5.将段寄存器内容更新为段选择子内容</p>
<h4 id="页表组成与构建"><a href="#页表组成与构建" class="headerlink" title="页表组成与构建"></a>页表组成与构建</h4><p>虚拟地址与物理地址映射关系</p>
<p>虚实转换由MMU(Memory Management Unit)硬件实现，</p>
<p>CPU中的SATP寄存器保存Page Table Entry，指向最高一级的页目录page directory的物理内存地址</p>
<p>CPU中的TLB(Translation Lookside Buffer)保存近期访问的PTE内容</p>
<p>XV6</p>
<p>页表中的每一项为PTE(Page Table Entry)，一个PTE 54bit，一级页表为3.375KB</p>
<p>通过SATP寄存器获得最高级页表的物理地址PPN，使用L2查最高级页表获得中间级页表的物理地址；使用L1查中间级页表获得最低级页表的物理地址；使用L0查最低级页表，获得物理地址；</p>
<p>通过TLB获取物理地址PPN；</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240412190738605.png" class="" title="image-20240412190738605">

<img src="/2024/04/12/MIT6-S081-record/image-20240412192043741.png" class="" title="image-20240412192043741">



<p>Linux 2.6</p>
<p>虚拟地址高10位，在页目录表中查找对应索引，获得页表的物理地址（20位，余下12位补0）；</p>
<p>虚拟地址中10位，在页表中查找对应索引，获得页的物理地址（20位，余下12位补0）；</p>
<p>虚拟地址后12位，页内偏移；</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240420140907729.png" class="" title="image-20240420140907729">





<p>以下情况为内核较小（仅存在于1MB物理内存以内），用户使用低3GB，内核使用高1GB，每页4KB</p>
<p>建立页目录表–页目录表的项即指向一个页表</p>
<p>e在物理地址0x100000建立页目录表，一个页目录表含1024个页表项PDE，每个页目录表项4B，占4KB，</p>
<p>第0项（保证loader程序在启动页表后能够正常运行）指向物理地址0x101000</p>
<p>第768项（虚拟地址3GB，用户程序访问内核）指向物理地址0x101000</p>
<p>第1023项指向页目录表字节的地址0x100000</p>
<p>建立页表</p>
<p>在物理地址0x101000建立，一个页表含1024个页表项，每个页表项4B，占4KB，可表示4KB*1024&#x3D;4MB的地址空间</p>
<p>该页表指向的物理地址为0-0x3fffff</p>
<p>loader中实现页表的构建与进入分页模式</p>
<p>loader程序</p>
<p>6.清空页目录占用空间0x100000+4096</p>
<p>7.创建页目录项并写入页目录表第0项(指向第1个页表)，第768项(指向第1个页表)和第1023项(指向页目录表，该项用于修改页目录表)</p>
<p>8.创建页表项写入第1个页表(位于0x101000)，分配物理地址0~0x3fffff(实验用mini内核在此处)</p>
<p>9.创建页目录项并写入页目录表第769项~第1022项(指向第2,3,4…个页表,第2,3,4…个页表位于0x102000,0x103000…)</p>
<p>10.修改gdt中内容：gdt中段描述符基址上移，</p>
<p>11.上移gdt基址，上移esp</p>
<p>12.将页目录地址赋值给cr3，打开cr3的pg位，新gdt值写入gdtr</p>
<h3 id="kernel地址空间"><a href="#kernel地址空间" class="headerlink" title="kernel地址空间"></a>kernel地址空间</h3><p>makefile所生成kernel文件</p>
<p>kernel程序内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kinit：设置好页表分配器（page allocator）</span><br><span class="line"></span><br><span class="line">kvminit：为kernel分配页表，将低地址设备映射到kernel地址空间（即在kernel页表中写入PTE指向设备）</span><br><span class="line"></span><br><span class="line">kvminithart：页表开始生效，程序计数器将会通过MMU翻译为物理地址</span><br><span class="line"></span><br><span class="line">processinit：设置好初始进程或者说设置好进程表单</span><br><span class="line"></span><br><span class="line">trapinit/trapinithart：设置好user/kernel mode转换代码</span><br><span class="line"></span><br><span class="line">plicinit/plicinithart：设置好中断控制器PLIC（Platform Level Interrupt Controller），我们后面在介绍中断的时候会详细的介绍这部分，这是我们用来与磁盘和console交互方式</span><br><span class="line"></span><br><span class="line">binit：分配buffer cache</span><br><span class="line"></span><br><span class="line">iinit：初始化inode缓存</span><br><span class="line"></span><br><span class="line">fileinit：初始化文件系统</span><br><span class="line"></span><br><span class="line">virtio_disk_init：初始化磁盘</span><br><span class="line"></span><br><span class="line">userinit：最后当所有的设置都完成了，操作系统也运行起来了，会通过userinit运行第一个进程</span><br></pre></td></tr></table></figure>

<img src="/2024/04/12/MIT6-S081-record/image-20240421144651548.png" class="" title="image-20240421144651548">



<p>loader程序与kernel程序对比</p>
<p>loader为纯二进制程序 ，仅包含机器码，根据机器码内容装载至内存后直接开始运行；</p>
<p>kernel为elf文件，存在文件头，节等内容，在进行segment展开后成为可运行的机器码</p>
<p>loader中实现kernel写入内核</p>
<p>loader程序</p>
<p>13.读磁盘指定扇区，写kernel.bin到0x70000~0x9fbff</p>
<p>14.初始化kernel，将kernel.bin中的segment复制到被编译的虚拟地址处，第一个segment位于0x1500</p>
<p>15.修改栈指针，跳转至kernel运行</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240421151156773.png" class="" title="image-20240421151156773">



<p>kernel程序运行见下文</p>
<p>SiFive FU540</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240412184838896.png" class="" title="image-20240412184838896.png">



<h3 id="用户程序地址空间"><a href="#用户程序地址空间" class="headerlink" title="用户程序地址空间"></a>用户程序地址空间</h3><p>虚拟地址：</p>
<p>KERNBASE &#x3D; 0x8000 0000</p>
<p>KERNLINK &#x3D; 0x8010 0000</p>
<p>KERNBASE+PHYSTOP &#x3D; 0x8E00 0000</p>
<p>DEVSPACE &#x3D; 0xFE00 0000</p>
<p>物理地址：</p>
<p>低1M部分：0 - 0x10 0000</p>
<p>部分内核数据+空闲空间（用户程序所分配的页表）：0x10 0000 - 0xE00 0000(PHYSTOP)</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240412200020614.png" class="" title="image-20240412200020614">

<p>用户程序虚拟内存内容</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240413095215393.png" class="" title="image-20240413095215393">



<p>过程见下文</p>
<h2 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h2><h3 id="外部中断"><a href="#外部中断" class="headerlink" title="外部中断"></a>外部中断</h3><img src="/2024/04/12/MIT6-S081-record/image-20240421152049031.png" class="" title="image-20240421152049031">

<p>中断引脚：</p>
<p>INTR: Interupter</p>
<p>NMI: Non Maskable Interupter	向CPU传入中断向量号 2</p>
<p>外部设备中断由中断代理芯片8259A接收后发送中断向量号到CPU中断引脚INTR</p>
<h3 id="内部中断"><a href="#内部中断" class="headerlink" title="内部中断"></a>内部中断</h3><p>软中断：系统调用</p>
<p>异常：指针越界，栈溢出</p>
<h4 id="实模式下的中断向量表"><a href="#实模式下的中断向量表" class="headerlink" title="实模式下的中断向量表"></a>实模式下的中断向量表</h4><p>仅在实模式使用，由BIOS进行创建，位于0x00000~0x003ff</p>
<p>可使用汇编指令INT x访问，</p>
<h4 id="保护模式下的中断描述符表"><a href="#保护模式下的中断描述符表" class="headerlink" title="保护模式下的中断描述符表"></a>保护模式下的中断描述符表</h4><p>中断向量号 -&gt; 中断向量表&#x2F;中断描述符表 索引下标</p>
<p>IDTR(Interrupt Descriptor Table Register) 中保存 IDT 位置信息</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240417105214817.png" class="" title="image-20240417105214817">

<p>IDT(Interrupt Descriptor Table)</p>
<p>item: 门</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240417104649804.png" class="" title="image-20240417104649804">

<h3 id="中断处理过程"><a href="#中断处理过程" class="headerlink" title="中断处理过程"></a>中断处理过程</h3><p>1.中断请求</p>
<p>中断请求可能为内部中断或者外部中断</p>
<p>外部中断如下：</p>
<p>当外设发出中断信号后，信号被送入8259A；</p>
<p>8259A检查IMR寄存器中是否屏蔽了来自该IRQ的信号，若IMR寄存器中对应的位为1，表示屏蔽了IRQ代表的中断，则丢掉此中断信号，若IMR寄存器中对应的位为0，表示未屏蔽此中断，则将IRR寄存器中与此中断对应的位 置1。</p>
<p>PR优先级裁决器从IRR寄存器中挑选一个优先级最大的中断，然后8259A向CPU发送INTR信号。</p>
<p>内部中断由代码通过中断向量号触发。</p>
<p>2.(外)中断响应</p>
<p>CPU收到INTR信号后便知道有新的中断了，在执行完当前指令后，向8259A发送一个中断回复信号。</p>
<p>8259A收到回复信号后，将选出来的优先级最大的中断在ISR寄存器中相应的位 置1，表示该中断正在处理，同时将此中断在IRR寄存器中相应的位 置0，相当于将此中断从中断请求队列中去掉。</p>
<p>CPU再向8259A发送INTR信号，表示想要获取中断向量号。</p>
<p>8259A通过数据总线向CPU发送中断向量号，<strong>中断向量号 &#x3D; 起始向量号 + IRQ接口号</strong>，一般起始向量号为32，从中断向量表可看出0—31已经被占用，后面的32—127是分配给可屏蔽中断的，所以此处外设的中断设置的起始向量号便为32。</p>
<p>3.保护现场__压栈</p>
<p>中断栈位于内核空间的PCB中内核栈页的最顶端</p>
<p>CPU据中断向量号去IDT中获取中断描述符，取出选择子中的DPL与当前特权级CPL进行比较，若特权级发生变化，则需要切换栈。（不同特权级有着不同的栈，如Linux使用了0， 3特权级，则有两个栈，一个内核栈，一个用户栈）</p>
<p>于是处理器临时保存当前的旧栈SS和ESP的值，从TSS（每一个任务有一个TSS结构，其中保存着不同特权级栈的SS和ESP值）中获取与DPL特权级同的栈信息加载到SS和ESP寄存器。再将旧栈SS和ESP的值压入新栈中。若没有特权级变化，则跳过此步骤。</p>
<p>压入程序状态信息，即EFLAGS寄存器</p>
<p>压入断点，即返回地址，即当前任务的CS，EIP值。</p>
<p>若该中断有错误码，压入错误码</p>
<p>图示为发生了特权级改变时的压栈情况</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240421154614894.png" class="" title="image-20240421154614894">

<p>4.定位中断服务程序</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240417110140482.png" class="" title="image-20240417110140482">



<p>5.中断处理过程</p>
<p>中断的实际处理过程就是执行中断处理程序，Linux将中断处理程序分为上下两部分，需要紧急处理立即执行的归为上半部，不那么紧急的归为下半部。</p>
<p>开中断，即EFLAGS的IF位置1，表示允许响应中断；关中断，即EFLAGS的IF位置0，表示不允许响应中断。</p>
<p>上半部分是刻不容缓的，需要立即执行的部分，所以要在关中断的状态下执行。</p>
<p>而下半部分不那么紧急，在开中断的情况下进行，如果此时有新的中断发生，当前中断处理程序便会换下CPU，CPU会另寻时间重新调度，完成整个中断处理程序。</p>
<p>6.中断返回——出栈</p>
<p>中断返回就是出栈的过程，将第三步保护现场压入栈中的信息弹出。</p>
<p>有错误码弹出错误码。</p>
<p>此时的栈顶指针ESP应指向EIP_old，剩余栈中的信息使用iret指令弹出，CPU执行到iret指令时再次检查和比较特权级是否变化。</p>
<p>弹出EIP_old, CS_old</p>
<p>若特权级变化，将ESP_old, SS_old, 加载到ESP，SS寄存器。</p>
<h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><p>进程有各自的页表</p>
<p>进程&#x3D;线程+资源</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240424100100197.png" class="" title="image-20240424100100197">



<h3 id="在内核空间实现的线程与调度"><a href="#在内核空间实现的线程与调度" class="headerlink" title="在内核空间实现的线程与调度"></a>在内核空间实现的线程与调度</h3><p>内核线程包含</p>
<p>1.内核栈</p>
<p>中断栈，位于PCB中栈所在页的顶端；线程栈，位置不固定，一般位于中断栈的下方</p>
<p>2.PCB内容</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>self_kstack</td>
<td>内核栈指针</td>
</tr>
<tr>
<td>status</td>
<td>线程状态</td>
</tr>
<tr>
<td>name</td>
<td>线程名</td>
</tr>
<tr>
<td>priority</td>
<td>优先级</td>
</tr>
<tr>
<td>tick</td>
<td>每次在处理器上运行的时钟数</td>
</tr>
<tr>
<td>elapsed_tick</td>
<td>已使用时钟数</td>
</tr>
<tr>
<td>general_tag</td>
<td>线程在队列上的tag</td>
</tr>
<tr>
<td>all_list_tag</td>
<td>线程队列</td>
</tr>
<tr>
<td>pgdir</td>
<td>页表</td>
</tr>
<tr>
<td>stack_magic</td>
<td>栈溢出标记，位于内核栈下方</td>
</tr>
</tbody></table>
<p>执行过程</p>
<p>初始化PCB队列信息；如果kernel第一次运行，则为kernel创建PCB；</p>
<p>kernel启动线程，传入线程参数，启动线程：</p>
<p>1.从内核空间申请页面，加入线程队列，线程指针thread指向该页面底部；</p>
<p>2.初始化页面为PCB，写入对应信息到PCB，初始化线程内核栈位置为页面顶部，thread-&gt;self_kstack指向线程内核栈；</p>
<p>3.下移thread-&gt;self_kstack，留出中断栈空间sizeof(intr_stack)</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240425101059850.png" class="" title="image-20240425101059850">

<p>4.下移thread-&gt;self_kstack，留出线程栈空间sizeof(thread_stack)</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240425101121206.png" class="" title="image-20240425101121206">

<p>5.创建线程栈指针kthread_stack指向当前thread-&gt;self_kstack指针位置，</p>
<p>初始化线程栈，依次压入eip，函数名，函数参数和寄存器初始值ebp,ebx,esi,edi；</p>
<p>6.thread-&gt;self_kstack位于栈顶，栈顶内容为edi，esi，ebx，ebp，指向线程栈的最低处，弹出寄存器初始值到对应寄存器；执行ret，将压栈的函数参数，函数名和返回地址弹出，并前往执行对应函数；默认传入main函数运行。</p>
<p>调度过程：</p>
<p>定时器定时发生0x20中断，中断发生后进入intr_timer_handler函数，该函数对当前运行线程的PCB进行操作：检测栈是否溢出，记录该线程占用的CPU时钟数，若时间片已耗尽进行调度，未耗尽减少可用时间片；</p>
<h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>进程包含</p>
<p>1.内核栈</p>
<p>中断栈，位于PCB中栈所在页的顶端；线程栈，位置不固定，一般位于中断栈的下方</p>
<p>2.PCB内容</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>self_kstack</td>
<td>内核栈指针</td>
</tr>
<tr>
<td>status</td>
<td>线程状态</td>
</tr>
<tr>
<td>name</td>
<td>线程名</td>
</tr>
<tr>
<td>priority</td>
<td>优先级</td>
</tr>
<tr>
<td>tick</td>
<td>每次在处理器上运行的时钟数</td>
</tr>
<tr>
<td>elapsed_tick</td>
<td>已使用时钟数</td>
</tr>
<tr>
<td>general_tag</td>
<td>线程在队列上的tag</td>
</tr>
<tr>
<td>all_list_tag</td>
<td>线程队列</td>
</tr>
<tr>
<td>pgdir</td>
<td>页表<strong>虚拟地址</strong></td>
</tr>
<tr>
<td>stack_magic</td>
<td>栈溢出标记，位于内核栈下方</td>
</tr>
<tr>
<td>virtual_addr_userprog_vaddr</td>
<td>用户进程的虚拟地址</td>
</tr>
</tbody></table>
<h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p>物理内存被划分为内核内存池和用户内存池</p>
<p>所有程序（用户程序和内核）存在虚拟地址池，记录虚拟内存是否使用</p>
<img src="/2024/04/12/MIT6-S081-record/image-20240425160621730.png" class="" title="image-20240425160621730">

]]></content>
      <categories>
        <category>operation system</category>
      </categories>
      <tags>
        <tag>operation system</tag>
      </tags>
  </entry>
  <entry>
    <title>pic_test</title>
    <url>/2024/04/12/pic-test/</url>
    <content><![CDATA[<p>图片插入测试：</p>
<img src="/2024/04/12/pic-test/img.png" class="">]]></content>
  </entry>
  <entry>
    <title>algorithm</title>
    <url>/2024/04/25/algorithm/</url>
    <content><![CDATA[<p>算法相关学校记录</p>
<span id="more"></span>



<h1 id="らくがき-about-Algorithm"><a href="#らくがき-about-Algorithm" class="headerlink" title="らくがき about Algorithm"></a>らくがき about Algorithm</h1><h2 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h2><p>递归&amp;动态规划</p>
.PNG)



<p>递归会重复进入状态</p>
<p>eg.无权图两点间路径数</p>
<p>递归思路：</p>
<p>1.从终点出发，存在多个选择，每个选择为分支，<strong>传入递归函数</strong>，转移至下一态；</p>
<p>2.对于每一个中间态，存在多个选择，<strong>传入递归函数</strong>；</p>
<p>3.到达起点，递归结束，返回记录到达目标点的分支数；递归返回；</p>
<p>DP思路：</p>
<p>1.从起点出发，到达所有<strong>旁侧点</strong>的走法有1种；</p>
<p>2.到达<strong>次旁侧点</strong>的走法为从<strong>旁侧点</strong>到<strong>次旁侧点</strong>的走法之和；</p>
<p>3.到达终点的走法为从<strong>终点旁侧点</strong>到终点的走法和；</p>
<p>eg.有权图两点间最大路径</p>
<p>递归思路：</p>
<p>1.从终点出发，存在多个选择，每个选择为分支，<strong>传入递归函数</strong>，转移至下一态；</p>
<p>2.对于每一个中间态，存在多个选择，<strong>传入递归函数</strong>；</p>
<p>3.到达起点，递归结束，返回当前节点值；递归返回；</p>
<p>DP思路：</p>
<p>1.从起点出发，到达所有<strong>旁侧点</strong>的距离可知；</p>
<p>2.到达<strong>次旁侧点</strong>的最大距离为从<strong>旁侧点</strong>到<strong>次旁侧点</strong>的最大距离；</p>
<p>3.到达终点的走法为从<strong>终点旁侧点</strong>到终点的最大距离；</p>
]]></content>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇博客</title>
    <url>/2024/04/11/first_post/</url>
    <content><![CDATA[<p>写一个测试试一下</p>
<p>数学公式测试：$r_n&#x3D;W_n\log_2\left(1+\frac{P_nd_n^{-\beta}h_n^2}{N_0+I_n}\right)$</p>
<p>$$t_n^{loc}&#x3D;\frac{(1-\rho_n)C_n}{f_n}$$</p>
]]></content>
  </entry>
</search>
