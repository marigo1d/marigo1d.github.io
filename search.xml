<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>common-commands</title>
    <url>/2024/06/22/common-commands/</url>
    <content><![CDATA[<p>常用指令</p>
<span id="more"></span>



<h1 id="Common-Commands"><a href="#Common-Commands" class="headerlink" title="Common Commands"></a>Common Commands</h1><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><p><a href="https://zhuanlan.zhihu.com/p/69746955">https://zhuanlan.zhihu.com/p/69746955</a></p>
<p>python变量，函数均为对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>() : </span><br><span class="line">    <span class="comment">#函数在创建时同时生成变量对象hello和函数对象（函数对象名为hello）</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    x=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(test())<span class="comment">#函数默认返回值为None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">say = hello</span><br><span class="line"> </span><br><span class="line"><span class="keyword">del</span> hello <span class="comment">#del删除了hello变量对象</span></span><br><span class="line">say()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(say))<span class="comment">##对象属性</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(say))<span class="comment">##对象属性</span></span><br><span class="line"><span class="built_in">print</span>(say)<span class="comment">##对象属性</span></span><br><span class="line"><span class="built_in">print</span>(say.__name__) <span class="comment">##对象属性,查看对象名</span></span><br></pre></td></tr></table></figure>



<p>python类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MyClass:</span><br><span class="line">    def my_method(self, arg1, arg2):</span><br><span class="line">    #类的方法第一个参数为self</span><br><span class="line">        # 方法体</span><br><span class="line"></span><br><span class="line">#Bound Method</span><br><span class="line">obj = MyClass()#类 实例化</span><br><span class="line">obj.my_method(arg1, arg2)#实例对象调用方法</span><br><span class="line"></span><br><span class="line">#Unbound Method</span><br><span class="line">MyClass.my_method(obj, arg1, arg2)</span><br><span class="line">	#原因：可以直接通过类访问方法，但是必须指定类的实例</span><br></pre></td></tr></table></figure>



<p>函数内部函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">        x = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> test</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(hello()())</span><br><span class="line"><span class="comment">#首先hello()返回函数对象test，然后调用 test()</span></span><br></pre></td></tr></table></figure>



<p>函数装饰器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">f</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inn</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;inner&quot;</span>)</span><br><span class="line">        f()</span><br><span class="line">    <span class="keyword">return</span> inn</span><br><span class="line"></span><br><span class="line"><span class="meta">@hello</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#等价于</span></span><br><span class="line">test=hello(test)<span class="comment">#原函数对象test仍存在，变量对象test指向新函数hello(test)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#test &lt;function test at 0x000001821AE551C0&gt;</span></span><br><span class="line"><span class="comment">#test() None</span></span><br><span class="line"><span class="comment">#test为函数对象，test()为（执行函数对象后的）返回值</span></span><br><span class="line">test()</span><br><span class="line"><span class="built_in">print</span>(test.__name__)</span><br></pre></td></tr></table></figure>





<p>with语句 上下文对象管理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">with open(&#x27;myfile.txt&#x27;, &#x27;r&#x27;) as f:</span><br><span class="line">    contents = f.read()</span><br><span class="line">    print(contents)</span><br></pre></td></tr></table></figure>

<ul>
<li>**open(‘myfile.txt’, ‘r’)**：这是一个上下文管理器，它打开文件并返回一个文件对象。</li>
<li><strong>as f</strong>：将文件对象赋值给变量 f，以便在 with 代码块中使用。</li>
<li>在 with 代码块中，我们可以使用 f 读取文件内容。</li>
<li>当 with 代码块执行完毕后，文件会自动关闭，即使在读取过程中发生异常。</li>
</ul>
<p>Python类型注解</p>
<p><a href="https://zhuanlan.zhihu.com/p/419955374">https://zhuanlan.zhihu.com/p/419955374</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">say_hi</span>(<span class="params">name: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="comment">#规定函数传入参数为str类型，返回值为str类型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;Hello <span class="subst">&#123;name&#125;</span>!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mix</span>(<span class="params">scores: <span class="built_in">list</span>[<span class="built_in">int</span>], ages: <span class="built_in">dict</span>[<span class="built_in">str</span>, <span class="built_in">int</span>]</span>) -&gt; <span class="built_in">tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]:</span><br><span class="line">    <span class="comment">#容器注解</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">seq: Seq1[<span class="built_in">str</span>]</span>):</span><br><span class="line">    <span class="comment">#传入参数为（列表+元组）的泛化：序列Seq</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> seq:</span><br><span class="line">        <span class="built_in">print</span>(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">a: <span class="built_in">int</span> = <span class="number">0</span></span>) -&gt; <span class="type">Optional</span>[<span class="built_in">str</span>]:</span><br><span class="line">    <span class="comment">#可选返回值：为None或为str</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Yeah&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>() -&gt; <span class="type">Union</span>[<span class="built_in">str</span>, <span class="built_in">int</span>, <span class="built_in">float</span>]:</span><br><span class="line">    <span class="comment">#可选返回值：为str，int，float 三选一</span></span><br><span class="line">    <span class="comment">#Optional[int] 和 Union[int, None] 是等价的。</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#T为泛型，T必须为str或int</span></span><br><span class="line">T = TypeVar(<span class="string">&#x27;T&#x27;</span>, <span class="built_in">str</span>, <span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bar</span>(<span class="params">a: T, b: T</span>) -&gt; <span class="type">List</span>[T]:</span><br><span class="line">    <span class="keyword">return</span> [a, b]</span><br><span class="line"></span><br><span class="line"><span class="comment"># K的具体类型没有限制</span></span><br><span class="line">K = TypeVar(<span class="string">&quot;K&quot;</span>)</span><br></pre></td></tr></table></figure>





<h2 id="python-环境"><a href="#python-环境" class="headerlink" title="python 环境"></a>python 环境</h2><p>sudo apt-get update  # 更新包管理器</p>
<p>sudo apt-get install python3-venv  # 安装Python虚拟环境工具</p>
<p>cd &#x2F;path&#x2F;to&#x2F;your&#x2F;project</p>
<p>python3 -m venv venv</p>
<p>source venv&#x2F;bin&#x2F;activate</p>
<p>pip install -r requirements.txt</p>
<p>deactivate</p>
<p>conda指令</p>
<p>conda env list</p>
<p>conda create –name your_env_name python&#x3D;3.5 numpy scipy</p>
<p>conda remove –<em>name</em> <em>your_env_name</em> –all</p>
<p>conda install</p>
<p>​	conda install numpy&#x3D;1.9.3</p>
<p>activate your_env_name</p>
<p>deactivate</p>
<p>conda clean –all</p>
<p>当前conda虚拟环境中存在pip时，使用pip指令将优先使用环境中pip而非全局pip，可通过pip list（当前环境必须已安装pip）和 conda list 查看当前环境包列表</p>
<p>出现报错</p>
<p>PackagesNotFoundError: The following packages are not available from current channels</p>
<p>尝试在<a href="https://anaconda.org直接搜索该包并使用网站所提供的指令安装/">https://anaconda.org直接搜索该包并使用网站所提供的指令安装</a></p>
<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><ol>
<li><p>**<code>docker pull</code>**：用于从 Docker 镜像仓库下载镜像到本地主机。</p>
<ul>
<li>语法：<code>docker pull [OPTIONS] NAME[:TAG|@DIGEST]</code></li>
<li>示例：<code>docker pull ubuntu:20.04</code></li>
</ul>
<p>这个命令用于获取 Docker 镜像，其中 <code>NAME</code> 表示镜像的名称，<code>TAG</code> 表示镜像的标签，或者可以使用 <code>@DIGEST</code> 来指定镜像的摘要。如果不指定标签，将默认获取 <code>latest</code> 标签的镜像。</p>
</li>
<li><p>**<code>docker load</code>**：用于从文件加载镜像，通常是以 tar 归档文件的形式。</p>
<ul>
<li>语法：<code>docker load [OPTIONS]</code></li>
<li>示例：<code>docker load -i myimage.tar</code></li>
</ul>
<p>这个命令用于加载以 tar 归档文件格式存储的 Docker 镜像。通常用于将镜像从一个环境传输到另一个环境。</p>
</li>
<li><p>**<code>docker save</code>**：用于将 Docker 镜像保存为 tar 归档文件。</p>
<ul>
<li>语法：<code>docker save [OPTIONS] IMAGE [IMAGE...]</code></li>
<li>示例：<code>docker save -o myimage.tar myimage:tag</code></li>
</ul>
<p>这个命令允许你将一个或多个 Docker 镜像保存为 tar 归档文件，通常用于导出镜像以便在不同环境中使用。</p>
</li>
<li><p>**<code>docker run</code>**：用于创建和启动 Docker 容器。</p>
<ul>
<li>语法：<code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code></li>
<li>示例：<code>docker run -d -p 8080:80 my-web-app</code></li>
</ul>
<p>这个命令用于在 Docker 容器中运行一个镜像，你需要指定镜像的名称、容器选项（如端口映射、环境变量、容器名称等），以及容器内要执行的命令。</p>
</li>
<li><p>**<code>docker build</code>**：用于构建自定义 Docker 镜像，通常通过 Dockerfile 文件定义构建步骤。</p>
<ul>
<li>语法：<code>docker build [OPTIONS] PATH | URL | -</code></li>
<li>示例：<code>docker build -t my-custom-image .</code></li>
</ul>
<p><code>docker build</code> 命令用于基于 Dockerfile 构建自定义镜像。你需要提供包含 Dockerfile 的路径，以及可选的选项和标签。</p>
<p>Dockerfile</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用官方 Python 3 镜像作为基础镜像</span><br><span class="line">FROM python:3.8</span><br><span class="line"></span><br><span class="line"># 设置工作目录</span><br><span class="line">WORKDIR /app</span><br><span class="line"></span><br><span class="line"># 复制本地项目到容器中</span><br><span class="line">COPY ./myproject /app</span><br><span class="line"></span><br><span class="line"># 安装项目依赖</span><br><span class="line">RUN pip install -r requirements.txt</span><br><span class="line"></span><br><span class="line"># 指定容器启动命令</span><br><span class="line">CMD [&quot;python&quot;, &quot;app.py&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>




</li>
<li><p>**<code>docker rm</code>**：用于删除已停止的容器。</p>
<ul>
<li>语法：<code>docker rm [OPTIONS] CONTAINER [CONTAINER...]</code></li>
<li>示例：<code>docker rm my-container</code></li>
</ul>
<p>这个命令用于删除一个或多个已经停止的容器，释放资源并清理系统。</p>
</li>
<li><p>**<code>docker stop</code>**：用于停止运行中的容器。</p>
<ul>
<li>语法：<code>docker stop [OPTIONS] CONTAINER [CONTAINER...]</code></li>
<li>示例：<code>docker stop my-container</code></li>
</ul>
<p>这个命令用于停止一个或多个正在运行的容器，使它们从运行状态转换为停止状态。</p>
</li>
<li><p>**<code>docker ps</code>**：用于列出正在运行的容器。</p>
<ul>
<li>语法：<code>docker ps [OPTIONS]</code></li>
<li>示例：<code>docker ps -a</code></li>
</ul>
<p><code>docker ps</code> 命令用于列出当前正在运行的容器，包括容器的 ID、状态、端口映射等信息。加上 <code>-a</code> 选项可以列出所有容器，包括已停止的容器。</p>
</li>
</ol>
<h2 id="Git操作实例"><a href="#Git操作实例" class="headerlink" title="Git操作实例"></a><strong>Git操作实例</strong></h2><p><a href="https://blog.csdn.net/qq_34021712/article/details/117260462">https://blog.csdn.net/qq_34021712/article/details/117260462</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在桌面创建test目录</span><br><span class="line">mkdir /Users/wangsaichao/Desktop/test</span><br><span class="line"></span><br><span class="line"># 切换到test目录</span><br><span class="line">cd /Users/wangsaichao/Desktop/test</span><br><span class="line"></span><br><span class="line"># 创建并初始化git库</span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"># 链接到远程git仓库 </span><br><span class="line"># -t 默认使用 main 分支，origin为远程仓库别名（替换链接）</span><br><span class="line">git remote add origin -t main https://github.com/Helloworld-7558/git-demo.git</span><br><span class="line"></span><br><span class="line"># 将远程git库下载到本地</span><br><span class="line">git pull origin main</span><br><span class="line"></span><br><span class="line">#修改</span><br><span class="line"></span><br><span class="line"># 将目录下所有文件都增加到本地库中。</span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"># 提交更改到本地仓库</span><br><span class="line">git commit -m &#x27;提交注释&#x27;</span><br><span class="line"></span><br><span class="line"># 将本地的master分支改为main分支, github为避免联想奴隶制。在持续的外界影响之下,默认分支由master改为main。 </span><br><span class="line"># 但是git工具默认init还是创建的master分支 所以要改成main分支。</span><br><span class="line">git branch -M main</span><br><span class="line"></span><br><span class="line"># 将本地修改推到github上</span><br><span class="line">git push -u origin main  # 首次</span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure>



<ol>
<li>什么是主分支<br>主分支是<em>默认分支</em>,当执行<code>git clone</code>时，克隆的就是默认分支。<code>git init</code>初始化时，会以<strong>master</strong>分支作为主分支，主分支可以改成其他分支。</li>
<li>什么是origin<br><strong>origin</strong>代表远程分支，比如gitlab上保存的分支。Git作为分布式版本控制工具，本地分支与远程分支并无不同。假如远程服务器上有一个<strong>develop</strong>分支，那么在本地以<strong>origin&#x2F;develop</strong>代表远程分支</li>
<li>如何创建新分支<br># 方法一<br>git branch branch_name<br># 此方法以当前所在分支为基础来创建<br># e.g. git branch feature&#x2F;test<br>​<br># 方法二<br>git branch branch_name base_branch_name<br># 此方法忽略当前所在的分支，以指定的base_branch_name为基础来创建分支<br># e.g. git branch feature&#x2F;test develop<br># e.g. git branch feature&#x2F;test origin&#x2F;develop<br>​<br># 方法三<br>git checkout -b branch_name<br># 此方法是一个快捷操作，创建并切换分支。checkout本是用来切换分支的，增加“-b”选项指：当分支不存在时创建，同样支持指定base_branch_name<br># e.g. git checkout -b feature&#x2F;test<br># e.g. git checkout -b feature&#x2F;test develop<br># e.g. git checkout -b feature&#x2F;test origin&#x2F;develop</li>
<li>如何切换分支<br>git checkout branch_name</li>
<li>查看所有分支<br># 列出本地所有分支<br>git branch</li>
<li>如何删除分支<br>当使用gitflow工作流时，本地分支会越来越多，不用的分支可以删除<br># 删除单个分支<br>git branch -d branch_name<br>​<br># 删除多个分支<br>git branch | grep feature&#x2F; | xargs git branch -d<br># git branch命令不支持管道操作，所获得的列表不能作为git branch -d的参数，所以需要使用xargs做一个辅助</li>
<li>如何提交修改<br># 第一步：将修改进行暂存(Stage)<br>git add .&#x2F; # 添加所有本地修改<br># 添加特定文件 git add file1 file2<br># 添加特定文件夹下的所有文件 git add .&#x2F;dir1&#x2F;dir2&#x2F;<br>​<br># 第二步：执行commit<br>git commit -m ‘commit message’<br># 使用编辑器编写提交说明 git commit ,Git将自动打开默认编辑器，通常是Vim，可以自定义<br># 在上一条提交上追加提交 git commit –amend，本次提交不会生成一条新的提交记录。应该保证每次提交都是一次完整的功能修改，当发现上次提交的内容不完整时，应该采用此种方法进行追加提交。</li>
<li>如何取消本地修改<br># 将文件从暂存区中去除,文件的修改不会丢失<br>git reset – filename<br>​<br># 将文件(未暂存)的修改取消，文件的修改将丢失<br>git checkout – filename<br>​<br># 将所有文件(未暂存)修改取消,文件的修改将丢失<br>git checkout – .&#x2F;<br>​<br># 将所有文件(包括已暂存)的修改取消，文件的修改将丢失<br>git reset –hard HEAD</li>
<li><code>checkout</code>命令为什么可以用来<em>取消文件修改</em><br><code>checkout</code>命令翻译为”检出”，他的实际作用是将版本库中的内容拿出来放到工作区。<br>当执行<code>git checkout branch_name</code>时相当于把<code>brach_name</code>分支的内容拿出来放到工作区，表象就是切换了分支<br>当执行<code>git checkout -- filename</code>时，相当于把该文件版本库中的内容拿出来放到工作区，表象就是覆盖了该文件在工作区中的修改</li>
<li><code>rebase</code>命令什么时候用<br><code>rebase</code>命令翻译为<em>变基</em>。我们在创建任何分支时，都有一个基分支，比如：<br><code>git branch feature/test develop</code>创建一个<code>feature/test</code>分支，他的基分支就是<code>develop</code>。Git会记录每个分支的基分支，变基就是改变分支的基分支。变基的表象就是基分支上改动会合并到当前分支，但不会生成合并记录。所以其使用场景就是：当develop上有别人提交的新内容，并且我们需要这些新内容时，执行一次变基，这样别人提交的最新代码就会出现在当前分支上。<br># 第一种用法：完全变基<br>git rebase –onto base_branch_name branch_name<br># 此种不常用<br>​<br># 第二种用法：通过变基获取最新代码<br>git rebase base_branch_name<br># 在向服务器推送自己的代码前，执行一遍rebase能提前知道自己的代码是否和别人的有冲突，便于提前解决冲突，当有冲突时需要手动解决冲突，然后执行：git rebase –continue</li>
<li>向服务器推送代码<br>在使用gitflow工作流时，会经常执行<code>git push origin branch_name</code>命令。比简单的<code>git push</code>命令多了两个参数。此处之所以需要多传两个参数是因为，<code>branch_name</code>是我们本地创建的分支，服务器上没有该分支，且本地Git也并不知道本地<code>branch_name</code>与远程的哪个分支对应。所以需要显式传参。<br>同时我们可以告诉Git，本地与远程如何对应，在第一次推送代码时执行：<code>git push -u origin branch_name</code> 或<code>git push --set-upstream origin branch_name</code>，会告诉Git，本地<code>branch_name</code>分支与<code>origin/branch_name</code>对应，之后就可以直接执行<code>git pussh</code>, 而无需显式传参。</li>
</ol>
<h2 id="bash通配符"><a href="#bash通配符" class="headerlink" title="bash通配符"></a>bash通配符</h2><p>?表示单个字符，*表示任意个字符，[abc]表示匹配abc中任意一个字符，{a,b,c}表示匹配a或b或c</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ls [ab].txt</span><br><span class="line">a.txt b.txt</span><br><span class="line"></span><br><span class="line">$ ls *[ab].txt</span><br><span class="line">ab.txt a.txt b.txt</span><br><span class="line"></span><br><span class="line">$ echo d&#123;a,e,i,u,o&#125;g</span><br><span class="line">dag deg dig dug dog</span><br></pre></td></tr></table></figure>



<h2 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h2><p>hello.c -预处理 -E-&gt; hello.i -编译 -S-&gt; hello.s -汇编 -c-&gt; hello.o -链接 -&gt; hello</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gcc  main.cpp hello.cpp factorial.cpp -o hello</span><br></pre></td></tr></table></figure>

<p>使用gcc 将多个文件 <strong>生成</strong> 为 hello可执行文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	gcc test.c</span><br><span class="line">	将 test.c 预处理、编译、汇编并链接形成可执行文件。这里未指定输出文件，默认输出为 a.out。</span><br><span class="line"></span><br><span class="line">-o：指定生成的输出文件；</span><br><span class="line">	gcc test.c -o test</span><br><span class="line">	将 test.c 预处理、编译、汇编并链接形成可执行文件 test。-o 选项用来指定输出文件的文件名。</span><br><span class="line">	</span><br><span class="line">-E：仅执行编译预处理；</span><br><span class="line">	gcc -E test.c -o test.i</span><br><span class="line">	将 test.c 预处理输出 test.i 文件。</span><br><span class="line"></span><br><span class="line">-S：将C代码转换为汇编代码；</span><br><span class="line">	gcc -S test.i</span><br><span class="line">	将预处理输出文件 test.i 汇编成 test.s 文件。</span><br><span class="line"></span><br><span class="line">-wall：显示警告信息；</span><br><span class="line"></span><br><span class="line">-c：仅执行编译操作，不进行连接操作。</span><br><span class="line">	gcc -c test.s</span><br><span class="line">	将汇编输出文件 test.s 编译输出 test.o 文件。</span><br><span class="line"></span><br><span class="line">-l：用来指定程序要链接的库，-l参数紧接着就是库名</span><br><span class="line"></span><br><span class="line">-I：寻找头文件的目录</span><br></pre></td></tr></table></figure>



<h2 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make main</span><br><span class="line">make -f config.txt //指定makefile文件</span><br><span class="line">make --file=config.txt</span><br></pre></td></tr></table></figure>

<p>使用Make指令执行Makefile文件(make指令自动寻找当前文件夹下的Makefile文件)</p>
<p>Makefile文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;target&gt; : &lt;prerequisites&gt;	//目标，前置条件</span><br><span class="line">[tab] &lt;commands&gt;	//命令</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.PHONY: clean	//声明目标clean为伪目标</span><br><span class="line">clean:</span><br><span class="line">    rm -rf *.o</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//一个简单的实例</span><br><span class="line">main:main.o fun0.o fun1.o fun2.0	</span><br><span class="line">	gcc -o main main.o fun0.o fun1.o fun2.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//一个复杂的实例</span><br><span class="line"># Define required macros here</span><br><span class="line">SHELL = /bin/sh		//宏定义</span><br><span class="line">OBJS =  main.o factorial.o hello.o</span><br><span class="line">CFLAG = -Wall -g</span><br><span class="line">CC = gcc</span><br><span class="line">INCLUDE =</span><br><span class="line">LIBS = -lm</span><br><span class="line">hello:$&#123;OBJ&#125;	//$&#123;&#125;表示变量</span><br><span class="line">   $&#123;CC&#125; $&#123;CFLAGS&#125; $&#123;INCLUDES&#125; -o $@ $&#123;OBJS&#125; $&#123;LIBS&#125;</span><br><span class="line">clean:</span><br><span class="line">   -rm -f *.o core *.core	//类似于bash,?表示单个字符，*表示任意个字符，[abc]表示匹配abc中任意个字符，&#123;a,b,c&#125;表示匹配a或b或c</span><br><span class="line">.cpp.o:</span><br><span class="line">   $&#123;CC&#125; $&#123;CFLAGS&#125; $&#123;INCLUDES&#125; -c</span><br></pre></td></tr></table></figure>

<p>冒号左侧：目标文件</p>
<p>冒号右侧：被依赖文件，前置条件</p>
<p>前置条件决定 “目标” 是否需要重新构建。只要前置条件中列出的文件中，有任何一个文件被更新（即前置条件列出的文件的最后修改时间比目标的最后修改时间新），或者 “目标” 不存在，那 “目标” 就需要重新构建。</p>
<p>如果前置条件中列出的文件中有任何一个文件不存在，那么 Make 就需要在 Makefile 文件中寻找并执行能够生成该文件的规则，也就是说缺失文件本身也是一个 “目标”，需要先将该 “目标” 构建出来才能利用它去构建当前 “目标”（构建 A 时发现 A 需要依赖 B，所以要先构建 B 才能继续构建 A，简称递归生成依赖）。</p>
<p><code>$@</code>，<code>$^</code>，<code>$&lt;</code> 这种符号，这种符号称为自动变量。自动变量是局部变量，作用域范围在当前的规则内（即自动化变量只应该出现在 Makefile 目标规则中）</p>
<p><code>$@</code> 指代当前目标， Make 命令意图构建的目标</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello: hello.o</span><br><span class="line">    gcc hello.o -o $@	//$@为hello</span><br></pre></td></tr></table></figure>

<p><code>$&lt;</code> 指代第一个前置条件。比如规则为 hello: a b，那么 <code>$&lt;</code> 就指代 a。</p>
<p><code>$^</code> 指代所有前置条件，之间以空格分隔。比如，规则为 hello: a b，那么 <code>$^</code> 就指代 a 和 b。</p>
]]></content>
      <tags>
        <tag>command</tag>
      </tags>
  </entry>
  <entry>
    <title>pic_test</title>
    <url>/2024/04/12/pic-test/</url>
    <content><![CDATA[<p>图片插入测试：</p>
<img src="/2024/04/12/pic-test/img.png" class="">]]></content>
  </entry>
  <entry>
    <title>第一篇博客</title>
    <url>/2024/04/11/first_post/</url>
    <content><![CDATA[<p>写一个测试试一下</p>
<p>数学公式测试：$r_n&#x3D;W_n\log_2\left(1+\frac{P_nd_n^{-\beta}h_n^2}{N_0+I_n}\right)$</p>
<p>$$t_n^{loc}&#x3D;\frac{(1-\rho_n)C_n}{f_n}$$</p>
]]></content>
  </entry>
  <entry>
    <title>Algo Learning Record</title>
    <url>/2024/04/25/Algo-Learning-Record/</url>
    <content><![CDATA[<p>算法相关学习记录</p>
<span id="more"></span>



<h1 id="らくがき-about-Algorithm"><a href="#らくがき-about-Algorithm" class="headerlink" title="らくがき about Algorithm"></a>らくがき about Algorithm</h1><h2 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h2><h3 id="DP问题分析"><a href="#DP问题分析" class="headerlink" title="DP问题分析"></a>DP问题分析</h3><p>递归&amp;动态规划</p>
<img src="/2024/04/25/Algo-Learning-Record/IMG_0091.PNG" class="" title="IMG_0091(20240425-192828)">

<p>递归会重复进入状态，DP不会</p>
<p>递归一个起点，多个终点；</p>
<p>DP多个起点，一个终点；</p>
<p>DP核心：</p>
<p>1.确定状态和动作</p>
<p>2.确定起点和终点</p>
<h3 id="无权图两点间路径数"><a href="#无权图两点间路径数" class="headerlink" title="无权图两点间路径数"></a>无权图两点间<strong>路径数</strong></h3><p>递归思路：</p>
<p>1.从终点出发，存在多个选择，每个选择为分支，<strong>传入递归函数</strong>并进入；取得递归结果相加。</p>
<p>2.对于每一个中间态，存在多个选择，<strong>传入递归函数</strong>并进入；</p>
<p>3.到达起点，当前递归结束，返回；</p>
<p>DP思路：</p>
<p>1.从起点出发，到达所有<strong>邻接点</strong>的走法已知；</p>
<p>2.到达<strong>次邻接点</strong>的走法为从<strong>邻接点</strong>到<strong>次邻接点</strong>的走法之和；</p>
<p>3.到达终点的走法为从<strong>终点邻接点</strong>到终点的走法之和；</p>
<p>实例：</p>
<img src="/2024/04/25/Algo-Learning-Record/image-20240426101614103.png" class="" title="image-20240426101614103">

<p>递归</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pathsCount</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="comment">//到达起点</span></span><br><span class="line">    <span class="keyword">if</span>(m == <span class="number">1</span> || n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//从终点前进</span></span><br><span class="line">    <span class="keyword">return</span> pathsCount(m - <span class="number">1</span>, n) + pathsCount(m , n -<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DP</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pathsCounts</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//初始化起点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span> || j == <span class="number">0</span>) &#123;</span><br><span class="line">                dp[i][j] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//从起点前进</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            dp[i][j] = dp[i-<span class="number">1</span>][j] + dp[i][j-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//到达终点</span></span><br><span class="line">    <span class="keyword">return</span> dp[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="有权图两点间最大路径"><a href="#有权图两点间最大路径" class="headerlink" title="有权图两点间最大路径"></a>有权图两点间<strong>最大路径</strong></h3><p>递归思路：</p>
<p>1.从终点出发，存在多个选择，每个选择为分支，<strong>传入递归函数</strong>并进入；取得递归结果取最大。</p>
<p>2.对于每一个中间态，存在多个选择，<strong>传入递归函数</strong>并进入；</p>
<p>3.到达起点，当前递归结束，返回当前节点值；</p>
<p>DP思路：</p>
<p>1.从起点出发，到达所有<strong>邻接点</strong>的距离可知；</p>
<p>2.到达<strong>次邻接点</strong>的最大距离为从<strong>邻接点</strong>到<strong>次邻接点</strong>的最大距离；</p>
<p>3.到达终点的走法为从<strong>终点邻接点</strong>到终点的最大距离；</p>
<p>实例：</p>
<img src="/2024/04/25/Algo-Learning-Record/image-20240426102031155.png" class="" title="image-20240426102031155">

<p>递归</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minPathSum</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line">    <span class="comment">//从终点前进</span></span><br><span class="line">    <span class="keyword">return</span> getMin(grid, m-<span class="number">1</span>, n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getMin</span><span class="params">(<span class="type">int</span>[][] grid, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="comment">//到达起点</span></span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> grid[i][j] + getMin(grid, i, j-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> grid[i][j] + getMin(grid, i-<span class="number">1</span>, j);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">minRow</span> <span class="operator">=</span> getMin(grid, i-<span class="number">1</span>, j);</span><br><span class="line">    <span class="type">int</span> <span class="variable">minColumn</span> <span class="operator">=</span> getMin(grid, i, j-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> grid[i][j] + Math.min(minRow, minColumn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DP</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minPathSum</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//初始化起点</span></span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m ;i++) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = dp[i-<span class="number">1</span>][<span class="number">0</span>] + grid[i][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n;i++) &#123;</span><br><span class="line">        dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i-<span class="number">1</span>] + grid[<span class="number">0</span>][i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从起点前进</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            dp[i][j] = grid[i][j] + Math.min(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//到达终点</span></span><br><span class="line">    <span class="keyword">return</span> dp[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-learning-record</title>
    <url>/2024/07/14/Android-learning-record/</url>
    <content><![CDATA[<p>Android学习记录</p>
<span id="more"></span>



<h1 id="Android-Learning-Record"><a href="#Android-Learning-Record" class="headerlink" title="Android Learning Record"></a>Android Learning Record</h1><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[访问修饰符] [非访问修饰符] 数据类型 变量名 [= 初始值];</span><br><span class="line"></span><br><span class="line">[访问修饰符] [非访问修饰符] 返回值类型 方法名(参数列表) [<span class="keyword">throws</span> 异常列表] &#123;</span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>访问修饰符 (可选):</strong></p>
<ul>
<li>public：任何地方都可以访问。</li>
<li>protected：同一个包内和子类可以访问。</li>
<li>private：只有同一个类内可以访问。</li>
<li>默认 (不写)：同一个包内可以访问。</li>
</ul>
<p><strong>非访问修饰符 (可选):</strong></p>
<ul>
<li>static：静态变量，属于类本身。</li>
<li>final：常量，值一旦初始化后不可改变。</li>
<li>transient：序列化时忽略该字段。</li>
<li>volatile：保证多线程环境下变量的可见性。</li>
<li>native：</li>
</ul>
<h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><p><strong>类静态变量</strong>：</p>
<p><strong>类静态方法</strong>：</p>
<p><strong>静态代码块</strong>：静态代码块在类加载时执行，仅执行一次，多用于初始化静态变量，加载配置文件，初始化资源</p>
<p><strong>静态类</strong>：</p>
<p><strong>声明位置:</strong> 静态类只能在另一个类的内部进行声明，使用 static 关键字修饰。</p>
<p><strong>与外部类的关系:</strong></p>
<ul>
<li>静态类不持有对其外部类实例的引用。</li>
<li>静态类的实例化不需要依赖外部类的实例，可以直接通过 OuterClass.StaticNestedClass 的方式创建。</li>
</ul>
<h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>对于com.example.project</p>
<p>其中， <code>com</code> 是顶层包, <code>example</code> 是 <code>com</code> 包的子包, <code>project</code> 是 <code>com.example</code> 包的子包。</p>
<p>在文件系统中，存在以下的层次结构：</p>
<p>com&#x2F;<br>    example&#x2F;<br>        project&#x2F;<br>            MyClass.java </p>
<h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2>.JPG)

<p><strong>Method Area (方法区):</strong></p>
<p><strong>Heap (堆):</strong></p>
<p><strong>Thread Stack (线程栈):</strong></p>
<h2 id="Android程序"><a href="#Android程序" class="headerlink" title="Android程序"></a>Android程序</h2><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><h3 id="context"><a href="#context" class="headerlink" title="context"></a>context</h3><ul>
<li><strong>资源访问:</strong> 获取字符串、颜色、尺寸、图片等资源。</li>
<li><strong>组件启动:</strong> 启动 Activity、Service、BroadcastReceiver 等组件。</li>
<li><strong>系统服务获取:</strong> 获取布局服务 (LayoutInflater)、包管理器 (PackageManager)、通知服务 (NotificationManager) 等系统服务。</li>
<li><strong>文件操作:</strong> 访问设备存储、缓存目录等。</li>
<li><strong>数据库操作:</strong> 使用 SQLite 数据库。</li>
<li><strong>网络操作:</strong> 发送网络请求。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取字符串资源</span></span><br><span class="line"><span class="type">String</span> <span class="variable">appName</span> <span class="operator">=</span> context.getString(R.string.app_name);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取颜色资源</span></span><br><span class="line"><span class="type">int</span> <span class="variable">primaryColor</span> <span class="operator">=</span> context.getColor(R.color.colorPrimary);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动 Activity</span></span><br><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(context, SecondActivity.class);</span><br><span class="line">context.startActivity(intent);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取布局加载器</span></span><br><span class="line"><span class="type">LayoutInflater</span> <span class="variable">inflater</span> <span class="operator">=</span> LayoutInflater.from(context);</span><br><span class="line"><span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> inflater.inflate(R.layout.my_layout, parent, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取包管理器</span></span><br><span class="line"><span class="type">PackageManager</span> <span class="variable">packageManager</span> <span class="operator">=</span> context.getPackageManager();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取通知服务</span></span><br><span class="line"><span class="type">NotificationManager</span> <span class="variable">notificationManager</span> <span class="operator">=</span> </span><br><span class="line">    (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);</span><br></pre></td></tr></table></figure>



<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><h3 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h3><p>为了解决手动内存管理带来的问题而设计的。它们通过引用计数来跟踪有多少个指针指向同一个对象。</p>
<ul>
<li>当你创建一个指向对象的智能指针时，对象的引用计数加 1。</li>
<li>当智能指针超出作用域或被赋值为其他值时，引用计数减 1。</li>
<li>当引用计数变为 0 时，智能指针会自动销毁对象，释放内存。</li>
</ul>
<p><strong>循环引用问题</strong>： 对象A中存在智能指针指向对象B，对象B中存在智能指针指向对象A；</p>
<p>由于智能指针的引用计数始终不为0，对象A和对象B将始终不能被释放。</p>
<p><strong>解决方案</strong>：使用弱引用；对某对象使用弱引用将不增加引用计数。</p>
<h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><p>JVM负责java线程的调度</p>
<h3 id="Android启动"><a href="#Android启动" class="headerlink" title="Android启动"></a>Android启动</h3><p>Android系统启动过程中，会先启动linux内核，然后加载init.rc文件，启动init进程。然后，init进程通过解析init.rc文件fork生成Zygote进程，该进程也是Android系统的首个Java进程。之后Zygote进程负责孵化System Server进程和APP进程。</p>
<img src="/2024/07/14/Android-learning-record/image-20240714103234291.png" class="" title="image-20240714103234291">

<h4 id="Zygote进程"><a href="#Zygote进程" class="headerlink" title="Zygote进程"></a>Zygote进程</h4><h4 id="SystemServer进程"><a href="#SystemServer进程" class="headerlink" title="SystemServer进程"></a>SystemServer进程</h4><ul>
<li>由Zygote进程fork生成，SystemServer是Zygote孵化的第一个进程。</li>
<li>负责启动、管理整个Java Framework，系统里面重要的服务都是在这个进程里面开启的，比如ActivityManagerService、PackageManagerService、WindowManagerService。</li>
</ul>
<h4 id="APP进程"><a href="#APP进程" class="headerlink" title="APP进程"></a>APP进程</h4><ul>
<li>Zygote进程在App层中孵化出的第一个进程是Launcher进程，即手机的桌面APP。</li>
<li>Zygote还会孵化出Browser、Email、Phone等APP进程，每个APP至少运行在一个进程上。</li>
<li>所有APP进程都由Zygote进程fork生成。</li>
</ul>
<h2 id="Android系统中进程的交互"><a href="#Android系统中进程的交互" class="headerlink" title="Android系统中进程的交互"></a>Android系统中进程的交互</h2><p>平时我们所熟知的前端（Web\Android\iOS）通过网络与服务器通信是客户端-服务端模式的体现，而在Android Framework中，四大组件的创建、生命周期也是通过这样的模式进行通信：</p>
<ul>
<li>服务器端(server)指的就是SystemServer进程，这个进程提供了很多服务，比如AMS、PMS、WMS等等，所有的APP进程都可以与其通信。</li>
<li>客户端(client)指的就是各个独立的APP进程。</li>
</ul>
<p>Android开发中，我们可以通过Package包名和Activity类名，来打开一个APP。实际上，项目里的业务代码startActivity()方法并不是直接创建进程、拉起APP的。而是通过一系列的调用，把请求传递给SystemServer的AMS。AMS收到来自客户端的请求后，再通知zygote进程来fork一个新进程，来开启我们的目标APP。APP中所有Activity的生命周期过程，都由AMS（SystemServer进程）统一调度，并在APP自身进程中具体完成。</p>
<p>这个过程涉及到3个进程：APP进程、SystemServer进程、Zygote进程。</p>
<ul>
<li>APP进程与SystemServer进程通过Binder机制，进行跨进程通信。</li>
<li>SystemServer进程与Zygote进程通过Socket，进行跨进程通信。</li>
</ul>
<img src="/2024/07/14/Android-learning-record/image-20240723153011448.png" class="" title="image-20240723153011448">



<h3 id="Binder"><a href="#Binder" class="headerlink" title="Binder"></a>Binder</h3><p>进程使用Binder与System_Server通信，例如：AlarmManagerService、BluetoothService 和 BatteryService，</p>
<img src="/2024/07/14/Android-learning-record/image-20240721154206067.png" class="" title="image-20240721154206067">

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> &#123;</span></span><br><span class="line">	<span class="comment">// 存储所有binder_proc的链表</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> <span class="title">proc_node</span>;</span></span><br><span class="line">	<span class="comment">// binder_thread红黑树</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span> <span class="title">threads</span>;</span></span><br><span class="line">	<span class="comment">// binder_proc进程内的binder实体组成的红黑树</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span> <span class="title">nodes</span>;</span></span><br><span class="line">	......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 驱动函数映射</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">binder_fops</span> =</span> &#123;</span><br><span class="line">	.owner = THIS_MODULE,</span><br><span class="line">	.poll = binder_poll,</span><br><span class="line">	.unlocked_ioctl = binder_ioctl,</span><br><span class="line">	.compat_ioctl = binder_ioctl,</span><br><span class="line">	.mmap = binder_mmap,</span><br><span class="line">	.open = binder_open,</span><br><span class="line">	.flush = binder_flush,</span><br><span class="line">	.release = binder_release,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册驱动参数结构体</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">miscdevice</span> <span class="title">binder_miscdev</span> =</span> &#123;</span><br><span class="line">	.minor = MISC_DYNAMIC_MINOR,</span><br><span class="line">    <span class="comment">// 驱动名称</span></span><br><span class="line">	.name = <span class="string">&quot;binder&quot;</span>,</span><br><span class="line">	.fops = &amp;binder_fops</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">binder_open</span><span class="params">(<span class="keyword">struct</span> inode *nodp, <span class="keyword">struct</span> file *filp)</span>&#123;......&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">binder_mmap</span><span class="params">(<span class="keyword">struct</span> file *filp, <span class="keyword">struct</span> vm_area_struct *vma)</span>&#123;......&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">binder_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="comment">// 创建名为binder的单线程的工作队列</span></span><br><span class="line">    binder_deferred_workqueue = create_singlethread_workqueue(<span class="string">&quot;binder&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!binder_deferred_workqueue)</span><br><span class="line">            <span class="keyword">return</span> -ENOMEM;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">// 注册驱动，misc设备其实也就是特殊的字符设备</span></span><br><span class="line">    ret = misc_register(&amp;binder_miscdev);</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 驱动注册函数</span></span><br><span class="line">device_initcall(binder_init);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>接收端进程开启一个专门的线程，通过系统调用在binder驱动（内核）中先注册此进程（创建保存一个bidner_proc），驱动为接收端进程创建一个任务队列（biner_proc.todo）</p>
</li>
<li><p>接收端线程开始无限循环，通过系统调用不停访问binder驱动，如果该进程对应的任务队列有任务则返回处理，否则阻塞该线程直到有新任务入队</p>
</li>
<li><p>发送端也通过系统调用访问，找到目标进程，将任务丢到目标进程的队列中，然后唤醒目标进程中休眠的线程处理该任务，即完成通讯</p>
</li>
</ul>
<p>作者：北野青阳<br>链接：<a href="https://juejin.cn/post/6987595923543031821">https://juejin.cn/post/6987595923543031821</a></p>
<h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3><img src="/2024/07/14/Android-learning-record/image-20240721155920403.png" class="" title="image-20240721155920403">]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>pytorch_learning_record</title>
    <url>/2024/05/08/pytorch-learning-record/</url>
    <content><![CDATA[<p>dqn与pytorch</p>
<span id="more"></span>

<h1 id="pytorch-learning-record"><a href="#pytorch-learning-record" class="headerlink" title="pytorch_learning_record"></a>pytorch_learning_record</h1><h2 id="Tensor"><a href="#Tensor" class="headerlink" title="Tensor"></a>Tensor</h2><p>附带额外属性的标量，二维数组，多维数组…</p>
<p>主要属性</p>
<ul>
<li><p>T: dimensions reversed</p>
</li>
<li><p>H: 共轭转置</p>
</li>
<li><p>data: 值</p>
</li>
<li><p>grad_fn: 创建该Tensor所使用的函数，在子节点标记为requires_grad时存在</p>
</li>
<li><p>requires_grad: 该Tensor是否需要梯度，生成该Tensor的子节点若为true，该节点同为true</p>
</li>
<li><p>is_leaf: 指示是否叶子节点</p>
</li>
<li><p>dtype: 张量的数据类型，如 torch.FloatTensor，torch.cuda.FloatTensor</p>
</li>
<li><p>shape: 张量的形状。如 (64, 3, 224, 224)</p>
</li>
<li><p>device: 张量所在设备 (CPU&#x2F;GPU)</p>
</li>
<li><p>grad: 张量的梯度，该属性在进行backforward后被填充，非叶节点默认为None。节点的grad属性值在每次backward后进行值的追加</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.tensor(data, dtype=<span class="literal">None</span>, device=<span class="literal">None</span>, requires_grad=<span class="literal">False</span>, pin_memory=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">t= torch.tensor(arr)</span><br><span class="line"></span><br><span class="line">a = torch.tensor([<span class="number">1.</span>], requires_grad=<span class="literal">True</span>)  <span class="comment"># 1.的原因是Only Tensors of floating point and complex dtype can require gradients</span></span><br></pre></td></tr></table></figure>



<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>Add代表加法；</p>
<p>Sub代表减法；</p>
<p>Mul代表乘法；</p>
<p>Mm代表矩阵乘法；</p>
<p>Div代表除法；</p>
<p>T代表矩阵转置；</p>
<p>Pow代表乘方；</p>
<p>Squeeze, Unsqueeze, Relu, Sigmoid？</p>
<h2 id="计算图"><a href="#计算图" class="headerlink" title="计算图"></a>计算图</h2><p>pytorch为动态图计算机制，在每一次反向传播计算梯度的循环内，pytorch先建立正向计算图，然后使用反向传播计算梯度，同时被销毁计算图</p>
<p>自动求导机制中只保存叶子节点的grad，中间tensor即使是requires_grad &#x3D; True在计算完成梯度后会自动释放以节省空间，不会保存，即在进行backward后 中间tensor.grad &#x3D; None</p>
<p>y &#x3D; (x + w) * (w + 1)</p>
<p>a &#x3D; x+w</p>
<p>b &#x3D; w + 1</p>
<img src="/2024/05/08/pytorch-learning-record/image-20240508155001152.png" class="" title="image-20240508155001152">



<p>通常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">w = torch.tensor([<span class="number">1.</span>], requires_grad=<span class="literal">True</span>)</span><br><span class="line">x = torch.tensor([<span class="number">2.</span>], requires_grad=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># y=(x+w)*(w+1)</span></span><br><span class="line">a = torch.add(w, x)</span><br><span class="line">b = torch.add(w, <span class="number">1</span>)</span><br><span class="line">y = torch.mul(a, b)</span><br><span class="line"></span><br><span class="line">y.backward()  <span class="comment"># backward方法默认释放计算图</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(w.grad)</span><br><span class="line"><span class="built_in">print</span>(x.grad)</span><br><span class="line"><span class="built_in">print</span>(a.grad)  <span class="comment"># 非叶子节点的梯度为空，可使用retain_grad()保留</span></span><br><span class="line"><span class="built_in">print</span>(b.grad)  <span class="comment"># 非叶子节点的梯度为空，可使用retain_grad()保留</span></span><br></pre></td></tr></table></figure>



<p>自动梯度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.autograd.grad(outputs,</span><br><span class="line">	inputs,grad_outputs=<span class="literal">None</span>,</span><br><span class="line">	retain_graph=<span class="literal">None</span>,create_graph=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># outputs对inputs求导</span></span><br><span class="line"><span class="comment"># create_graph: 创建计算图</span></span><br><span class="line"><span class="comment"># retain_graph: 保存计算图</span></span><br><span class="line"><span class="comment"># grad_outputs: 多梯度权重</span></span><br><span class="line">	</span><br><span class="line">x = torch.tensor([<span class="number">3.</span>], requires_grad=<span class="literal">True</span>)</span><br><span class="line">y = torch.<span class="built_in">pow</span>(x, <span class="number">2</span>)     <span class="comment"># y = x**2</span></span><br><span class="line"></span><br><span class="line">grad_1 = torch.autograd.grad(y, x, create_graph=<span class="literal">True</span>)   <span class="comment"># grad_1 = dy/dx = 2x = 2 * 3 = 6</span></span><br><span class="line"><span class="built_in">print</span>(grad_1)</span><br><span class="line"></span><br><span class="line">grad_2 = torch.autograd.grad(grad_1[<span class="number">0</span>], x)              <span class="comment"># grad_2 = d(dy/dx)/dx = d(2x)/dx = 2，create_graph=True的作用在此，使grad_1的grad_fn属性存在，可以继续求导</span></span><br><span class="line"><span class="built_in">print</span>(grad_2)</span><br></pre></td></tr></table></figure>



<p>torchviz</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.tensor([<span class="number">1</span>],dtype=torch.float32,requires_grad=<span class="literal">True</span>)</span><br><span class="line">w = torch.tensor([<span class="number">4</span>],dtype=torch.float32,requires_grad=<span class="literal">True</span>)</span><br><span class="line">b = torch.tensor([<span class="number">0.5</span>],dtype=torch.float32,requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">h = w*x + b</span><br><span class="line">graph_forward = make_dot(h)</span><br></pre></td></tr></table></figure>

<p>图中节点的说明（以下由 AI 生成，使用的模型为 ChatGPT ）：</p>
<ul>
<li>AccumulateGrad: 这个节点表示梯度的累积。在反向传播过程中，梯度是被累积的，因为在每一次反向传播调用中，梯度都会被计算并加到之前的梯度上，以便进行梯度下降更新。</li>
<li>TBackward0: 这个节点通常代表Tensor的反向传播操作。当在Tensor上进行某些操作并计算梯度时，这个节点将会出现，表示该Tensor的反向传播。</li>
<li>AddmmBackward0: 这是矩阵乘法操作的反向传播。在神经网络中，矩阵乘法常用于线性层（fully connected layer）的计算，而这个节点则表示反向传播的计算。</li>
<li>ConvolutionBackward0: 这是卷积操作的反向传播。在卷积神经网络中，卷积操作是一种常见的操作，这个节点表示卷积层的反向传播计算。</li>
<li>MaxPool2DWithIndicesBackward0: 这个节点是最大池化操作的反向传播。在最大池化层中，通过取池化窗口中的最大值来减小输入的空间大小，这个节点表示最大池化操作的反向传播。</li>
<li>ReluBackward0: 这是ReLU激活函数的反向传播。ReLU函数是一种常用的非线性激活函数，在深度学习中广泛使用。这个节点表示ReLU函数的反向传播计算。</li>
<li>ReshapeAliasBackward0: 这个节点是reshape操作的反向传播。当对张量进行reshape操作时，这个节点表示reshape操作的反向传播计算。</li>
</ul>
<img src="/2024/05/08/pytorch-learning-record/image-20240508181305285.png" class="" title="image-20240508181305285">



<h2 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Optimizer</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, params, defaults</span>): </span><br><span class="line">        self.defaults = defaults</span><br><span class="line">        self.state = defaultdict(<span class="built_in">dict</span>)</span><br><span class="line">        self.param_groups = []  <span class="comment"># 优化器所管理的参数组</span></span><br><span class="line">        </span><br><span class="line">        self.optimizer = </span><br><span class="line">        </span><br><span class="line">torch.optim.Adam(self.eval_net.parameters(), lr=LR) <span class="comment">#  lr为学习率</span></span><br></pre></td></tr></table></figure>



<p>optimizer.step()</p>
<p>优化器执行一次梯度更新</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">weight = torch.randn((<span class="number">2</span>, <span class="number">2</span>), requires_grad=<span class="literal">True</span>)</span><br><span class="line">weight.grad = torch.ones((<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">optimizer = optim.SGD([weight], lr=<span class="number">0.1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;weight before step:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(weight.data))</span><br><span class="line">optimizer.step()        <span class="comment"># lr为0.1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;weight after step:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(weight.data))</span><br></pre></td></tr></table></figure>

<p>即为weight.data - 0.1 * [[1, 1], [1, 1]]</p>
<p>optimizer.zero_grad()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">zero_grad</span>(<span class="params">self</span>):  <span class="comment"># 循环将所管理的tensor的grad清零</span></span><br><span class="line">    <span class="keyword">for</span> group <span class="keyword">in</span> self.param_groups:</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> group[<span class="string">&#x27;params&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span> p.grad <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                p.grad.detach_()</span><br><span class="line">                p.grad.zero_()</span><br></pre></td></tr></table></figure>





<h2 id="nn-Module"><a href="#nn-Module" class="headerlink" title="nn.Module"></a>nn.Module</h2><p>使用 Pytorch 的 nn.Module 建立网络时，其网络内部参数自动设置为 requires_grad&#x3D;True </p>
<img src="/2024/05/08/pytorch-learning-record/image-20240511103728550.png" class="" title="image-20240511103728550">

<p>而我们使用反向传播时，其实根据全连接层的偏导数计算公式，可知链式求导和 <em>w</em> ，<em>b</em> 的梯度无关，而与其中一个连接层的输出梯度有关，这也是为什么冻结了网络的参数，还是可以输出对输入求导。如下式：</p>
<img src="/2024/05/08/pytorch-learning-record/image-20240511100910357.png" class="" title="image-20240511100910357">



<h2 id="Method-and-Attr"><a href="#Method-and-Attr" class="headerlink" title="Method and Attr"></a>Method and Attr</h2><p>.requires_grad 属性</p>
<p>在pytorch中，tensor有一个requires_grad参数，如果设置为True，则反向传播时，该tensor若为叶节点则其grad值会被写入。</p>
<p> tensor的requires_grad的属性默认为False。</p>
<p>若一个节点requires_grad被设置为True，那么它的所有子节点requires_grad都为True （即使子节点的其他父节点的requires_grad &#x3D; False）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = torch.tensor(<span class="number">5.</span>, requires_grad=<span class="literal">True</span>)  <span class="comment"># grad值为6</span></span><br><span class="line">g = torch.tensor(<span class="number">6.</span>, requires_grad=<span class="literal">False</span>) <span class="comment"># grad值为None</span></span><br><span class="line">r3 = f * g</span><br><span class="line">r3.backward()</span><br></pre></td></tr></table></figure>





<p>.grad_fn 属性</p>
<p>tensor在计算图中的父运算函数</p>
<p>.detach()与.detach_()</p>
<p>[.detach()]: <a href="https://pytorch.org/docs/stable/generated/torch.Tensor.detach.html#torch.Tensor.detach">https://pytorch.org/docs/stable/generated/torch.Tensor.detach.html#torch.Tensor.detach</a>	“Returned Tensor shares the same storage with the original one. In-place modifications on either of them will be seen, and may trigger errors in correctness checks.”</p>
<p><code>.detach_()</code>: is the inplace operation of <code>detach()</code>.</p>
<p>相同：</p>
<p>新tensor的requires_grad为False，grad_fn为None，为<strong>叶节点</strong>；</p>
<p><strong>修改新tensor时原tensor同样发生改变；</strong></p>
<p>不同：</p>
<p>m.detach()后m不发生改变，原m在计算图中的父子关系不改变；</p>
<p>m.detach_()后m发生改变，原m在计算图中和父节点断开，子节点关系不改变;</p>
<p>#与父节点断开不影响梯度传导至叶子节点？？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.tensor(<span class="number">2.</span>, requires_grad=<span class="literal">True</span>)  <span class="comment"># grad = 4</span></span><br><span class="line">b = torch.tensor(<span class="number">4.</span>, requires_grad=<span class="literal">True</span>)  <span class="comment"># grad = 2</span></span><br><span class="line">c = torch.tensor(<span class="number">6.</span>, requires_grad=<span class="literal">True</span>)  <span class="comment"># grad = 1 + 1</span></span><br><span class="line">m = a * b</span><br><span class="line">r1 = m + c</span><br><span class="line"></span><br><span class="line">m_ = m.detach()</span><br><span class="line"><span class="comment"># 执行后仅m_的requires_grad=False</span></span><br><span class="line">m_ = m.detach_()</span><br><span class="line"><span class="comment"># 执行后c和out均为requires_grad=False</span></span><br><span class="line"></span><br><span class="line">r2 = m_ + c</span><br><span class="line">r1.backward()</span><br><span class="line">r2.backward()</span><br></pre></td></tr></table></figure>









<p>torch.no_grad()</p>
<p>是一个上下文管理器，被该语句 wrap 起来的部分将不会track梯度。</p>
<p>with torch.no_grad()所包裹的语句或者@torch.no_grad()所修饰的函数中发生改变或新建的tensor的requires_grad为False</p>
<p>例外：所有factory function，或者创建一个新的tensor时显式指明requires_grad&#x3D;True，都不会受到这种模式的影响。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.tensor([<span class="number">1.</span>], requires_grad=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    y = x * <span class="number">2</span>  <span class="comment"># requires_grad=False</span></span><br><span class="line">    z = torch.tensor([<span class="number">1.</span>], requires_grad=<span class="literal">True</span>) <span class="comment">#   requires_grad=True</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">@torch.no_grad()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">doubler</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span></span><br><span class="line">z = doubler(x)</span><br></pre></td></tr></table></figure>



<p>.backward()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.tensor([<span class="number">1.</span>], requires_grad=<span class="literal">True</span>)</span><br><span class="line">b = torch.tensor([<span class="number">2.</span>], requires_grad=<span class="literal">True</span>)</span><br><span class="line">c = a**<span class="number">2</span></span><br><span class="line">d = b*c</span><br><span class="line">c.backward()  <span class="comment"># c.backward(retain_graph=True)</span></span><br><span class="line">d.backward()</span><br></pre></td></tr></table></figure>

<p>当在调用.backward()或autograd.grad()时，将释放图中保存的中间值。如果需要第二次向后遍历图，或者在调用backward后需要访问保存的张量，则指定retain_graph&#x3D;True。</p>
<p>.backward()方法仅适用于标量</p>
<p>.register_hook()</p>
<p><a href="https://oldpan.me/archives/pytorch-autograd-hook">https://oldpan.me/archives/pytorch-autograd-hook</a></p>
<p>获取中间tensor的grad值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.tensor(<span class="number">1.5</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">b = torch.tensor(<span class="number">2.0</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">c = torch.tensor(<span class="number">3.0</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">m1 = a * b</span><br><span class="line">m1.register_hook(<span class="built_in">print</span>)  <span class="comment"># 控制台输出tensor(1.)</span></span><br><span class="line">r1 = m1 + c</span><br><span class="line">r1.backward()</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>python, pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>reinforce-learning-record</title>
    <url>/2024/06/10/reinforce-learning-record/</url>
    <content><![CDATA[<p>reinforce learning</p>
<span id="more"></span>

<h1 id="reinforce-learning-record"><a href="#reinforce-learning-record" class="headerlink" title="reinforce learning record"></a>reinforce learning record</h1><h2 id="MRP"><a href="#MRP" class="headerlink" title="MRP"></a>MRP</h2><img src="/2024/06/10/reinforce-learning-record/image-20240610205131367.png" class="" title="image-20240610205131367">

<h3 id="回报"><a href="#回报" class="headerlink" title="回报"></a>回报</h3><p>在一个马尔可夫奖励过程中，从第t时刻状态S_t开始，直到终止状态时，所有奖励的衰减之和称为<strong>回报</strong>（Return）</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240610203108806.png" class="" title="image-20240610203108806">

<ul>
<li>Rt表示在时刻t获得的奖励</li>
<li><strong>到达状态Si</strong>，得到奖励r(s)；若在时刻t到达状态Si，则<strong>Rt&#x3D;r(Si)</strong></li>
<li>对于某状态序列<img src="/2024/06/10/reinforce-learning-record/image-20240610203423677.png" class="" title="image-20240610203423677">我们有对应于该状态序列的奖励G<img src="/2024/06/10/reinforce-learning-record/image-20240610203434567.png" class="" title="image-20240610203434567"></li>
</ul>
<h3 id="价值函数"><a href="#价值函数" class="headerlink" title="价值函数"></a>价值函数</h3><p>在马尔可夫奖励过程中，一个状态的期望回报（即从这个状态出发的未来累积奖励的期望）被称为这个状态的<strong>价值</strong>（value）。所有状态的价值就组成了<strong>价值函数</strong>（value function），价值函数的输入为某个状态，输出为这个状态的价值。</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240610203509585.png" class="" title="image-20240610203509585">

<ul>
<li>对于某个状态s，从该状态出发可得到的状态序列有很多条</li>
<li>对于某个状态s，价值函数为<strong>从该状态出发，可能存在的所有状态序列的奖励的均值</strong></li>
</ul>
<p>贝尔曼方程</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240610203841177.png" class="" title="image-20240610203841177">

<h2 id="MDP"><a href="#MDP" class="headerlink" title="MDP"></a>MDP</h2><p>与MRP相比，奖励与状态和动作相关</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240610205112917.png" class="" title="image-20240610205112917">

<h3 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h3><p>策略表示在状态s下采取动作a的<strong>概率</strong>，概率可能为1</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240610204522539.png" class="" title="image-20240610204522539">

<h3 id="状态价值函数"><a href="#状态价值函数" class="headerlink" title="状态价值函数"></a>状态价值函数</h3><p>在 MDP 中基于策略Π的状态价值函数（state-value function），定义为从状态s出发遵循策略Π能获得的期望回报</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240610204014373.png" class="" title="image-20240610204014373">

<h3 id="动作价值函数"><a href="#动作价值函数" class="headerlink" title="动作价值函数"></a>动作价值函数</h3><p>在 MDP 中，由于动作的存在，我们额外定义一个<strong>动作价值函数</strong>（action-value function）。表示在 MDP 遵循策略Π时，对当前状态s执行动作a得到的期望回报</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240610204152914.png" class="" title="image-20240610204152914">

<ul>
<li><strong>采取动作a到达状态s</strong>，得到奖励R</li>
</ul>
<h3 id="状态价值函数与动作价值函数关系"><a href="#状态价值函数与动作价值函数关系" class="headerlink" title="状态价值函数与动作价值函数关系"></a>状态价值函数与动作价值函数关系</h3><img src="/2024/06/10/reinforce-learning-record/image-20240610213003398.png" class="" title="image-20240610213003398">

<ul>
<li>从状态s出发，可能采取动作a1, a2, a3, …;对于每个可能采取的动作，均有动作价值Q，则状态s的状态价值为所有动作价值的期望</li>
</ul>
<img src="/2024/06/10/reinforce-learning-record/image-20240610213050168.png" class="" title="image-20240610213050168">

<ul>
<li>在状态s执行动作a后，得到奖励r(s,a)；由于可能到达多个不同的状态s’，动作价值为即时奖励r(s,a)+可能到达的所有状态的价值的期望</li>
</ul>
<h3 id="最优策略"><a href="#最优策略" class="headerlink" title="最优策略"></a>最优策略</h3><p>策略之间的偏序关系</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240612093758370.png" class="" title="image-20240612093758370">

<p>最优策略为 对于任意的策略，均有最优策略优于或不差于其他策略</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240612093948192.png" class="" title="image-20240612093948192">

<img src="/2024/06/10/reinforce-learning-record/image-20240612093958259.png" class="" title="image-20240612093958259">

<p>最优状态价值与最优动作价值的关系</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240612094048209.png" class="" title="image-20240612094048209">



<h3 id="贝尔曼期望方程"><a href="#贝尔曼期望方程" class="headerlink" title="贝尔曼期望方程"></a>贝尔曼期望方程</h3><p>采取策略Π</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240610204627264.png" class="" title="image-20240610204627264">

<ul>
<li>对于状态s，s的状态价值为 ( 折损的 <strong>所有可达的下一状态的价值的期望</strong> + <strong>到达所有可达的下一状态的r(s’,a)的期望</strong> )</li>
<li>对于状态s和动作a，在状态s进行动作a的价值为 ( <strong>在状态s执行动作a的r(s,a)的期望</strong>(实际上就是r(s,a)) + 折损的 <strong>在执行动作a后所有可达的下一状态的所有可执行动作的价值的期望</strong> )</li>
</ul>
<img src="/2024/06/10/reinforce-learning-record/shiow.PNG" class="" title="shiow">

<p>图中情况为每个动作只会到达一个状态&amp;应该直接将动作视为一个节点，图为树</p>
<h3 id="贝尔曼最优方程"><a href="#贝尔曼最优方程" class="headerlink" title="贝尔曼最优方程"></a>贝尔曼最优方程</h3><p>存在策略*，使对于任意的状态s，均有基于策略*状态价值函数大于基于策略Π的状态价值函数</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240610205402396.png" class="" title="image-20240610205402396">

<ul>
<li>对于状态价值：非最优形式是求期望，最优形式是直接选取当前状态，所有动作中，未来状态序列中价值最大的</li>
<li>对于动作价值：非最优形式是求期望，最优形式是直接选取下一状态，所有动作中，未来状态序列中动作价值最大的</li>
</ul>
<h2 id="策略迭代算法-基于策略函数的"><a href="#策略迭代算法-基于策略函数的" class="headerlink" title="策略迭代算法&#x2F;基于策略函数的"></a>策略迭代算法&#x2F;基于策略函数的</h2><p>策略评估：</p>
<p>基于当前策略Π，在已知状态转移函数的情况下（即我们可以知道采取动作a后有多高的几率到达哪个状态），使用<strong>贝尔曼期望方程</strong>迭代更新状态价值函数</p>
<p>ps: 原文中迭代更新状态价值函数是通过</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240610213050168.png" class="" title="image-20240610213050168">

<img src="/2024/06/10/reinforce-learning-record/image-20240610213003398.png" class="" title="image-20240610213003398">

<p>以上两个公式实现的，也即</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">qsa_list = []</span><br><span class="line">	<span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):  <span class="comment"># 迷宫环境，四相运动</span></span><br><span class="line">		qsa = <span class="number">0</span>  <span class="comment"># 当前动作的动作价值</span></span><br><span class="line">        <span class="keyword">for</span> res <span class="keyword">in</span> self.env.P[s][a]:  <span class="comment"># 有模型，即状态转移函数已知</span></span><br><span class="line">        	p, next_state, r, done = res</span><br><span class="line">            qsa += p * (r + self.gamma * self.v[next_state] * (<span class="number">1</span> - done))  <span class="comment"># 第一个公式，计算该动作的价值(开头的p为动作成功概率)</span></span><br><span class="line">         qsa_list.append(self.pi[s][a] * qsa)  <span class="comment"># 乘采取该动作的几率</span></span><br><span class="line">	new_v[s] = <span class="built_in">sum</span>(qsa_list)  <span class="comment"># 第二个公式，根据所有动作的价值计算状态价值</span></span><br></pre></td></tr></table></figure>

<p>target: 更新<strong>状态价值函数</strong>，使之收敛</p>
<p>策略提升：</p>
<p>由于</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240610213003398.png" class="" title="image-20240610213003398">

<p>故修改策略，使得动作价值最大的动作以更高的概率(若最大值唯一，该动作将成为唯一被选取动作；若不唯一，这些动作将均分概率1)被选取，可使新策略下的状态价值函数增大，也即<img src="/2024/06/10/reinforce-learning-record/image-20240611150030644.png" class="" title="image-20240611150030644"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">qsa_list = []</span><br><span class="line">	<span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):  <span class="comment"># 迷宫环境，四相运动</span></span><br><span class="line">    	qsa = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> res <span class="keyword">in</span> self.env.P[s][a]:</span><br><span class="line">        	p, next_state, r, done = res</span><br><span class="line">            qsa += p * (r + self.gamma * self.v[next_state] * (<span class="number">1</span> - done))</span><br><span class="line">        qsa_list.append(qsa)</span><br><span class="line">     maxq = <span class="built_in">max</span>(qsa_list)</span><br><span class="line">     cntq = qsa_list.count(maxq)  <span class="comment"># 计算有几个动作得到了最大的Q值</span></span><br><span class="line">     <span class="comment"># 让这些动作均分概率</span></span><br><span class="line">     self.pi[s] = [<span class="number">1</span> / cntq <span class="keyword">if</span> q == maxq <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> q <span class="keyword">in</span> qsa_list]</span><br></pre></td></tr></table></figure>

<p>target: 修改<strong>策略</strong>，使在新策略下，有基于新策略的状态价值函数大于原策略的状态价值函数</p>
<h2 id="价值迭代算法-基于价值函数的"><a href="#价值迭代算法-基于价值函数的" class="headerlink" title="价值迭代算法&#x2F;基于价值函数的"></a>价值迭代算法&#x2F;基于价值函数的</h2><p>使用贝尔曼最优方程</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240611191853492.png" class="" title="image-20240611191853492">

<p>迭代形式</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240611152610430.png" class="" title="image-20240611152610430">

<p>进行价值迭代；</p>
<p>使用</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240611152643864.png" class="" title="image-20240611152643864">

<p>从迭代完成的状态价值函数中获取策略，即 从当前状态出发，哪个动作的 (即时奖励+下一状态价值) 最大，策略就为哪个动作</p>
<p>ps: 程序实际使用公式</p>
<p>最优状态价值是选择此时使最优动作价值最大的那一个动作时的状态价值</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240611153610316.png" class="" title="image-20240611153610316">

<img src="/2024/06/10/reinforce-learning-record/image-20240610213050168.png" class="" title="image-20240610213050168">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">max_diff = <span class="number">0</span></span><br><span class="line">new_v = [<span class="number">0</span>] * self.env.ncol * self.env.nrow  <span class="comment"># 迷宫环境，初始化状态价值</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(self.env.ncol * self.env.nrow):</span><br><span class="line">    qsa_list = []</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        qsa = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> res <span class="keyword">in</span> self.env.P[s][a]:</span><br><span class="line">            p, next_state, r, done = res</span><br><span class="line">            qsa += p * (r + self.gamma * self.v[next_state] * (<span class="number">1</span> - done))</span><br><span class="line">        qsa_list.append(qsa)  <span class="comment"># 记录状态s下的所有Q(s,a)价值</span></span><br><span class="line">     new_v[s] = <span class="built_in">max</span>(qsa_list)  <span class="comment"># 取最大作为新状态价值</span></span><br><span class="line">     max_diff = <span class="built_in">max</span>(max_diff, <span class="built_in">abs</span>(new_v[s] - self.v[s]))</span><br><span class="line">self.v = new_v</span><br><span class="line"><span class="keyword">if</span> max_diff &lt; self.theta: <span class="keyword">break</span>  <span class="comment"># 满足收敛条件,退出评估迭代</span></span><br><span class="line">cnt += <span class="number">1</span></span><br></pre></td></tr></table></figure>



<h2 id="有模型-无模型-在线策略-离线策略"><a href="#有模型-无模型-在线策略-离线策略" class="headerlink" title="有模型&amp;无模型+在线策略&amp;离线策略"></a>有模型&amp;无模型+在线策略&amp;离线策略</h2><p><strong>有模型强化学习：</strong></p>
<p>智能体学习环境的状态转移函数</p>
<p>环境的状态转移函数已知</p>
<p>智能体可以直接根据状态转移函数得到在对环境进行动作a后环境的下一状态</p>
<p># 状态转移函数P[state][action] &#x3D; [(p, next_state, reward, done)]包含转移成功概率，下一个状态，奖励和是否完成</p>
<ul>
<li>Dyna-Q</li>
<li>Monte Carlo Tree Search (MCTS)</li>
<li>PILCO (Probabilistic Inference for Learning Control)</li>
</ul>
<p><strong>无模型强化学习：</strong></p>
<p>智能体通过与环境交互学习状态和奖励之间的映射关系</p>
<p>环境的状态转移函数未知</p>
<p>智能体必须通过与环境的交互才能得到环境的下一状态</p>
<ul>
<li>Q-learning</li>
<li>SARSA</li>
<li>Deep Q-Network (DQN)</li>
<li>Policy Gradient methods (e.g., REINFORCE, A2C, PPO)</li>
</ul>
<p>样本：当前状态，下一状态，采取动作，奖励</p>
<p><strong>在线策略学习：</strong></p>
<p>不保存样本</p>
<p><strong>离线策略学习：</strong></p>
<p>使用经验回放池保存样本</p>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="蒙特卡洛方法"><a href="#蒙特卡洛方法" class="headerlink" title="蒙特卡洛方法"></a>蒙特卡洛方法</h3><p>Value-based + online</p>
<p>从某状态s出发，基于策略Π，获得一条状态序列，该状态序列对应一个回报G；该过程为一次采样。</p>
<p>反复采样，得到N个状态序列+回报和M，由大数定律，可得该状态的状态价值</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240611161858965.png" class="" title="image-20240611161858965">

<p>使用增量更新方法</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240611161157050.png" class="" title="image-20240611161157050">

<p>补：增量更新原理</p>
<p>新均值 &#x3D; 旧均值 + 1&#x2F;总量 * (新值 - 旧均值) ？</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240611161942958.png" class="" title="image-20240611161942958">

<h3 id="时序差分算法"><a href="#时序差分算法" class="headerlink" title="时序差分算法"></a>时序差分算法</h3><p>Value-based + online</p>
<p>类似于蒙特卡洛，更新状态s的状态价值时，不使用完整的状态序列，在得到下一状态时立即对状态s的状态价值进行更新</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240611162513650.png" class="" title="image-20240611162513650">

<p>蒙特卡洛使用第三行对状态价值进行更新，时序差分使用第四行对状态价值进行更新</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240611162624769.png" class="" title="image-20240611162624769">

<ul>
<li>只向前走了一步的蒙特卡洛</li>
<li>使用下一状态的状态价值代替了很长的状态序列的回报(状态价值本身就是所有未来时刻的回报期望和)</li>
<li>增量更新体现在 减号前部分为 (新 状态s的状态价值)，减号后部分为 (旧 状态s的状态价值)</li>
</ul>
<h3 id="Sarsa算法"><a href="#Sarsa算法" class="headerlink" title="Sarsa算法"></a>Sarsa算法</h3><p>Value-based + online</p>
<p>类似于时序差分算法，对动作价值进行更新，目标是估计 <strong>ε-greedy策略的动作价值函数</strong></p>
<img src="/2024/06/10/reinforce-learning-record/image-20240611191221769.png" class="" title="image-20240611191221769">

<p>算法</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240612100452913.png" class="" title="image-20240612100452913">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">td_error = r + self.gamma * self.Q_table[s1, a1] - self.Q_table[s0, a0]</span><br><span class="line">self.Q_table[s0, a0] += self.alpha * td_error</span><br></pre></td></tr></table></figure>



<h3 id="Q-learning算法"><a href="#Q-learning算法" class="headerlink" title="Q-learning算法"></a>Q-learning算法</h3><p>Value-based + offline</p>
<p>对动作价值进行更新，目标是估计 <strong>最优策略的动作价值函数</strong></p>
<img src="/2024/06/10/reinforce-learning-record/image-20240611194333945.png" class="" title="image-20240611194333945">

<p>算法</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240612100509915.png" class="" title="image-20240612100509915">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">td_error = r + self.gamma * self.Q_table[s1].max() - self.Q_table[s0, a0]</span><br><span class="line">self.Q_table[s0, a0] += self.alpha * td_error</span><br></pre></td></tr></table></figure>



<h3 id="DQN-DDQN"><a href="#DQN-DDQN" class="headerlink" title="DQN&#x2F;DDQN"></a>DQN&#x2F;DDQN</h3><p>Value-based + offline</p>
<p>将Q-learning的Q表换成net</p>
<h3 id="策略梯度算法-REINFORCE"><a href="#策略梯度算法-REINFORCE" class="headerlink" title="策略梯度算法(REINFORCE)"></a>策略梯度算法(REINFORCE)</h3><p>Policy-based + online</p>
<p>定义策略学习的目标函数为，s0为初始状态</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240612100629893.png" class="" title="image-20240612100629893">

<p>目标是修改参数θ，使J(θ)取最大；即对θ求导</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240610213003398.png" class="" title="image-20240610213003398">

<img src="/2024/06/10/reinforce-learning-record/image-20240612100732404.png" class="" title="image-20240612100732404">

<p>where 第一行第一个求和符号后的对象为 策略的<strong>状态访问分布</strong></p>
<img src="/2024/06/10/reinforce-learning-record/image-20240612102026769.png" class="" title="image-20240612102026769">

<p>策略的状态访问分布表示该策略和在环境中会访问到的状态的分布情况(即到达每个状态的概率)</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240612102256431.png" class="" title="image-20240612102256431">

<p>故该求导表示 对于每个状态，我们有一定的概率在该状态，从该状态出发，策略决定了我们能获得的价值的期望</p>
<p>算法</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240611200059062.png" class="" title="image-20240611200059062">

<p>时刻t向后的回报即为(动作)价值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">reward_list = transition_dict[<span class="string">&#x27;rewards&#x27;</span>]</span><br><span class="line">state_list = transition_dict[<span class="string">&#x27;states&#x27;</span>]</span><br><span class="line">action_list = transition_dict[<span class="string">&#x27;actions&#x27;</span>]</span><br><span class="line"></span><br><span class="line">G = <span class="number">0</span></span><br><span class="line">self.optimizer.zero_grad()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(reward_list))):  <span class="comment"># 从最后一步算起</span></span><br><span class="line">    reward = reward_list[i]  <span class="comment"># 取时间步i获得的奖励</span></span><br><span class="line">    state = torch.tensor([state_list[i]],</span><br><span class="line">                         dtype=torch.<span class="built_in">float</span>).to(self.device)  <span class="comment"># 取时间步i的状态</span></span><br><span class="line">    action = torch.tensor([action_list[i]]).view(-<span class="number">1</span>, <span class="number">1</span>).to(self.device)  <span class="comment"># 取时间步i的动作</span></span><br><span class="line">    log_prob = torch.log(self.policy_net(state).gather(<span class="number">1</span>, action))</span><br><span class="line">    <span class="comment"># self.policy_net(state)： 将状态输入策略网络，得到所有可能动作的概率分布。</span></span><br><span class="line">	<span class="comment"># .gather(1, action): 从概率分布中选取实际执行动作对应的概率值。</span></span><br><span class="line">	<span class="comment"># torch.log(...): 对选取的概率值取对数，得到对数概率</span></span><br><span class="line">    G = self.gamma * G + reward  <span class="comment"># G累计了从当前时间步i到episode结束的所有奖励</span></span><br><span class="line">    loss = -log_prob * G  <span class="comment"># loss对应公式中符号α后的部分</span></span><br><span class="line">    loss.backward()  <span class="comment"># 反向传播计算梯度</span></span><br><span class="line">self.optimizer.step()  <span class="comment"># 梯度下降，实际上是对策略进行求导</span></span><br></pre></td></tr></table></figure>



<h3 id="Actor-Critic"><a href="#Actor-Critic" class="headerlink" title="Actor-Critic"></a>Actor-Critic</h3><p>(Value + Policy)-based + offline</p>
<p>策略函数梯度</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240612110026419.png" class="" title="image-20240612110026419">

<p>ψ_t可为不同值，表示不同的方法</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240612110241521.png" class="" title="image-20240612110241521">



<p>价值函数的损失函数与梯度</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240612110951796.png" class="" title="image-20240612110951796">

<img src="/2024/06/10/reinforce-learning-record/image-20240612111022161.png" class="" title="image-20240612111022161">



<p>Actor（策略网络）和 Critic（价值网络）</p>
<ul>
<li><p>Actor 要做的是与环境交互，并在 Critic 价值函数的指导下用策略梯度学习一个更好的策略。</p>
</li>
<li><p>Critic 要做的是通过 Actor 与环境交互收集的数据学习一个价值函数，这个价值函数会用于判断在当前状态什么动作是好的，什么动作不是好的，进而帮助 Actor 进行策略更新。</p>
</li>
</ul>
<p>基于<strong>时序差分(TD)<strong>方法的</strong>Actor-Critic</strong>算法</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240612110750284.png" class="" title="image-20240612110750284">

<p>价值网络使用时序差分(TD)更新，策略网络使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">states = torch.tensor(transition_dict[<span class="string">&#x27;states&#x27;</span>],</span><br><span class="line">                              dtype=torch.<span class="built_in">float</span>).to(self.device)</span><br><span class="line">actions = torch.tensor(transition_dict[<span class="string">&#x27;actions&#x27;</span>]).view(-<span class="number">1</span>, <span class="number">1</span>).to(</span><br><span class="line">            self.device)</span><br><span class="line">rewards = torch.tensor(transition_dict[<span class="string">&#x27;rewards&#x27;</span>],</span><br><span class="line">                               dtype=torch.<span class="built_in">float</span>).view(-<span class="number">1</span>, <span class="number">1</span>).to(self.device)</span><br><span class="line">next_states = torch.tensor(transition_dict[<span class="string">&#x27;next_states&#x27;</span>],</span><br><span class="line">                                   dtype=torch.<span class="built_in">float</span>).to(self.device)</span><br><span class="line">dones = torch.tensor(transition_dict[<span class="string">&#x27;dones&#x27;</span>],</span><br><span class="line">                             dtype=torch.<span class="built_in">float</span>).view(-<span class="number">1</span>, <span class="number">1</span>).to(self.device)</span><br><span class="line"><span class="comment"># 当前状态，动作、奖励、下一个状态和结束标志</span></span><br><span class="line"></span><br><span class="line">td_target = rewards + self.gamma * self.critic(next_states) * (<span class="number">1</span> - dones)</span><br><span class="line"><span class="comment"># 价值网络(critic)</span></span><br><span class="line"><span class="comment"># self.critic(next_states) 使用价值网络(critic)预测下一个状态的价值。</span></span><br><span class="line"><span class="comment"># (1 - dones) 用于处理 episode 结束的情况，如果 dones 为 1 (True)，则表示 episode 结束，此时不需要考虑未来的奖励。</span></span><br><span class="line">td_delta = td_target - self.critic(states)  </span><br><span class="line"><span class="comment"># 计算时序差分误差，即目标值与当前状态价值的差。</span></span><br><span class="line"></span><br><span class="line">log_probs = torch.log(self.actor(states).gather(<span class="number">1</span>, actions))</span><br><span class="line"><span class="comment"># 策略网络(actor)</span></span><br><span class="line"><span class="comment"># self.actor(states) 使用策略网络预测每个动作的概率。</span></span><br><span class="line"><span class="comment"># .gather(1, actions) 从预测的概率分布中选择实际采取的动作对应的概率。torch.log 计算对数概率。</span></span><br><span class="line"></span><br><span class="line">critic_loss = torch.mean(</span><br><span class="line">	F.mse_loss(self.critic(states), td_target.detach()))</span><br><span class="line"><span class="comment"># 计算价值网络的损失函数。(价值网络给出的当前状态价值)和(r+价值网络给出的下一状态的状态价值)的均方误差，即((a-b)^2)/2</span></span><br><span class="line"><span class="comment"># 使用 td_target.detach() 阻止梯度通过 td_target 向策略网络回传。</span></span><br><span class="line">actor_loss = torch.mean(-log_probs * td_delta.detach())</span><br><span class="line"><span class="comment"># 计算策略网络的损失函数。策略函数梯度</span></span><br><span class="line"><span class="comment"># 使用 td_delta.detach() 阻止梯度通过 td_delta 向价值网络回传。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">self.actor_optimizer.zero_grad()</span><br><span class="line">self.critic_optimizer.zero_grad()</span><br><span class="line">actor_loss.backward()  <span class="comment"># 计算策略网络的梯度</span></span><br><span class="line">critic_loss.backward()  <span class="comment"># 计算价值网络的梯度</span></span><br><span class="line">self.actor_optimizer.step()  <span class="comment"># 更新策略网络的参数</span></span><br><span class="line">self.critic_optimizer.step()  <span class="comment"># 更新价值网络的参数</span></span><br></pre></td></tr></table></figure>



<h2 id="强化学习设置小心得"><a href="#强化学习设置小心得" class="headerlink" title="强化学习设置小心得"></a>强化学习设置小心得</h2><p>控制状态空间大小，尽量选择有限状态空间</p>
<p>eg: 将state中的一些值int化</p>
<p>状态空间的表示值尽量接近</p>
<p>采用标准化技术将state内的值均一化</p>
<p>eg: [1, 200, 9999] -&gt; [0.001, 0.99, 0.9999]</p>
<p>reward设置</p>
<p>惩罚和奖励设置插值不要过大, 防止惩罚拟合过快</p>
<p>+2, -200 -&gt; +2, 0</p>
]]></content>
      <tags>
        <tag>python, reinforce learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Op_sys Learning Record</title>
    <url>/2024/04/12/Op-sys-Learning-Record/</url>
    <content><![CDATA[<p>操作系统相关学习记录</p>
<span id="more"></span>



<h1 id="Opsys-learning-record"><a href="#Opsys-learning-record" class="headerlink" title="Opsys_learning_record"></a>Opsys_learning_record</h1><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><p>QEMU：近似模拟硬件SiFiveFU540-C000主板(RISC-V,64 bit register, 56 bit physical memory)</p>
<p>intel 8086：20根地址线，16位寄存器</p>
<h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><p>XV6：操作系统</p>
<p><a href="https://github.com/seaswalker/tiny-os">tiny-os</a></p>
<h2 id="系统启动"><a href="#系统启动" class="headerlink" title="系统启动"></a>系统启动</h2><h3 id="基础信息"><a href="#基础信息" class="headerlink" title="基础信息"></a>基础信息</h3><h4 id="物理地址空间"><a href="#物理地址空间" class="headerlink" title="物理地址空间"></a>物理地址空间</h4><p>20根地址线，16位寄存器，可访问1MB的内存空间</p>
<p>0x00000-0x9FFFF: DRAM</p>
<p>0xF0000-0xFFFFF: ROM，BIOS代码位置</p>
<p>通过段寄存器左移4位+偏移地址</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240413150024273.png" class="" title="image-20240413150024273">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240417110651232.png" class="" title="image-20240417110651232">





<h4 id="SiFive-FU540物理地址空间"><a href="#SiFive-FU540物理地址空间" class="headerlink" title="SiFive FU540物理地址空间"></a>SiFive FU540物理地址空间</h4><p>物理地址0x80000000以前的部分由主板上非DRAM组成（例如：boot ROM，PLIC等）</p>
<p>物理地址对应的硬件（图例为SiFive主板，仅截取部分，物理地址0x80000000以前的部分非DRAM）</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240413150852809.png" class="" title="image-20240413150852809">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240412184947166.png" class="" title="image-20240412184947166">



<h4 id="显存地址空间"><a href="#显存地址空间" class="headerlink" title="显存地址空间"></a>显存地址空间</h4><p>0xB8000-0xBFFFF为显存中字符显示部分，默认模式为80个字符*25行，一个字符2字节表示</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240420184138573.png" class="" title="image-20240420184138573">





<h4 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h4><p>不可见寄存器</p>
<p>GDTR	全局描述符表寄存器</p>
<p>IDTR	中断描述符表寄存器</p>
<p>LDTR	局部描述符表寄存器</p>
<p>TR	任务寄存器</p>
<p>CR0~3	控制寄存器</p>
<p>IP	指令指针寄存器</p>
<p>flags	标志寄存器</p>
<p>DR0~3	调试寄存器</p>
<p>可见寄存器</p>
<p>通用寄存器，可直接访问</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240420144227413.png" class="" title="image-20240420144227413">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240420144655049.png" class="" title="image-20240420144655049">

<p>段寄存器，段基址*16+偏移</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240420144356905.png" class="" title="image-20240420144356905">



<p>32位与16位</p>
<p>32位地址总线，32位寄存器</p>
<p>寄存器组</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240416185859023.png" class="" title="image-20240416185859023">

<p>通用寄存器组，Eflag和EIP变为32位</p>
<p>段寄存器仍为16位宽！！内容为段选择子</p>
<h4 id="Intel语法风格"><a href="#Intel语法风格" class="headerlink" title="Intel语法风格"></a>Intel语法风格</h4><p>右 -&gt; 左</p>
<p>实模式</p>
<p>段内偏移默认基于DS进行偏移</p>
<p>基址寄存器：bx寄存器默认基于DS进行偏移，bp寄存器默认基于SS进行偏移</p>
<p>变址寄存器：si寄存器和di寄存器默认基于ds进行偏移</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax, [0x1234]	;取DS*16+0x1234处的值赋给ax</span><br><span class="line"></span><br><span class="line">add [bx], 0x1234	;将0x1234赋给内存中DS*16+bx处</span><br><span class="line"></span><br><span class="line">mov ax, [fs:0x5678]	;显式指定使用gs寄存器作为段基址，将gs*16+0x5678的值赋给ax</span><br><span class="line"></span><br><span class="line">mov byte [gs:0x01], &#x27;M&#x27;	;显式指定使用gs段寄存器作为段基址，指定操作数为1字节，向gs*16+0x01的位置写入1字节的数据&#x27;M&#x27;</span><br><span class="line"></span><br><span class="line">mov ax, [sp]	;将sp指向的值赋给ax</span><br><span class="line"></span><br><span class="line">mov ax, [bp+4]	;将SS*16+bp+4处的值赋给ax</span><br><span class="line"></span><br><span class="line">mov [di], ax	;将ax的值写入DS*16+di处</span><br><span class="line"></span><br><span class="line">mov [si+0x1234], ax	;将ax的值写入DS*16+si+0x1234处</span><br><span class="line"></span><br><span class="line">mov [bx+di], ax	;将ax的值写入DS*16+bx+di</span><br><span class="line"></span><br><span class="line">jump $	; $符号表示当前行，该语句为跳转至当前行；$$为当前section</span><br><span class="line"></span><br><span class="line">;-----------------------stdcall调用约定------------------------</span><br><span class="line">push 2</span><br><span class="line">push 3	;从右往左将传入参数压栈</span><br><span class="line">call subtract	;将当前eip压栈，跳转至被调函数地址开始执行</span><br><span class="line"></span><br><span class="line">push ebp	;压栈保存原ebp，</span><br><span class="line">mov ebp, esp	;更新栈帧基址，进入新栈帧</span><br><span class="line"></span><br><span class="line">mov eax, [ebp+0x8]</span><br><span class="line">mov eax, [ebp+0xc]</span><br><span class="line"></span><br><span class="line">mov esp, ebp</span><br><span class="line"></span><br><span class="line">pop ebp	;弹出栈顶保存的原ebp值到ebp</span><br><span class="line">ret 8	;弹出栈顶地址到eip(弹栈使得esp自加4)，esp+8(移除压栈的传入参数)</span><br><span class="line">;-------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">;-----------------------cdecl调用约定--------------------------</span><br><span class="line">push 2</span><br><span class="line">push 3	;从右往左将传入参数压栈</span><br><span class="line">call subtract	;将当前eip压栈，跳转至被调函数地址开始执行</span><br><span class="line">add esp, 8	;清栈，移除传入参数</span><br><span class="line"></span><br><span class="line">push ebp	;压栈保存原ebp，进入新栈帧</span><br><span class="line">mov ebp, esp</span><br><span class="line"></span><br><span class="line">mov eax, [ebp+0x8]</span><br><span class="line">mov eax, [ebp+0xc]</span><br><span class="line"></span><br><span class="line">mov esp, ebp</span><br><span class="line"></span><br><span class="line">pop ebp	;弹出栈顶保存的原ebp值到ebp</span><br><span class="line">ret	;弹出栈顶地址到eip(弹栈使得esp自加4)，esp+8(移除压栈的传入参数)</span><br><span class="line">;-------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">section .data	;section为伪指令，面向程序员的跳转记号</span><br><span class="line">	var dd 0</span><br><span class="line">	str: dd &quot;hello&quot;, 0xa, 0</span><br><span class="line"></span><br><span class="line">section .text</span><br><span class="line">extern c_print	;导入外部函数 c_print</span><br><span class="line">global _start	;将函数_start导出为全局符号，供外部文件调用</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line">	push str</span><br><span class="line">	jmp $$</span><br></pre></td></tr></table></figure>

<p>SS为栈底，bp为当前帧底</p>
<p>保护模式</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240420193121630.png" class="" title="image-20240420193121630">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240420195137241.png" class="" title="image-20240420195137241">



<p>segment与section</p>
<p>section称为节，是指在汇编源码中经由关键字section或segment修饰、逻辑划分的指令或数据区域，汇编器会将这两个关键字修饰的区域在目标文件中编译成节，也就是说“节”最初诞生于目标文件中。</p>
<p>segment称为段，是链接器根据目标文件中属性相同的多个section合并后的section集合，这个集合称为segment，也就是段，链接器把目标文件链接成可执行文件，因此段最终诞生于可执行文件中。我们平时所说的可执行程序内存空间中的代码段和数据段就是指的segment。</p>
<h4 id="AT-T语法风格"><a href="#AT-T语法风格" class="headerlink" title="AT&amp;T语法风格"></a>AT&amp;T语法风格</h4><p>左 -&gt; 右</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">movl %eax, immed32(%ebx, %esi,2)	</span><br><span class="line">	#将eax的值写入内存immed32+ebx+esi*2处</span><br><span class="line">	#()括号表示取内的值作为内存地址</span><br><span class="line">	#寄存器前必须有%</span><br><span class="line"></span><br><span class="line">movl $123, %eax	#将立即数123写入寄存器eax</span><br><span class="line"></span><br><span class="line">andl %ebx, %ecx #对寄存器 %ebx 和 %ecx 的内容执行按位与操作，并将结果存储到 %ecx 寄存器中。</span><br><span class="line"></span><br><span class="line">xchgl %eax, (%esp) #交换寄存器eax和栈顶位置的值</span><br><span class="line"></span><br><span class="line">popl %eax #指从栈顶弹出数据，并将弹出的数据写入 %eax 寄存器。</span><br><span class="line"></span><br><span class="line">ret #弹出栈顶值写入PC</span><br><span class="line">iret #弹出eip并写入，弹出cs并写入，弹出eflags并写入</span><br></pre></td></tr></table></figure>



<p>内联汇编</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">asm</span> [<span class="keyword">volatile</span>] (<span class="string">&quot;&quot;</span>)	<span class="comment">//volatile为可选项，表示此处代码不得修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">asm</span> (<span class="string">&quot;movl $9, %eax;&quot;</span> <span class="string">&quot;pushl %eax&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">asm</span> [<span class="keyword">volatile</span>] (<span class="string">&quot;&quot;</span>:<span class="string">&quot;&quot;</span>(output) :<span class="string">&quot;&quot;</span>(input) :clobber/modify)</span><br><span class="line">	<span class="comment">//&quot;&quot; 内部为汇编代码</span></span><br><span class="line">    <span class="comment">//output, input为c变量，它们前面的&quot;&quot;为约束</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">asm</span> (<span class="string">&quot;addl %%ebx, %%eax;&quot;</span>:<span class="string">&quot;=a&quot;</span>(out_sum):<span class="string">&quot;a&quot;</span>(in_a),<span class="string">&quot;b&quot;</span>(in_b))</span><br><span class="line">	<span class="comment">//&quot;a&quot;为约束名，约束c语言变量in_a使用寄存器eax</span></span><br><span class="line">	<span class="comment">//&quot;b&quot;为约束名，约束c语言变量in_b使用寄存器ebx</span></span><br><span class="line">	<span class="comment">//&quot;=a&quot;为约束名，将寄存器eax的值写入c语言变量out_sum</span></span><br><span class="line">	<span class="comment">//=为只写，+为读写，&amp;为独占所约束的寄存器</span></span><br><span class="line">	<span class="comment">//由于扩展内联汇编中，%0为占位符符号，故修改寄存器表示为%%eax</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">asm</span> (<span class="string">&quot;movb %0 %1;&quot;</span>::<span class="string">&quot;a&quot;</span>(in_a),<span class="string">&quot;m&quot;</span>(in_b))</span><br><span class="line">	<span class="comment">//&quot;a&quot;为约束名，约束c语言变量in_a使用寄存器eax</span></span><br><span class="line">	<span class="comment">//&quot;m&quot;为约束名，使用c语言变量in_b的内存地址</span></span><br><span class="line">	<span class="comment">//%0,%1为序号占位符，所有input和output从左至右被标序号，这里对应in_a, in_b</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">asm</span> (<span class="string">&quot;divb %[divisor]; movb %%al, %[result]&quot;</span>\</span><br><span class="line">		:[result]<span class="string">&quot;=m&quot;</span>(out)\</span><br><span class="line">		:<span class="string">&quot;a&quot;</span>(in_a),[divisor]<span class="string">&quot;m&quot;</span>(in_b)\</span><br><span class="line">		);</span><br><span class="line">	<span class="comment">//[divisor]为in_b的内存地址，通过%[divisor]获取内存的值</span></span><br><span class="line">	<span class="comment">//[result]为out的内存地址，</span></span><br></pre></td></tr></table></figure>



<h4 id="C-宏函数-inline-const与函数指针"><a href="#C-宏函数-inline-const与函数指针" class="headerlink" title="C 宏函数, inline, const与函数指针"></a>C 宏函数, inline, const与函数指针</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//:: (作用域解析运算符) 用于指定访问哪个命名空间、类或结构体的成员。</span></span><br><span class="line"><span class="comment">//: 在继承和初始化列表中使用，用于定义类之间的关系和初始化成员变量。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SQUARE(x) ((x) * (x))</span></span><br><span class="line"><span class="comment">//  (x) * (x)外的一层括号是为了展开时不改变运输优先级</span></span><br><span class="line"><span class="comment">// 对比 </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADD(x) (x) + (x)</span></span><br><span class="line"><span class="comment">// 在使用 4 / ADD(2) 时，展开式</span></span><br><span class="line"><span class="comment">// 4 / (2) * (2) 导致运算优先级错误</span></span><br><span class="line"><span class="comment">// 对比 </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SQUARE(x) x * x</span></span><br><span class="line"><span class="comment">// 在使用 SQUARE(2 + 3) 时，展开式</span></span><br><span class="line"><span class="comment">// 2 + 3 * 2 + 3 导致运算优先级错误</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_FUNC(x) &#123; \</span></span><br><span class="line"><span class="meta">    int result = (x) * 2; \</span></span><br><span class="line"><span class="meta">    printf(<span class="string">&quot;result: %d\n&quot;</span>, result); \</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="comment">// 使用 &#123;&#125; 可以为宏函数创建一个独立的作用域，避免宏函数内部定义的变量与外部代码中的变量发生冲突。</span></span><br><span class="line"><span class="comment">// 故在使用宏函数的时候使用括号 #define func() (&#123;函数体&#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 宏函数</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a, b) ((a) &gt; (b) ? (a) : (b))</span></span><br><span class="line"><span class="comment">//预处理器会将代码中所有出现宏函数名的地方，替换成宏函数定义的代码段。文本替换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 内联函数</span></span><br><span class="line"><span class="keyword">inline</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//内联函数在编译阶段由编译器决定是否进行内联展开。如果编译器认为函数体积较小，且调用频率较高，就会将函数代码直接插入到调用点，不使用函数调用的方式。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//MAX 是一个宏函数，而 max 是一个内联函数。两者都可以用来计算两个数的最大值，但 max 函数更安全，因为它有类型检查，并且不会造成变量名污染。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span> <span class="type">const</span>;	<span class="comment">//声明该函数不会修改调用该函数的对象</span></span><br><span class="line"><span class="comment">//例如</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">  	Complex(<span class="type">double</span> real, <span class="type">double</span> imag) : real_(real), imag_(imag) &#123;&#125; <span class="comment">// 构造函数初始化列表，冒号标志着初始化列表的开始，将构造函数参数 real 的值赋给成员变量 real_</span></span><br><span class="line">    </span><br><span class="line">    Complex operator+(<span class="type">const</span> Complex&amp; other) <span class="type">const</span> &#123;  <span class="comment">// 版本1: const 成员函数</span></span><br><span class="line">        <span class="keyword">return</span> Complex(real_ + other.real_, imag_ + other.imag_);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Complex operator+(<span class="type">const</span> Complex&amp; other) &#123;       <span class="comment">// 版本2: 非 const 成员函数</span></span><br><span class="line">        real_ += other.real_; <span class="comment">// 修改了调用该函数的对象</span></span><br><span class="line">        imag_ += other.imag_;</span><br><span class="line">        <span class="keyword">return</span> *this; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private:</span><br><span class="line">  		<span class="type">double</span> real_;</span><br><span class="line">  		<span class="type">double</span> imag_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Complex <span class="title function_">c1</span><span class="params">(<span class="number">1.0</span>, <span class="number">2.0</span>)</span>;</span><br><span class="line">    Complex <span class="title function_">c2</span><span class="params">(<span class="number">3.0</span>, <span class="number">4.0</span>)</span>;</span><br><span class="line"></span><br><span class="line">    c1 = c1 + c2;  <span class="comment">// 调用版本1或版本2都可以</span></span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> Complex <span class="title function_">c3</span><span class="params">(<span class="number">5.0</span>, <span class="number">6.0</span>)</span>;</span><br><span class="line">    c3 = c3 + c2;  <span class="comment">// 只能调用版本1 (const 成员函数)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">void</span> <span class="title function_">func</span><span class="params">()</span>;	<span class="comment">//该函数返回值为const</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">greet</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello from greet function!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// returnType (*pointerName)(parameter1Type, parameter2Type, ...);</span></span><br><span class="line"><span class="type">void</span> (*ptr)() = greet; <span class="comment">// 定义函数指针并初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两种调用方式是等效的</span></span><br><span class="line">ptr();         <span class="comment">// 简洁写法，ptr实际为地址</span></span><br><span class="line">(*ptr)();     <span class="comment">// 更明确的写法，强调解引用</span></span><br><span class="line">(<span class="type">void</span> *)<span class="number">1234</span>	<span class="comment">//表示一个未知类型的地址</span></span><br><span class="line">(<span class="type">void</span> (*)())<span class="number">1234</span>  <span class="comment">//将1234强制类型转换为函数指针（函数的地址</span></span><br><span class="line">(*((<span class="type">void</span> (*)())<span class="number">1234</span>))()  <span class="comment">//调用位于地址1234处的函数</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">// 虚函数与纯虚函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    virtual <span class="type">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;  <span class="comment">// 普通虚函数，有默认实现</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Animal making sound\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> :</span> public Animal &#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="type">void</span> <span class="title function_">makeSound</span><span class="params">()</span> override &#123; <span class="comment">// 重写基类的虚函数</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Woof!\n&quot;</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    virtual <span class="type">void</span> <span class="title function_">draw</span><span class="params">()</span> = <span class="number">0</span>;  <span class="comment">// 纯虚函数，没有函数体</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> :</span> public Shape &#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="type">void</span> <span class="title function_">draw</span><span class="params">()</span> override &#123;  <span class="comment">// 派生类必须实现 draw() 函数</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Drawing a circle.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h4 id="GDT-LDT与TSS"><a href="#GDT-LDT与TSS" class="headerlink" title="GDT, LDT与TSS"></a>GDT, LDT与TSS</h4><img src="/2024/04/12/Op-sys-Learning-Record/image-20240609174716552.png" class="" title="image-20240609174716552">

<p>硬件厂商推荐通过每个任务拥有一个LDT和一个TSS的方式实现多任务</p>
<p>eg: call 0x0018:0x1234 使用在GDT中索引0x0018的选择子获得段基址，偏移0x1234</p>
<blockquote>
<p>在使用中，段寄存器中的值将确定使用GDT&#x2F;LDT中的第x项</p>
</blockquote>
<h4 id="段描述符与门描述符区别"><a href="#段描述符与门描述符区别" class="headerlink" title="段描述符与门描述符区别"></a>段描述符与门描述符区别</h4><img src="/2024/04/12/Op-sys-Learning-Record/image-20240416192952163.png" class="" title="image-20240416192952163">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240417104649804.png" class="" title="image-20240417104649804">

<p>门 &#x3D; 选择子 + 偏移</p>
<p>选择子 &#x3D; 基址 + 偏移</p>
<p>IDT 保存 中断门</p>
<p>GDT&#x2F;LDT 保存 任务门&#x2F;描述符</p>
<h4 id="物理地址空间使用情况"><a href="#物理地址空间使用情况" class="headerlink" title="物理地址空间使用情况"></a>物理地址空间使用情况</h4><p>tiny-os kernel地址空间</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240421151156773.png" class="" title="image-20240421151156773">

<p>地址空间：</p>
<p>0x0009a000为位图起始地址，占4页</p>
<p>0x0009e000为内核PCB起始，占1页</p>
<p>​	0x0009f000为PCB中内核栈顶(低1M地址中所使用到的最高地址)</p>
<p>0x0009f000~0x00100000为空</p>
<p>0x00100000为内核堆起始，</p>
<p>​	0x00100000~0x00101fff为页目录表和页表</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240427095137775.png" class="" title="image-20240427095137775">



<p>SiFive FU540</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240412184838896.png" class="" title="image-20240412184838896.png">



<p>用户程序地址空间</p>
<p>虚拟地址：</p>
<p>KERNBASE &#x3D; 0x8000 0000</p>
<p>KERNLINK &#x3D; 0x8010 0000</p>
<p>KERNBASE+PHYSTOP &#x3D; 0x8E00 0000</p>
<p>DEVSPACE &#x3D; 0xFE00 0000</p>
<p>物理地址：</p>
<p>低1M部分：0 - 0x10 0000</p>
<p>部分内核数据+空闲空间（用户程序所分配的页表）：0x10 0000 - 0xE00 0000(PHYSTOP)</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240412200020614.png" class="" title="image-20240412200020614">

<p>用户程序虚拟内存内容</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240413095215393.png" class="" title="image-20240413095215393">



<p>Linux 0.11</p>
<p>虚拟地址空间使用情况</p>
<p>每个进程最大虚拟空间为64MB（巨大差异</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240706102456745.png" class="" title="image-20240706102456745">





<h4 id="会话session"><a href="#会话session" class="headerlink" title="会话session"></a>会话session</h4><p>进程通过fork创建新的子进程，进程与创建出的子进程同属一个进程组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> main.c | grep <span class="keyword">for</span> | more</span><br></pre></td></tr></table></figure>

<p>以上三个命令对应三个进程，同属于一个进程组，CTRL+C将中止该进程组的所有进程</p>
<p>Session为进程组的集合，用户通过tty登录后所有的命令(执行的程序)属于同一个session</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240609190505627.png" class="" title="image-20240609190505627">





<h3 id="引导启动程序"><a href="#引导启动程序" class="headerlink" title="引导启动程序"></a>引导启动程序</h3><h4 id="启动流程图"><a href="#启动流程图" class="headerlink" title="启动流程图"></a>启动流程图</h4><p>Linux</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240608151929426.png" class="" title="image-20240608151929426">



<h4 id="BIOS"><a href="#BIOS" class="headerlink" title="BIOS"></a>BIOS</h4><p>计算机启动时为实模式运行，20位地址线，仅能访问1MB空间</p>
<p>机器上电，cs:ip 初始化为 0xf000:0x1110；</p>
<p>CPU从0xffff0开始执行，执行至0xfffff处指令jump后跳转至 f000:e05b，BIOS主体代码所在处；</p>
<p>BIOS内容代码进行硬件检测（内存检测，显卡检测…），</p>
<p>在0x000-0x3ff处建立数据结构，中断向量表IVT，填写中断例程，</p>
<p>进行启动盘检测(0盘0道1扇区最后2个字节:55AA)，从硬盘0盘0道1扇区加载MBR至0x7c00后，跳转执行MBR。</p>
<h4 id="MBR"><a href="#MBR" class="headerlink" title="MBR"></a>MBR</h4><p>MBR占512字节（一个扇区），结尾内容为55AA。</p>
<p>MBR程序位于0x7c00</p>
<p>Linux: boot&#x2F;bootsect.s</p>
<p>bootsect程序(MBR)位于0x7c00，然后bootsect将自身复制到0x90000处，执行跳转至0x90000，使用0x9ff00为栈顶</p>
<p>bootsect将setup程序写入0x90200处，将system加载至0x10000处</p>
<p>​	ps:未直接加载内核至0x00000的原因是0x00000有中断向量表</p>
<p>tiny_os</p>
<p>MBR程序将loader程序写入0x90000处</p>
<h4 id="setup-loader"><a href="#setup-loader" class="headerlink" title="setup&amp;loader"></a>setup&amp;loader</h4><p>Linux: boot&#x2F;setup.s</p>
<p>使用实模式下的中断向量表读取机器数据（读取屏幕光标位置，读取扩展内存大小，读取显卡显示模式，检查显示方式并取参数，取硬盘0信息，取硬盘1信息，检查硬盘2信息），写入0x90000及以后处（覆盖bootsect）</p>
<p>将内核从0x10000<del>0x8ffff移动至0x00000</del>0x7ffff处，</p>
<p>开启A20地址线</p>
<p>修改控制寄存器CR0，进入保护模式</p>
<p>跳转至地址0x00000（通过段选择子2，偏移0转移）</p>
<p>临时gdt已通过data段形式实现在setup.s程序尾部</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240706144702481.png" class="" title="image-20240706144702481">



<p>tiny_os</p>
<p>loader程序位于0x90000，使用0x90000以下部分作为程序栈</p>
<p>loader设置gdt，进入保护模式，并在保护模式加载内核</p>
<h5 id="保护模式"><a href="#保护模式" class="headerlink" title="保护模式"></a>保护模式</h5><p>保护模式使机器从16位进入到32位，寻址方式变更为 基址+偏移</p>
<h6 id="段描述符与全局描述符表GDT"><a href="#段描述符与全局描述符表GDT" class="headerlink" title="段描述符与全局描述符表GDT"></a>段描述符与全局描述符表GDT</h6><p>段寄存器: cs, ds, …(16位寄存器)，保存选择子，即gdt&#x2F;ldt的index对于的值</p>
<p>选择子</p>
<p>RPL：特权等级；TI：选择GDT&#x2F;LDT；索引值：GDT&#x2F;LDT表中的第x个段描述符</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240416193845119.png" class="" title="image-20240416193845119">

<p>GDTR</p>
<p>保存GDT的物理地址，GDT的段描述符记录了各内存段的相关信息</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240416193617238.png" class="" title="image-20240416193617238">

<p>LDTR</p>
<p>保存LDT的内存地址，<strong>LDT必须在GDT中声明</strong>，通过GDT获得LDT内存地址后写入LDTR后使用LDT</p>
<p>GDT</p>
<p>item: 段描述符</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240416192952163.png" class="" title="image-20240416192952163">

<p>段基址：32位段基址；</p>
<p>段界限：对于数据段和代码段，段界限向高地址延申；对于栈，段界限向低地址延申；若偏移量超界错；段大小由 段界限*G 确定，</p>
<p>DPL：段特权级</p>
<p>S：是否系统段</p>
<p>TYPE：段类型</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240427102403905.png" class="" title="image-20240427102403905">



<p>段描述符缓冲寄存器</p>
<p>保存处理后的段描述符</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240420192623948.png" class="" title="image-20240420192623948">

<p>段描述符与内存段</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240427102456078.png" class="" title="image-20240427102456078">

<p>地址计算方式&#x3D;32位段基址+32段偏移</p>
<h5 id="保护模式的启动"><a href="#保护模式的启动" class="headerlink" title="保护模式的启动"></a>保护模式的启动</h5><p>Linux: boot&#x2F;setup.s</p>
<p>使用实模式下的中断向量表读取机器数据，写入0x90000处（覆盖bootsect）</p>
<p>整体下移内核至0x00000处，</p>
<p>设置临时ldt和gdt，加载ldtr和gdtr，开启A20地址线；</p>
<p>重新设备中断控制芯片8259A，设置硬件中断号为0x20 ~ 0x2f，修改CR0寄存器</p>
<p>进入保护模式，跳转至地址0x00000</p>
<p>tiny_os</p>
<p>loader程序位于0x90000，使用0x90000以下部分作为程序栈</p>
<p>1.构建GDT，<strong>GDT内容直接定义在loader内</strong></p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240427102121106.png" class="" title="image-20240427102121106">

<p>2.开启A20地址线</p>
<p>A20地址线：20位地址线的CPU自动发生地址回绕（20位段基址+16位段偏移所产生的超出1MB的部分）</p>
<p>32位地址线为了兼容20位地址线产生的地址回绕，在关闭A20地址线时，CPU将进行地址回绕；在开启A20地址线时，正确访问；</p>
<p>3.加载GDT地址到GDTR</p>
<p>4.置位CR0寄存器的PE位</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240416195112069.png" class="" title="image-20240416195112069">

<p>5.将段寄存器内容更新为段选择子内容</p>
<p>Linux:[类似]</p>
<p>临时gdt包含了两个段描述符，数据段描述符和代码段描述符，段基址均为0x00000</p>
<p>跳转0x00000处</p>
<h4 id="head-loader"><a href="#head-loader" class="headerlink" title="head&amp;loader"></a>head&amp;loader</h4><h5 id="页表组成与构建"><a href="#页表组成与构建" class="headerlink" title="页表组成与构建"></a>页表组成与构建</h5><p>虚拟地址与物理地址映射关系</p>
<p>虚实转换由MMU(Memory Management Unit)硬件实现，</p>
<p>CPU中的SATP寄存器保存Page Table Entry，指向最高一级的页目录page directory的物理内存地址</p>
<p>CPU中的TLB(Translation Lookside Buffer)保存近期访问的PTE内容</p>
<p>XV6</p>
<p>页表中的每一项为PTE(Page Table Entry)，一个PTE 54bit，一级页表为3.375KB</p>
<p>通过SATP寄存器获得最高级页表的物理地址PPN，使用L2查最高级页表获得中间级页表的物理地址；使用L1查中间级页表获得最低级页表的物理地址；使用L0查最低级页表，获得物理地址；</p>
<p>通过TLB获取物理地址PPN；</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240412190738605.png" class="" title="image-20240412190738605">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240412192043741.png" class="" title="image-20240412192043741">



<p>Linux 2.6</p>
<p>虚拟地址高10位，在页目录表中查找对应索引，获得页表的物理地址（20位，余下12位补0）；</p>
<p>虚拟地址中10位，在页表中查找对应索引，获得页的物理地址（20位，余下12位补0）；</p>
<p>虚拟地址后12位，页内偏移；</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240420140907729.png" class="" title="image-20240420140907729">





<p>tiny-os</p>
<p>用户使用低3GB，内核使用高1GB，每页4KB</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240427102727532.png" class="" title="image-20240427102727532">

<p>建立页目录表–页目录表的项即指向一个页表</p>
<p>在物理地址0x100000建立页目录表，一个页目录表含1024个页表项PDE，每个页目录表项4B，占4KB，</p>
<p>第0项（保证loader程序在启动页表后能够正常运行）指向第一个页表，物理地址0x101000</p>
<p>第768项（虚拟地址3GB，用户程序访问内核）指向第一个页表，物理地址0x101000</p>
<p>第1023项指向页目录表，物理地址0x100000</p>
<p>建立页表</p>
<p>在物理地址0x101000建立，一个页表含1024个页表项，每个页表项4B，占4KB，可表示4KB*1024&#x3D;4MB的地址空间</p>
<p>该页表指向的物理地址为0-0x3fffff</p>
<h5 id="head-s-页表构建与进入分页模式"><a href="#head-s-页表构建与进入分页模式" class="headerlink" title="head.s &#x2F; 页表构建与进入分页模式"></a>head.s &#x2F; 页表构建与进入分页模式</h5><p>Linux: boot&#x2F;head.s</p>
<p><img src="file://D:/github/blog/source/_posts/Op-sys-Learning-Record/image-20240609161606117.png?lastModify=1717920885" alt="image-20240609161606117"></p>
<p>位于物理地址0x00000处</p>
<p>加载数据段寄存器，</p>
<p>重新设置idtr，循环创建256项中断描述符，全部指向哑中断处理程序（该程序位于0x6000~中断描述符表前，图中的head.s部分代码）</p>
<p>重新设置gdtr</p>
<p>检查A20地址线是否开启</p>
<p>检查机器是否含有数学协处理器，修改CR0寄存器标志位</p>
<p>将main代码的地址压入位于(ss: 内核数据段选择符, esp: 内核sched模块user_stack处 )的栈，</p>
<p>设置页目录表（为全体进程使用）与页表，4个页表（内核专用页表，新的进程的页表会在主内存区申请）位于页目录表之后，寻址16Mb空间（4KB&#x2F;页表大小，4B&#x2F;页表项，1024*4KB&#x3D;4MB每项寻址空间）</p>
<p>iret弹出入栈的main函数地址，跳转前往执行main函数</p>
<blockquote>
<p>这段汇编先从0x0000开始运行，然后运行到设置内存页表的时候使用.org向后跳，空出内存页表的空间0x1000~0x5000，一直跳到0x6000处继续，将main参数和地址压栈，然后跳过哑中断处理程序，开始创建页内存目录表和写入刚才空出来的内存页表（页内存目录表创建在0x0000，这意味着原本位于这里的head.s的代码将被覆盖</p>
<p>idt是循环创建的，gdt是预先手写好的</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240706163733389.png" class="" title="image-20240706163733389">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240706163716837.png" class="" title="image-20240706163716837">



<p>Linux 0.1x 内核和所有进程共用0x0000的页目录表（这意味着CR3寄存器中的值始终为0x0000，即全部进程共享的页目录表，</p>
<p>其他的4页页表为内核专用，用户进程的页表存放在随机的主内存区</p>
</blockquote>
<p>tiny_os</p>
<p>loader中实现页表的构建与进入分页模式</p>
<p>loader程序</p>
<p>6.清空页目录占用空间0x100000+4096</p>
<p>7.创建页目录项并写入页目录表第0项(指向第1个页表)，第768项(指向第1个页表)和第1023项(指向页目录表，该项用于修改页目录表)</p>
<p>8.创建页表项写入第1个页表(位于0x101000)，分配物理地址0~0x3fffff(实验用mini内核在此处)</p>
<p>9.创建页目录项并写入页目录表第769项~第1022项(指向第2,3,4…个页表,第2,3,4…个页表位于0x102000,0x103000…)</p>
<p>10.修改gdt中段描述符的地址值，上移至0xc0000000以上</p>
<p>11.修改gdt基址，修改esp，上移至0xc0000000以上</p>
<p>12.将页目录地址赋值给cr3，打开cr3的pg位，新gdt值写入gdtr</p>
<p>分页模式启动，</p>
<p>程序<strong>此时</strong>已进入虚拟地址运行，</p>
<p>当前虚拟地址0x0000xxxx，仍处于低1M地址空间中(页目录表第一项指向第一个页表的原因)；</p>
<p>从gdt中获得的段描述符的值为虚拟地址；</p>
<h4 id="内存分段机制"><a href="#内存分段机制" class="headerlink" title="内存分段机制"></a>内存分段机制</h4><p>​	<img src="/2024/04/12/Op-sys-Learning-Record/image-20240706103147318.png" class="" title="image-20240706103147318"></p>
<p>从该图可以看出，偏移值(IP)和段选择子(CS&#x2F;DS&#x2F;…)中的地址为虚拟地址，</p>
<p>通过段选择子读取段描述符表中的段描述符获取完整虚拟地址基址，得到线性地址；</p>
<p>使用线性地址根据页目录表和页表得到物理地址</p>
<h4 id="main-c-loader"><a href="#main-c-loader" class="headerlink" title="main.c&amp;loader"></a>main.c&amp;loader</h4><img src="/2024/04/12/Op-sys-Learning-Record/image-20240609163346462.png" class="" title="image-20240609163346462">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240609180508264.png" class="" title="image-20240609180508264">

<p>Linux: main.c &amp; 任务0（idle进程）</p>
<p>初始化设备与内存信息：</p>
<p>​	根设备号，高速缓存末端地址，机器内存量，主内存开始地址；</p>
<p>调用内核中初始化函数初始化各功能部分；</p>
<ul>
<li>主内存区初始化</li>
<li>硬件中断向量初始化</li>
<li>块设备初始化</li>
<li>字符设备初始化</li>
<li>tty初始化</li>
<li>时间初始化，访问CMOS获取</li>
<li>调度程序初始化</li>
<li>缓存初始化</li>
<li>硬盘初始化</li>
<li>软驱初始化</li>
</ul>
<p>移动到用户模式下执行</p>
<blockquote>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240706162745211.png" class="" title="image-20240706162745211">

<p>此处的宏函数move_to_user_mode展开后，实际上是原地跳转，但是在执行过程中修改了 </p>
<p>cs段选择符-&gt;(ldtr寄存器)LDT表的RPL&#x3D;3的第一个段选择子，任务0代码段</p>
<p>eip-&gt;下一条指令的地址(原地跳转)</p>
<p>ds, es, fs, gs -&gt; (ldtr寄存器)LDT表的RPL&#x3D;3的第二个段选择子，任务0数据段</p>
<p>ss未变更？</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240706163156118.png" class="" title="image-20240706163156118">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240706163204640.png" class="" title="image-20240706163204640">
</blockquote>
<p>fork创建出任务1(init())</p>
<p>循环pause状态—</p>
<p>​	ps: 程序进入interruptible状态（闲置进程），无任务可调度时调度任务0</p>
<p>​	ps:任务0为所有进程的父进程，故不使用堆栈</p>
<p>Linux: main.c&#x2F;init() 任务1</p>
<p>读取硬盘参数（包含分区表信息），加载虚拟盘（若存在），安装根文件系统设备</p>
<p>以读写方式打开tty0，得到文件句柄0stdin，复制两次得到stdout和stderr</p>
<p>fork产生任务2，等待任务2退出</p>
<p>循环</p>
<p>若产生的子进程死亡，重新产生新的进程并进入wait</p>
<blockquote>
<p>任务1与任务0区别</p>
<p>任务1的页表在主内存区，对于任务1，在页目录表有对应于自己的页目录表项，页表内容与任务0相同，虚拟地址高任务0一个页目录表项（在图中线性地址中体现，高的原因是任务1的页目录表项为第二个</p>
<p>任务1会在主内存区申请1页存放PCB+内核栈</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240713185606091.png" class="" title="image-20240713185606091">
</blockquote>
<p>Linux: main.c&#x2F;init() 任务2</p>
<p>关闭从任务1所继承的stdin，stdout和stderr；创建新的会话期</p>
<p>tiny_os</p>
<p>loader中实现kernel写入内核</p>
<p>loader程序位于0x90000，使用0x90000以下部分作为程序栈</p>
<p>13.读磁盘指定扇区，写kernel.bin到虚拟地址0xc0070000~0xc009fbff</p>
<p>14.初始化kernel，将kernel.bin中的segment复制到被编译的虚拟地址处，第一个segment起始于0xc0001500</p>
<p>15.修改栈指针，跳转至kernel，虚拟地址0xc0001500</p>
<h2 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h2><h3 id="外部中断与内部中断"><a href="#外部中断与内部中断" class="headerlink" title="外部中断与内部中断"></a>外部中断与内部中断</h3><img src="/2024/04/12/Op-sys-Learning-Record/image-20240421152049031.png" class="" title="image-20240421152049031">

<p>中断引脚：</p>
<p>INTR: Interupter</p>
<p>NMI: Non Maskable Interupter	向CPU传入中断向量号 2</p>
<p>外部设备中断由中断代理芯片8259A接收后发送中断向量号到CPU中断引脚INTR</p>
<p>Linux： int32 ~ int47 -&gt; IRQ0 ~ IRQ15</p>
<p>软中断：系统调用</p>
<p>Linux：int128</p>
<p>异常：指针越界，栈溢出</p>
<p>Linux：int0 ~ int31</p>
<h3 id="实模式下的中断向量表"><a href="#实模式下的中断向量表" class="headerlink" title="实模式下的中断向量表"></a>实模式下的中断向量表</h3><p>仅在实模式使用，由BIOS进行创建，位于0x00000~0x003ff</p>
<h3 id="中断门与保护模式下的中断描述符表IDT"><a href="#中断门与保护模式下的中断描述符表IDT" class="headerlink" title="中断门与保护模式下的中断描述符表IDT"></a>中断门与保护模式下的中断描述符表IDT</h3><p>中断向量号为 中断向量表&#x2F;中断描述符表 的索引下标</p>
<p>IDTR(Interrupt Descriptor Table Register) 中保存 IDT 位置信息</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240417105214817.png" class="" title="image-20240417105214817">

<p>IDT(Interrupt Descriptor Table)</p>
<p>item: 门</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240417104649804.png" class="" title="image-20240417104649804">

<h3 id="中断过程"><a href="#中断过程" class="headerlink" title="中断过程"></a>中断过程</h3><h4 id="中断初始化"><a href="#中断初始化" class="headerlink" title="中断初始化"></a>中断初始化</h4><p>tiny_os</p>
<p>实模式由BIOS创建中断向量表和中断处理程序；</p>
<p>保护模式由kernel创建中断描述符表和中断处理程序；</p>
<p>1.kernel进行中断初始化：中断描述符初始化，异常处理程序初始化，pic初始化</p>
<p>2.中断描述符初始化：创建中断描述符，描述符中的偏移量由一阶中断处理程序的偏移给出(位于kernel.asm，一阶中断处理程序在进行上下文保存后call二阶中断处理程序，即该初始化中创建的异常处理程序)，写入中断描述符表</p>
<p>3.异常处理程序初始化：将异常处理程序的地址写入二阶中断处理程序表，该表保存函数地址，由一阶中断处理程序call；</p>
<p>4.pic初始化</p>
<p>5.将中断描述符表地址写入idtr</p>
<h4 id="中断处理过程"><a href="#中断处理过程" class="headerlink" title="中断处理过程"></a>中断处理过程</h4><p>1.中断请求</p>
<p>中断请求可能为内部中断或者外部中断</p>
<p>外部中断如下：</p>
<p>当外设发出中断信号后，信号被送入8259A；</p>
<p>8259A检查IMR寄存器中是否屏蔽了来自该IRQ的信号，若IMR寄存器中对应的位为1，表示屏蔽了IRQ代表的中断，则丢掉此中断信号，若IMR寄存器中对应的位为0，表示未屏蔽此中断，则将IRR寄存器中与此中断对应的位 置1。</p>
<p>PR优先级裁决器从IRR寄存器中挑选一个优先级最大的中断，然后8259A向CPU发送INTR信号。</p>
<p>内部中断由代码通过中断向量号触发。</p>
<p>2.(外)中断响应</p>
<p>CPU收到INTR信号后便知道有新的中断了，在执行完当前指令后，向8259A发送一个中断回复信号。</p>
<p>8259A收到回复信号后，将选出来的优先级最大的中断在ISR寄存器中相应的位 置1，表示该中断正在处理，同时将此中断在IRR寄存器中相应的位 置0，相当于将此中断从中断请求队列中去掉。</p>
<p>CPU再向8259A发送INTR信号，表示想要获取中断向量号。</p>
<p>8259A通过数据总线向CPU发送中断向量号，<strong>中断向量号 &#x3D; 起始向量号 + IRQ接口号</strong>，一般起始向量号为32，从中断向量表可看出0—31已经被占用，后面的32—127是分配给可屏蔽中断的，所以此处外设的中断设置的起始向量号便为32。</p>
<p>3.保护现场__压栈</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240714201118464.png" class="" title="image-20240714201118464">

<p>CPU据中断向量号去IDT中获取中断描述符，</p>
<blockquote>
<p>此时将取出选择子中的DPL与当前特权级CPL进行比较，若特权级发生变化，则需要切换栈（不同特权级有着不同的栈，如Linux使用了0， 3特权级，则有两个栈，一个内核栈，一个用户栈）。</p>
</blockquote>
<p>处理器从当前任务的TSS段（每一个任务有一个TSS结构，其中保存着不同特权级栈的SS和ESP值）中获取与DPL特权级相同的栈信息，处理器将当前的旧的SS和ESP的值压入目标栈(<strong>每个进程都拥有独立的内核栈</strong>).</p>
<p>向内核栈压入EFLAGS寄存器值</p>
<p>向内核栈压入CS，EIP值。</p>
<p>若该中断有错误码，压入错误码，</p>
<p>将 段选择符，偏移值写入CS, EIP, 前往执行一阶中断服务程序</p>
<p>图示为发生了特权级改变时的压栈情况</p>
<p><strong>以上过程不由一阶中断程序实现，硬件自动实现</strong></p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240421154614894.png" class="" title="image-20240421154614894">

<p>4.定位中断服务程序</p>
<p>访问中断处理程序的流程</p>
<p>1.通过idtr获得idt的地址，将中断向量号作为索引，访问到中断描述符</p>
<p>2.中断描述符给出<strong>一阶中断处理程序</strong>的段选择子和偏移</p>
<p>3.通过gdtr获得gdt的地址，将段选择子作为索引，访问到段描述符</p>
<p>4.段描述符给出<strong>一阶中断处理程序</strong>的段<strong>虚拟地址</strong>，</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240417110140482.png" class="" title="image-20240417110140482">

<p>5.通过段<strong>虚拟地址</strong>和偏移访问到<strong>一阶中断处理程序</strong>，</p>
<p><strong>一阶中断处理程序</strong>将C函数地址(二阶中断处理程序)压栈，后将地址交换写入eax, 原eax值入栈</p>
<p>其余上下文(ebx,ecx,edx,edi,esi,ebp,ds,es,fs)压栈，</p>
<p>压入错误码，压入执行一阶中断程序前的栈指针(esp0)，作为<strong>二阶中断处理程序参数</strong></p>
<p>并在<strong>二阶中断处理程序</strong>执行完成后，</p>
<p>弹出错误码和esp0，弹出上下文</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240702102514943.png" class="" title="image-20240702102514943">





<p>6.中断处理过程</p>
<p><strong>二阶中断处理程序</strong>，打印出错程序信息</p>
<p>中断的实际处理过程就是执行中断处理程序，Linux将中断处理程序分为上下两部分，需要紧急处理立即执行的归为上半部，不那么紧急的归为下半部。</p>
<p>开中断，即EFLAGS的IF位置1，表示允许响应中断；关中断，即EFLAGS的IF位置0，表示不允许响应中断。</p>
<p>上半部分是刻不容缓的，需要立即执行的部分，所以要在关中断的状态下执行。</p>
<p>而下半部分不那么紧急，在开中断的情况下进行，如果此时有新的中断发生，当前中断处理程序便会换下CPU，CPU会另寻时间重新调度，完成整个中断处理程序。</p>
<p>7.中断返回——出栈</p>
<p>中断返回就是出栈的过程，将第三步保护现场压入栈中的信息弹出。</p>
<p>有错误码弹出错误码。</p>
<p>此时的栈顶指针ESP应指向EIP_old，剩余栈中的信息使用iret指令弹出，CPU执行到iret指令时再次检查和比较特权级是否变化。</p>
<p>弹出EIP_old, CS_old</p>
<p>若特权级变化，将ESP_old, SS_old, 加载到ESP，SS寄存器。</p>
<h3 id="中断处理程序"><a href="#中断处理程序" class="headerlink" title="中断处理程序"></a>中断处理程序</h3><p>Linux: asm.s, traps.c</p>
<p>asm.s</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240702102514943.png" class="" title="image-20240702102514943">

<p><strong>一阶中断处理程序</strong>将C函数地址(二阶中断处理程序)压栈，后将该值交换进入eax, 原eax值入栈</p>
<p>其余上下文(ebx,ecx,edx,edi,esi,ebp,ds,es,fs)压栈，</p>
<p>压入错误码(或0)，压入执行一阶中断程序前的栈指针(esp0)，作为<strong>二阶中断处理程序参数</strong></p>
<p>改变段寄存器ds, es, fs为内核数据段选择符</p>
<p>call<strong>二阶中断处理程序</strong>,</p>
<p>并在<strong>二阶中断处理程序</strong>执行完成后，弹出错误码和esp0，弹出上下文</p>
<p>traps.c</p>
<p><strong>二阶中断处理程序</strong>, 打印出错信息</p>
<p>初始化，设置中断调用门，传入<strong>一阶中断处理程序</strong>(函数)的地址</p>
<h3 id="系统调用处理程序与信号"><a href="#系统调用处理程序与信号" class="headerlink" title="系统调用处理程序与信号"></a>系统调用处理程序与信号</h3><p>Linux: system.c</p>
<p><strong>含时钟中断!!!</strong></p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240704153835415.png" class="" title="image-20240704153835415">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240704190208804.png" class="" title="image-20240704190208804">

<p>对于系统调用处理程序(一阶中断处理程序)：</p>
<p>判断调用号范围</p>
<p>压栈ds, es, fs, edx, ecx, ebx, </p>
<p>修改ds, es, fs,</p>
<p>call 对应的C处理函数(二阶中断处理程序)</p>
<p>压栈eax(二阶中断处理程序返回值)</p>
<p>if(任务非就绪&#x2F;时间片耗尽):</p>
<p>​	执行调度程序</p>
<p>​	执行ret_from_sys_call</p>
<p>else:</p>
<p>​	执行ret_from_sys_call</p>
<p>对于函数ret_from_sys_call：</p>
<p>if(非初始任务&#x2F;非超级用户程序&#x2F;?):</p>
<p>​	取当前任务结构的信号位图，取信号屏蔽码，得到可行信号图，复位信号图并写回</p>
<p>​	将可行信号图中最小的信号压栈，call do_signal，</p>
<p>弹出信号值signr, eax, ebx, ecx, edx, fs, es, ds</p>
<blockquote>
<p>此时cs为用户代码段选择子，eip为信号处理程序；内核栈中的ss和esp将在cpu检查段选择子的rpl部分时发现进入低特权级，弹出并写入；</p>
<p>后续执行信号处理程序，ret时将用户栈顶的restorer写入eip，执行restorer；</p>
<p>restorer丢弃用户栈顶的信号值signr, 设置信号屏蔽码, 丢弃block, 弹出eax, ecx, edx, eflags, ret将用户栈顶的原eip写入eip，恢复系统调用前状态</p>
</blockquote>
<p>​	</p>
<p>函数do_signal：</p>
<blockquote>
<p>sys_signal和sys_sigaction修改进程task_struct的sigaction[32]，用于修改在接收信号时的处理函数，返回原对应信号的处理函数指针</p>
<p>sigaction[32]的项：</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240704193952350.png" class="" title="image-20240704193952350">

<p>sys_sigaction是sys_signal的超集</p>
</blockquote>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240704190208804.png" class="" title="image-20240704190208804">

<p>从task_struct-&gt;sigaction[32]中获取信号signr对应的sigaction</p>
<p>if(非忽略句柄&#x2F;非默认句柄):</p>
<p>​	若sigaction-&gt;sa_flag为oneshot, 将句柄置空</p>
<p>​	修改内核堆栈中eip的值为信号处理程序句柄</p>
<p>​	下移用户堆栈对应esp，并向用户堆栈写入图示值</p>
<blockquote>
<p>sa_restorer</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240704195323779.png" class="" title="image-20240704195323779">
</blockquote>
<p><strong>信号</strong></p>
<p>有上可知，信号将在系统调用结束时检查，并使用该程序task_struct中sigaction[32]中设置的处理函数进行处理</p>
<p>向某程序发信息 -&gt; 修改该程序task_struct的signal</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240705101522972.png" class="" title="image-20240705101522972">



<h3 id="中断处理程序-系统调用处理程序的注册"><a href="#中断处理程序-系统调用处理程序的注册" class="headerlink" title="中断处理程序&#x2F;系统调用处理程序的注册"></a>中断处理程序&#x2F;系统调用处理程序的注册</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">register_handler</span><span class="params">(<span class="type">uint8_t</span> vec_no, intr_handler handler)</span> &#123;</span><br><span class="line">    sys_call_table[vec_no] = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改<strong>中断处理程序表&#x2F;系统调用处理程序表</strong>指向的二阶中断处理程序</p>
<p>仅在内核态可修改此类表</p>
<h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><h3 id="TSS与任务链"><a href="#TSS与任务链" class="headerlink" title="TSS与任务链"></a>TSS与任务链</h3><p>TR(Task Register)</p>
<p>保存TSS地址</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240714093840136.png" class="" title="image-20240714093840136">



<p>Task State Segment	</p>
<p>TSS描述符保存于GDT</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240506191146645.png" class="" title="image-20240506191146645">



<p>TSS内容</p>
<p>保存任务快照（任务被换上&#x2F;换下CPU时）</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240506191245406.png" class="" title="image-20240506191245406">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240428111029824.png" class="" title="image-20240428111029824">



<p>TSS段</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240713192515176.png" class="" title="image-20240713192515176">



<img src="/2024/04/12/Op-sys-Learning-Record/image-20240713192710613.png" class="" title="image-20240713192710613">



<h3 id="PCB"><a href="#PCB" class="headerlink" title="PCB"></a>PCB</h3><img src="/2024/04/12/Op-sys-Learning-Record/image-20240705104639547.png" class="" title="image-20240705104639547">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240705104656011.png" class="" title="image-20240705104656011">

<blockquote>
<p>进程的页目录表基址保存在PCB，linux 0.1x的所有进程的这个值均为0x0000</p>
<p>进程的tss位于PCB</p>
<p>进程的ldt位于PCB和tss</p>
</blockquote>
<h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>Linux</p>
<h4 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h4><p>通过fork从task0创建</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240714144402746.png" class="" title="image-20240714144402746">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240714144419322.png" class="" title="image-20240714144419322">

<blockquote>
<p>被fork出来的子进程将复制父进程的页目录表和页表，fork()后，子进程将获得自己的PCB，其中PCB的页目录表基址和父进程不一致，指向自己的页目录表。该页目录表对应页表中的页表项指向的物理地址与父进程的一致，直至子进程发生写行为时分配新内存页（写时复制技术）</p>
<p>创建新进程需要在fork后在子进程内执行execve切换执行内容</p>
<p>fork的核心工作是复制出新的PCB，并修改PCB中的各值(包括对TSS的修改)</p>
</blockquote>
<h4 id="execve"><a href="#execve" class="headerlink" title="execve"></a>execve</h4><img src="/2024/04/12/Op-sys-Learning-Record/image-20240715111107866.png" class="" title="image-20240715111107866">



<p>tiny_os</p>
<p>进程创建过程</p>
<p>kernel启动进程，传入进程参数（进程文件名和进程名），启动进程。</p>
<p>1.初始化线程</p>
<p>从内核空间申请页面，清洗页面，初始化线程名为线程&#x2F;进程名；</p>
<p>根据线程&#x2F;进程名初始化线程状态；</p>
<p>初始化优先级，时间片上限，已使用时间片，页目录表地址，内核栈指针，魔数等；</p>
<p>加入线程队列，线程指针thread指向该页面底部；</p>
<p>2.创建用户进程的虚拟地址池</p>
<p>用户进程虚拟地址池位于PCB中</p>
<p>设置虚拟地址池起始于0x00000000</p>
<p>设置虚拟地址池所管理的空间的页数和虚拟地址池长度</p>
<p>3.初始化内核栈</p>
<p>线程内核栈位置为PCB页面顶部（高地址），thread-&gt;self_kstack为线程内核栈指针；</p>
<p>下移thread-&gt;self_kstack，留出中断栈空间sizeof(intr_stack)</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240425101059850.png" class="" title="image-20240425101059850">

<p>下移thread-&gt;self_kstack，留出线程栈空间sizeof(thread_stack)</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240425101121206.png" class="" title="image-20240425101121206">



<p>创建线程栈指针kthread_stack，指向当前thread-&gt;self_kstack指针位置，</p>
<p>初始化线程栈，依次写入eip，函数名，函数参数和寄存器初始值ebp,ebx,esi,edi；</p>
<p>thread-&gt;self_kstack此时位于线程栈栈顶，栈顶内容为edi，esi，ebx，ebp，函数参数，函数名，eip；</p>
<p>&#x2F;&#x2F;不执行ret指令，将压栈的函数参数，函数名和返回地址弹出，并前往执行对应函数；</p>
<p>4.创建用户进程的页目录表</p>
<p>从内核分配一页作为进程页目录表</p>
<p>将内核页目录表的高半部分（对应内核空间部分）项复制到进程页目录表中</p>
<p>设置最后一项页表的地址为页目录表地址</p>
<p>4.5 初始化用户内存块表</p>
<p>5.加入调度链表</p>
<p>关中断；</p>
<p>将进程加入调度链表；</p>
<p>开中断；</p>
<p>进程执行</p>
<p>构建用户进程初始上下文信息</p>
<p>移动线程栈指针kthread_stack指向intr_stack顶部，线程栈底部</p>
<p>写入中断栈，依次写入edi, esi, ebp, esp_dummy</p>
<p>ebx, edx, ecx, eax, gs, </p>
<p>ds, es, fs, eip, cs, eflag, esp, ss, 此类寄存器中值均为用户空间，为通过中断返回的方式进入3特权级做准备</p>
<p>thread-&gt;self_kstack此时位于中断栈栈顶，栈顶内容为：</p>
<p>vec_no, edi, esi, ebp, esp_dummy……</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240507185615764.png" class="" title="image-20240507185615764">



<p>将esp设置为中断栈栈顶指针thread-&gt;self_kstack，</p>
<p>jmp intr_exit，跳过压入的中断向量号vec_no，popad弹出所有通用寄存器值，pop gs，fs，es，ds，跳过错误码；此时栈顶为：eip值为filename（指向用户进程入口地址），cs值为SELECTOR_U_CODE，eflag为(EFLAGS_IOPL_0 | EFLAGS_MBS | EFLAGS_IF_1);</p>
<p>前往执行对应函数，进入特权级3；</p>
<h3 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h3><p>调度发生在：</p>
<p>1.系统调用(包括时间中断)-目标中断处理函数后，若当前进程时间片为0或任务未就绪</p>
<p>2.切换当前进程为其他态后</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240608144715684.png" class="" title="image-20240608144715684">



<p>使用远跳转实现任务切换</p>
<p>call指令可以实现向高特权级跳转，jmp平级跳转</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 近跳转</span><br><span class="line">jmp short next_instruction</span><br><span class="line"></span><br><span class="line">; 远跳转，使用段地址和偏移量 (实模式)</span><br><span class="line">jmp far 1000h:1234h</span><br><span class="line"></span><br><span class="line">; 远跳转，使用选择子和偏移量 (保护模式)</span><br><span class="line">jmp far [selector:offset]</span><br><span class="line">call 0x0008:0x1234 ; 向GDT中索引为1的调用门跳转，忽略偏移0x1234</span><br></pre></td></tr></table></figure>

<p>在linux 0.x 中，所有任务的TSS均保存在GDT中；</p>
<p>在发生上述两种需要调度的情况时，调度程序(内核)将获取下一个可执行任务，并获取该任务对应的TSS；</p>
<p>jmp far [TSS 选择子]</p>
<ul>
<li><strong>读取 TSS 选择子：</strong> CPU 从指令中获取 [TSS 选择子] 的值，该值指向目标任务 (Task B) 的 TSS 描述符在 GDT 中的位置。</li>
<li><strong>读取 TSS 描述符：</strong> CPU 根据 TSS 选择子，从 GDT 中读取 Task B 的 TSS 描述符，该描述符包含了 Task B 的 TSS 段基址。</li>
<li><strong>加载新 TSS：</strong> CPU 将 Task B 的 TSS 段基址加载到 TR 寄存器中，表示当前任务切换为 Task B。</li>
<li><strong>保存当前任务状态：</strong> CPU 将当前任务 (Task A) 的状态信息保存到 Task A 的 TSS 中，包括：<ul>
<li>CS、EIP、EFLAGS、SS、ESP 等通用寄存器的值。</li>
<li>段寄存器 DS、ES、FS、GS 的值。</li>
</ul>
</li>
<li><strong>加载新任务状态：</strong> CPU 从 Task B 的 TSS 中加载新的任务状态，包括：<ul>
<li>将 Task B 的 CS、EIP、EFLAGS、SS、ESP 等寄存器的值加载到相应的寄存器中。</li>
<li>将 Task B 的 DS、ES、FS、GS 段寄存器的值加载到相应的段寄存器中。</li>
</ul>
</li>
</ul>
<blockquote>
<p>在CPU识别出跳转目标为TSS选择子时（通过硬件机制识别），不会直接将 选择子:偏移 写入 CS:EIP，会进入任务切换流程，通过硬件自动将当前任务的 CS:EIP 以及其他相关寄存器（包括 EFLAGS、SS、ESP、段寄存器等）的值保存在当前任务的 TSS 中，然后从目标任务的 TSS 中加载新的 CS:EIP 以及其他寄存器的值。</p>
</blockquote>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240715103745870.png" class="" title="image-20240715103745870">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240715103802105.png" class="" title="image-20240715103802105">





<p>Linux: system_call.s</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.align 2</span><br><span class="line">_timer_interrupt:</span><br><span class="line">	push %ds		# save ds,es and put kernel data space</span><br><span class="line">	push %es		# into them. %fs is used by _system_call</span><br><span class="line">	push %fs</span><br><span class="line">	pushl %edx		# we save %eax,%ecx,%edx as gcc doesn&#x27;t</span><br><span class="line">	pushl %ecx		# save those across function calls. %ebx</span><br><span class="line">	pushl %ebx		# is saved as we use that in ret_sys_call</span><br><span class="line">	pushl %eax</span><br><span class="line">	movl $0x10,%eax</span><br><span class="line">	mov %ax,%ds</span><br><span class="line">	mov %ax,%es</span><br><span class="line">	movl $0x17,%eax</span><br><span class="line">	mov %ax,%fs</span><br><span class="line">	incl _jiffies  #发生时间中断时将jiffies自增</span><br><span class="line">	movb $0x20,%al		# EOI to interrupt controller #1</span><br><span class="line">	outb %al,$0x20</span><br><span class="line">	movl CS(%esp),%eax</span><br><span class="line">	andl $3,%eax		# %eax is CPL (0 or 3, 0=supervisor)</span><br><span class="line">	pushl %eax</span><br><span class="line">	call _do_timer		# &#x27;do_timer(long CPL)&#x27; does everything from PS: 其实就是修改计时器和调度</span><br><span class="line">	addl $4,%esp		# task switching to accounting ...</span><br><span class="line">	jmp ret_from_sys_call</span><br></pre></td></tr></table></figure>

<p>Linux: sched.c</p>
<p>jiffies</p>
<blockquote>
<p>include&#x2F;sched.h 定义为变量</p>
</blockquote>
<p>schedule()</p>
<blockquote>
<p>该函数在修改当前任务state后调用</p>
<p>在系统调用处理完成当前中断后调用</p>
</blockquote>
<p>从任务数组中最后一个任务开始向前扫描直到第一个任务前(跳过空)：</p>
<p>​	若task_struct-&gt;alarm &lt; jiffies, 修改signal并置alarm为0</p>
<p>​	若任务除去屏蔽信号外存在信号且为interruptible, 修改task_struct-&gt;state为就绪</p>
<blockquote>
<p>alarm判断+有信号存在</p>
</blockquote>
<p>next &#x3D; 0 </p>
<p>while(1)</p>
<p>​	从任务数组中最后一个任务开始向前扫描直到第一个任务前(跳过空)：</p>
<p>​		next &#x3D; 当前task_struct-&gt;counter最大的任务；</p>
<p>​		if(counter最大的任务的counter&gt;0):break;</p>
<p>​		else:使用任务优先级更新所有任务的counter</p>
<p>switch_to(next)</p>
<blockquote>
<p>next默认为0，即在没有可执行任务时系统切换至任务0(idle任务)执行</p>
</blockquote>
<p>sleep_on(struct task_struct **p)</p>
<blockquote>
<p>将当前任务state置为uninterruptible并加入睡眠队列</p>
<p>传入的p指向睡眠队列头，该函数将当前task置为睡眠队列头</p>
</blockquote>
<p>do_timer(long cpl)</p>
<blockquote>
<p>时钟中断二阶处理程序</p>
</blockquote>
<p>增加内核&#x2F;用户代码运行时间</p>
<p>定时器链中定时器的值减少，若为0调用处理函数并移除该定时器</p>
<p>减少当前程序的counter值，若为0则call schedule()</p>
<p>switch_to()</p>
<blockquote>
<p>switch_to修改current指针指向传入的task任务</p>
</blockquote>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240705161507324.png" class="" title="image-20240705161507324">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240705155902092.png" class="" title="image-20240705155902092">



<p>进程切换时，修改以下：</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240714095015752.png" class="" title="image-20240714095015752">



<h2 id="特权级"><a href="#特权级" class="headerlink" title="特权级"></a>特权级</h2><p>CPL(Current Privilege Level)  当前代码特权级</p>
<p>为当前运行代码段的特权级，保存于CS寄存器中段选择子的RPL(2位)处</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240416193845119.png" class="" title="image-20240416193845119">

<p>eg: 运行用户程序代码，CPL &#x3D; 3</p>
<p>​	  运行内核程序代码，CPL &#x3D; 0</p>
<p>RPL(Request Privilege Level) 访问者特权级</p>
<p>访问者代码所在段的描述符的DPL为RPL值</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240416192952163.png" class="" title="image-20240416192952163">

<p>DPL(Descriptor Privilege Level) 受访者特权级</p>
<p>受访者代码所在段的描述符的DPL</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240416192952163.png" class="" title="image-20240416192952163">

<h3 id="门描述符"><a href="#门描述符" class="headerlink" title="门描述符"></a>门描述符</h3><img src="/2024/04/12/Op-sys-Learning-Record/image-20240417104649804.png" class="" title="image-20240417104649804">

<p>门描述符含有DPL，访问者的权限需大于等于门描述符的权限</p>
<p>eg: 访问者RPL&#x3D;3, 门描述符DPL&#x3D;3</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240417104649804.png" class="" title="image-20240417104649804">

<p>门描述符给出目标中断程序的段描述符选择子，</p>
<p>段描述符选择子含有DPL，门描述符的特权小于被访问者(中断程序)的权限</p>
<p>eg: 门描述符DPL&#x3D;3，中断程序段描述符DPL&#x3D;0</p>
<h3 id="访问过程"><a href="#访问过程" class="headerlink" title="访问过程"></a>访问过程</h3><img src="/2024/04/12/Op-sys-Learning-Record/image-20240506164402606.png" class="" title="image-20240506164402606">



<h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p>tiny_os</p>
<p>物理内存被划分为内核内存池和用户内存池</p>
<p>所有程序（用户程序和内核）均存在虚拟地址池，记录虚拟内存使用情况</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240425160621730.png" class="" title="image-20240425160621730">

<h3 id="内存管理启动"><a href="#内存管理启动" class="headerlink" title="内存管理启动"></a>内存管理启动</h3><p>Linux</p>
<p>内存池创建</p>
<p>Linux不对主内存(物理内存)进行内核使用和用户使用的划分；</p>
<p>所有物理内存的申请均在主内存实现；</p>
<p>tiny_os</p>
<p>内存池创建：</p>
<p>1.kernel创建内核内存池和用户内存池，两个池均位于物理地址0x0009a000；分别管理物理内存的0x00102000~?和0x?(大小为物理内存剩下的一半)</p>
<p>2.kernel创建kernel的虚拟地址池，位于kbm和ubm之后；管理0xc0100000~?(大小同内核内存池)的虚拟地址</p>
<p>3.初始化内核内存池，用户内存池，虚拟地址池，</p>
<p>申请内存过程：</p>
<p>1.在虚拟地址池中申请连续虚拟内存</p>
<p>扫描虚拟地址池位图，判断是否可申请对应页数；若允许，修改位图并返回页<strong>起始虚拟地址</strong>。</p>
<p>2.在给定的物理内存池中逐一申请物理页(不要求连续)</p>
<p>判断需要在哪个物理池中进行申请；扫描物理地址池位图，修改位图并返回单页<strong>起始物理地址</strong>，重复。</p>
<p>3.通过页表建立虚拟页与物理页的映射关系.</p>
<p>将多页虚拟地址差分为单页，传入单页虚拟地址的和单页物理地址；</p>
<p>将虚拟地址高10位作为页目录索引v_pdi，中10位作为页表索引v_pti；</p>
<p>若页目录索引v_pdi处存在PDE，使用单页物理地址构造页表项PTE，写入PDE指向的页表的页表索引v_pti处；</p>
<p>若页目录索引v_pdi处为空，在内核中申请一个物理页作为页表，使用单页物理地址构造页表项PTE，写入PDE指向的页表的页表索引v_pti处；</p>
<p>申请过程中会将所申请到的页清理干净</p>
<h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><h3 id="i节点"><a href="#i节点" class="headerlink" title="i节点"></a>i节点</h3><img src="/2024/04/12/Op-sys-Learning-Record/image-20240714155420209.png" class="" title="image-20240714155420209">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240714155445517.png" class="" title="image-20240714155445517">



<h3 id="文件打开"><a href="#文件打开" class="headerlink" title="文件打开"></a>文件打开</h3><img src="/2024/04/12/Op-sys-Learning-Record/image-20240714155625208.png" class="" title="image-20240714155625208">



<img src="/2024/04/12/Op-sys-Learning-Record/image-20240714155718673.png" class="" title="image-20240714155718673">



<h2 id="字符设备与块设备"><a href="#字符设备与块设备" class="headerlink" title="字符设备与块设备"></a>字符设备与块设备</h2><p>控制设备的<strong>内核模块</strong>被成为<strong>设备驱动程序</strong>，一个设备驱动程序控制一类设备</p>
<p>e.g.: 一个磁盘驱动程序控制所有的磁盘设备</p>
<p>部分驱动程序控制的是<strong>软设备</strong>，软设备不存在对应的物理设备</p>
<p>在 Linux 系统中，硬件设备被抽象为文件，称为设备文件。这些文件通常位于 &#x2F;dev 目录下，用户可以通过文件操作函数来访问硬件设备</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240714193850691.png" class="" title="image-20240714193850691">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240714194037398.png" class="" title="image-20240714194037398">



<h3 id="字符设备"><a href="#字符设备" class="headerlink" title="字符设备"></a>字符设备</h3><p>字符设备是一种以字节流的方式进行数据传输的设备，它每次只传输一个字节的数据，并且数据传输没有缓存</p>
<ul>
<li>键盘、鼠标：每次按键或移动鼠标都会产生一个字符流。</li>
<li>串口、并口：数据以字节流的形式进行传输。</li>
<li>终端设备 (tty, Teletypewriter)：用于与用户交互，每次输入或输出一个字符。</li>
</ul>
<h4 id="TTY"><a href="#TTY" class="headerlink" title="TTY"></a>TTY</h4><img src="/2024/04/12/Op-sys-Learning-Record/image-20240714194408562.png" class="" title="image-20240714194408562">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240714194437093.png" class="" title="image-20240714194437093">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240714194601289.png" class="" title="image-20240714194601289">

<blockquote>
<p>键盘按键如何到达进程的</p>
<p><strong>1. 硬件中断：</strong></p>
<ul>
<li>当按下或释放键盘上的一个键时，键盘控制器（Keyboard Controller）会生成一个硬件中断信号，发送给中断控制器（Interrupt Controller）。</li>
<li>中断控制器会根据中断优先级和其他因素，决定是否将该中断信号传递给 CPU。</li>
</ul>
<p><strong>2. 中断处理程序：</strong></p>
<ul>
<li><p>终端驱动程序（Terminal Driver）会注册一个中断处理程序，专门处理来自键盘的中断。</p>
</li>
<li><p>如果 CPU 接受了中断请求，它会暂停当前正在执行的任务，转而执行键盘中断处理程序（Interrupt Handler）。当键盘中断发生时，终端驱动的中断处理程序会被调用，它会将扫描码转换为 ASCII 码或 Unicode 码等字符编码。</p>
</li>
<li><p>中断处理程序会读取键盘控制器中的数据，获取按键的扫描码（Scan Code），它代表了按下或释放的具体键位。终端驱动程序会将转换后的字符存储在一个缓冲区（Buffer）中，等待用户程序读取。</p>
</li>
</ul>
<p><strong>3. 用户程序：</strong></p>
<ul>
<li>当用户程序（例如 shell 或文本编辑器）需要获取键盘输入时，它会调用系统调用（System Call）读取终端设备文件（例如 &#x2F;dev&#x2F;tty）。</li>
<li>终端驱动程序会将缓冲区中的字符返回给用户程序，用户程序就可以根据这些字符执行相应的操作了。</li>
</ul>
</blockquote>
<h3 id="块设备"><a href="#块设备" class="headerlink" title="块设备"></a>块设备</h3><p>块设备是一种以数据块为单位进行数据传输的设备，它可以随机访问数据块，并且数据传输通常有缓存</p>
<ul>
<li>硬盘、SSD：数据以块的形式存储和读取。</li>
<li>USB 存储设备：例如 U 盘、移动硬盘等。</li>
<li>CD&#x2F;DVD 光驱：数据以扇区 (sector) 为单位存储，每个扇区通常为 512 字节。</li>
</ul>
<h2 id="kernel程序"><a href="#kernel程序" class="headerlink" title="kernel程序"></a>kernel程序</h2><h3 id="VX6-kernel程序内容"><a href="#VX6-kernel程序内容" class="headerlink" title="VX6 kernel程序内容"></a>VX6 kernel程序内容</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kinit：设置好页表分配器（page allocator）</span><br><span class="line"></span><br><span class="line">kvminit：为kernel分配页表，将低地址设备映射到kernel地址空间（即在kernel页表中写入PTE指向设备）</span><br><span class="line"></span><br><span class="line">kvminithart：页表开始生效，程序计数器将会通过MMU翻译为物理地址</span><br><span class="line"></span><br><span class="line">processinit：设置好初始进程或者说设置好进程表单</span><br><span class="line"></span><br><span class="line">trapinit/trapinithart：设置好user/kernel mode转换代码</span><br><span class="line"></span><br><span class="line">plicinit/plicinithart：设置好中断控制器PLIC（Platform Level Interrupt Controller），我们后面在介绍中断的时候会详细的介绍这部分，这是我们用来与磁盘和console交互方式</span><br><span class="line"></span><br><span class="line">binit：分配buffer cache</span><br><span class="line"></span><br><span class="line">iinit：初始化inode缓存</span><br><span class="line"></span><br><span class="line">fileinit：初始化文件系统</span><br><span class="line"></span><br><span class="line">virtio_disk_init：初始化磁盘</span><br><span class="line"></span><br><span class="line">userinit：最后当所有的设置都完成了，操作系统也运行起来了，会通过userinit运行第一个进程</span><br></pre></td></tr></table></figure>



<h3 id="tiny-os-kernel程序内容"><a href="#tiny-os-kernel程序内容" class="headerlink" title="tiny-os kernel程序内容"></a>tiny-os kernel程序内容</h3><p>loader程序与kernel程序对比</p>
<p>loader为纯二进制程序 ，仅包含机器码，根据机器码内容装载至内存后直接开始运行；</p>
<p>kernel为elf文件，存在文件头，节等内容，在进行segment展开后成为可运行的机器码</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240421144651548.png" class="" title="image-20240421144651548">



<p>kernel代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//interrupt.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">idt_init</span><span class="params">()</span> &#123;</span><br><span class="line">    idt_desc_init(); <span class="comment">//创建门描述符，写入属性和一阶中断程序入口地址，填入idt</span></span><br><span class="line">    exception_handler_init();</span><br><span class="line">    <span class="comment">//异常处理函数初始化，创建中断处理函数，使一阶中断程序有可用调用的函数</span></span><br><span class="line">    pic_init(); <span class="comment">//初始化主片8259A</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将idt地址写入idtr</span></span><br><span class="line">    <span class="type">uint64_t</span> idt_operand = ((<span class="keyword">sizeof</span>(idt) - <span class="number">1</span>) | ((<span class="type">uint64_t</span>) ((<span class="type">uint32_t</span>) idt &lt;&lt; <span class="number">16</span>)));</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(<span class="string">&quot;lidt %0&quot;</span> : : <span class="string">&quot;m&quot;</span> (idt_operand))</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//timer.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">timer_init</span><span class="params">()</span> &#123;</span><br><span class="line">    frequency_set(COUNTER0_PORT, COUNTER0_NO, READ_WRITE_LATCH, COUNTER_MODE, COUNTER0_VALUE);<span class="comment">//设置8253发中断的周期</span></span><br><span class="line">    register_handler(<span class="number">0x20</span>, intr_timer_handler);</span><br><span class="line">    <span class="comment">//触发0x20中断时调用intr_timer_handler函数，用于进行调度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//memory.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">mem_init</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> total_memory = (*(<span class="type">uint32_t</span>*) (<span class="number">0xb00</span>));</span><br><span class="line">    mem_pool_init(total_memory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//init.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_all</span><span class="params">()</span> &#123;</span><br><span class="line">    idt_init();</span><br><span class="line">    timer_init</span><br><span class="line">    <span class="title function_">mem_init</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//thread.h</span></span><br><span class="line"><span class="keyword">struct</span> task_struct* <span class="title function_">thread_start</span><span class="params">(<span class="type">char</span>* name, <span class="type">int</span> prio, thread_func function, <span class="type">void</span>* func_args)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span>* <span class="title">thread</span> =</span> get_kernel_pages(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//此为内核拉起的内核线程，故申请内核页作为PCB</span></span><br><span class="line"></span><br><span class="line">    init_thread(thread, name, prio);</span><br><span class="line">    <span class="comment">//将申请到的内核页清空并写入PCB中的属性</span></span><br><span class="line">    </span><br><span class="line">    thread_create(thread, function, func_args);</span><br><span class="line">    <span class="comment">//初始化PCB中的栈，创建中断栈和线程栈，压入线程需要执行的函数的相关数据和寄存器初始值</span></span><br><span class="line"></span><br><span class="line">    ASSERT(!list_find(&amp;thread_ready_list, &amp;thread-&gt;general_tag));</span><br><span class="line">    list_append(&amp;thread_ready_list, &amp;thread-&gt;general_tag);</span><br><span class="line">    <span class="comment">//将线程加入就绪队列，general_tag为就绪队列/运行队列/阻塞队列等使用</span></span><br><span class="line"></span><br><span class="line">    ASSERT(!list_find(&amp;thread_all_list, &amp;thread-&gt;all_list_tag));</span><br><span class="line">    list_append(&amp;thread_all_list, &amp;thread-&gt;all_list_tag);</span><br><span class="line">    <span class="comment">//将线程加入系统线程队列，all_list_tag为系统线程队列使用</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(<span class="string">&quot;movl %0, %%esp; pop %%ebp; pop %%ebx; pop %%edi; pop %%esi; ret&quot;</span> : : <span class="string">&quot;g&quot;</span> (thread-&gt;self_kstack) : <span class="string">&quot;memory&quot;</span>)</span>;</span><br><span class="line">    <span class="comment">//将压栈的寄存器初始值弹栈，ret将线程需要执行的函数的相关数据弹栈并前往执行</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> thread;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//main.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    init_all();</span><br><span class="line">    thread_start(<span class="string">&quot;k_thread_1&quot;</span>, <span class="number">31</span>, k_thread_function, <span class="string">&quot;skywalker &quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>operation system</category>
      </categories>
      <tags>
        <tag>operation system</tag>
      </tags>
  </entry>
</search>
