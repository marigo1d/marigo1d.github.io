<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Database-Learning-Record</title>
    <url>/2024/08/10/Database-Learning-Record/</url>
    <content><![CDATA[<p>MySQL和Redis数据库相关学习记录</p>
<span id="more"></span>



<h1 id="Database-Learning-Record"><a href="#Database-Learning-Record" class="headerlink" title="Database Learning Record"></a>Database Learning Record</h1><p>待完成</p>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker/K8s</title>
    <url>/2024/08/16/Docker-K8s/</url>
    <content><![CDATA[<p>容器相关学习记录</p>
<span id="more"></span>



<h1 id="Container-related-Learning-Records"><a href="#Container-related-Learning-Records" class="headerlink" title="Container-related Learning Records"></a>Container-related Learning Records</h1><p>待完成</p>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Algo Learning Record</title>
    <url>/2024/04/25/Algo-Learning-Record/</url>
    <content><![CDATA[<p>算法相关学习记录</p>
<span id="more"></span>



<h1 id="刷题"><a href="#刷题" class="headerlink" title="刷题"></a>刷题</h1><h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><p>接雨水</p>
<p>移动低位指针</p>
<h2 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h2><h3 id="DP问题分析"><a href="#DP问题分析" class="headerlink" title="DP问题分析"></a>DP问题分析</h3><p>递归&amp;动态规划</p>
<img src="/2024/04/25/Algo-Learning-Record/IMG_0091.PNG" class="" title="IMG_0091(20240425-192828)">

<p>递归会重复进入状态，DP不会</p>
<p>递归一个起点，多个终点；</p>
<p>DP多个起点，一个终点；</p>
<p>DP核心：</p>
<p>1.确定状态和动作</p>
<p>2.确定起点和终点</p>
<h3 id="无权图两点间路径数"><a href="#无权图两点间路径数" class="headerlink" title="无权图两点间路径数"></a>无权图两点间<strong>路径数</strong></h3><p>递归思路：</p>
<p>1.从终点出发，存在多个选择，每个选择为分支，<strong>传入递归函数</strong>并进入；取得递归结果相加。</p>
<p>2.对于每一个中间态，存在多个选择，<strong>传入递归函数</strong>并进入；</p>
<p>3.到达起点，当前递归结束，返回；</p>
<p>DP思路：</p>
<p>1.从起点出发，到达所有<strong>邻接点</strong>的走法已知；</p>
<p>2.到达<strong>次邻接点</strong>的走法为从<strong>邻接点</strong>到<strong>次邻接点</strong>的走法之和；</p>
<p>3.到达终点的走法为从<strong>终点邻接点</strong>到终点的走法之和；</p>
<p>实例：</p>
<img src="/2024/04/25/Algo-Learning-Record/image-20240426101614103.png" class="" title="image-20240426101614103">

<p>递归</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pathsCount</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="comment">//到达起点</span></span><br><span class="line">    <span class="keyword">if</span>(m == <span class="number">1</span> || n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//从终点前进</span></span><br><span class="line">    <span class="keyword">return</span> pathsCount(m - <span class="number">1</span>, n) + pathsCount(m , n -<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DP</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pathsCounts</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//初始化起点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span> || j == <span class="number">0</span>) &#123;</span><br><span class="line">                dp[i][j] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//从起点前进</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            dp[i][j] = dp[i-<span class="number">1</span>][j] + dp[i][j-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//到达终点</span></span><br><span class="line">    <span class="keyword">return</span> dp[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="有权图两点间最大路径"><a href="#有权图两点间最大路径" class="headerlink" title="有权图两点间最大路径"></a>有权图两点间<strong>最大路径</strong></h3><p>递归思路：</p>
<p>1.从终点出发，存在多个选择，每个选择为分支，<strong>传入递归函数</strong>并进入；取得递归结果取最大。</p>
<p>2.对于每一个中间态，存在多个选择，<strong>传入递归函数</strong>并进入；</p>
<p>3.到达起点，当前递归结束，返回当前节点值；</p>
<p>DP思路：</p>
<p>1.从起点出发，到达所有<strong>邻接点</strong>的距离可知；</p>
<p>2.到达<strong>次邻接点</strong>的最大距离为从<strong>邻接点</strong>到<strong>次邻接点</strong>的最大距离；</p>
<p>3.到达终点的走法为从<strong>终点邻接点</strong>到终点的最大距离；</p>
<p>实例：</p>
<img src="/2024/04/25/Algo-Learning-Record/image-20240426102031155.png" class="" title="image-20240426102031155">

<p>递归</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minPathSum</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line">    <span class="comment">//从终点前进</span></span><br><span class="line">    <span class="keyword">return</span> getMin(grid, m-<span class="number">1</span>, n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getMin</span><span class="params">(<span class="type">int</span>[][] grid, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="comment">//到达起点</span></span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> grid[i][j] + getMin(grid, i, j-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> grid[i][j] + getMin(grid, i-<span class="number">1</span>, j);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">minRow</span> <span class="operator">=</span> getMin(grid, i-<span class="number">1</span>, j);</span><br><span class="line">    <span class="type">int</span> <span class="variable">minColumn</span> <span class="operator">=</span> getMin(grid, i, j-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> grid[i][j] + Math.min(minRow, minColumn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DP</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minPathSum</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//初始化起点</span></span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m ;i++) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = dp[i-<span class="number">1</span>][<span class="number">0</span>] + grid[i][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n;i++) &#123;</span><br><span class="line">        dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i-<span class="number">1</span>] + grid[<span class="number">0</span>][i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从起点前进</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            dp[i][j] = grid[i][j] + Math.min(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//到达终点</span></span><br><span class="line">    <span class="keyword">return</span> dp[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇博客</title>
    <url>/2024/04/11/first_post/</url>
    <content><![CDATA[<p>写一个测试试一下</p>
<p>数学公式测试：$r_n&#x3D;W_n\log_2\left(1+\frac{P_nd_n^{-\beta}h_n^2}{N_0+I_n}\right)$</p>
<p>$$t_n^{loc}&#x3D;\frac{(1-\rho_n)C_n}{f_n}$$</p>
]]></content>
  </entry>
  <entry>
    <title>pic_test</title>
    <url>/2024/04/12/pic-test/</url>
    <content><![CDATA[<p>图片插入测试：</p>
<img src="/2024/04/12/pic-test/img.png" class="">]]></content>
  </entry>
  <entry>
    <title>Op_sys Learning Record</title>
    <url>/2024/04/12/Op-sys-Learning-Record/</url>
    <content><![CDATA[<p>操作系统相关学习记录</p>
<span id="more"></span>



<h1 id="Op-sys-learning-record"><a href="#Op-sys-learning-record" class="headerlink" title="Op_sys_learning_record"></a>Op_sys_learning_record</h1><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><p>QEMU：近似模拟硬件SiFiveFU540-C000主板(RISC-V,64 bit register, 56 bit physical memory)</p>
<p>intel 8086：20根地址线，16位寄存器</p>
<h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><p>XV6：操作系统</p>
<p><a href="https://github.com/seaswalker/tiny-os">tiny-os</a></p>
<h2 id="系统启动"><a href="#系统启动" class="headerlink" title="系统启动"></a>系统启动</h2><h3 id="基础信息"><a href="#基础信息" class="headerlink" title="基础信息"></a>基础信息</h3><h4 id="物理地址空间"><a href="#物理地址空间" class="headerlink" title="物理地址空间"></a>物理地址空间</h4><p>20根地址线，16位寄存器，可访问1MB的内存空间</p>
<p>0x00000-0x9FFFF: DRAM</p>
<p>0xF0000-0xFFFFF: ROM，BIOS代码位置</p>
<p>通过段寄存器左移4位+偏移地址</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240413150024273.png" class="" title="image-20240413150024273">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240417110651232.png" class="" title="image-20240417110651232">





<h4 id="SiFive-FU540物理地址空间"><a href="#SiFive-FU540物理地址空间" class="headerlink" title="SiFive FU540物理地址空间"></a>SiFive FU540物理地址空间</h4><p>物理地址0x80000000以前的部分由主板上非DRAM组成（例如：boot ROM，PLIC等）</p>
<p>物理地址对应的硬件（图例为SiFive主板，仅截取部分，物理地址0x80000000以前的部分非DRAM）</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240413150852809.png" class="" title="image-20240413150852809">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240412184947166.png" class="" title="image-20240412184947166">



<h4 id="显存地址空间"><a href="#显存地址空间" class="headerlink" title="显存地址空间"></a>显存地址空间</h4><p>0xB8000-0xBFFFF为显存中字符显示部分，默认模式为80个字符*25行，一个字符2字节表示</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240420184138573.png" class="" title="image-20240420184138573">





<h4 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h4><p>不可见寄存器</p>
<p>GDTR	全局描述符表寄存器</p>
<p>IDTR	中断描述符表寄存器</p>
<p>LDTR	局部描述符表寄存器</p>
<p>TR	任务寄存器</p>
<p>CR0~3	控制寄存器</p>
<p>IP	指令指针寄存器</p>
<p>flags	标志寄存器</p>
<p>DR0~3	调试寄存器</p>
<p>可见寄存器</p>
<p>通用寄存器，可直接访问</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240420144227413.png" class="" title="image-20240420144227413">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240420144655049.png" class="" title="image-20240420144655049">

<p>段寄存器，段基址*16+偏移</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240420144356905.png" class="" title="image-20240420144356905">



<p>32位与16位</p>
<p>32位地址总线，32位寄存器</p>
<p>寄存器组</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240416185859023.png" class="" title="image-20240416185859023">

<p>通用寄存器组，Eflag和EIP变为32位</p>
<p>段寄存器仍为16位宽！！内容为段选择子</p>
<h4 id="Intel语法风格"><a href="#Intel语法风格" class="headerlink" title="Intel语法风格"></a>Intel语法风格</h4><p>右 -&gt; 左</p>
<p>实模式</p>
<p>段内偏移默认基于DS进行偏移</p>
<p>基址寄存器：bx寄存器默认基于DS进行偏移，bp寄存器默认基于SS进行偏移</p>
<p>变址寄存器：si寄存器和di寄存器默认基于ds进行偏移</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax, [0x1234]	;取DS*16+0x1234处的值赋给ax</span><br><span class="line"></span><br><span class="line">add [bx], 0x1234	;将0x1234赋给内存中DS*16+bx处</span><br><span class="line"></span><br><span class="line">mov ax, [fs:0x5678]	;显式指定使用gs寄存器作为段基址，将gs*16+0x5678的值赋给ax</span><br><span class="line"></span><br><span class="line">mov byte [gs:0x01], &#x27;M&#x27;	;显式指定使用gs段寄存器作为段基址，指定操作数为1字节，向gs*16+0x01的位置写入1字节的数据&#x27;M&#x27;</span><br><span class="line"></span><br><span class="line">mov ax, [sp]	;将sp指向的值赋给ax</span><br><span class="line"></span><br><span class="line">mov ax, [bp+4]	;将SS*16+bp+4处的值赋给ax</span><br><span class="line"></span><br><span class="line">mov [di], ax	;将ax的值写入DS*16+di处</span><br><span class="line"></span><br><span class="line">mov [si+0x1234], ax	;将ax的值写入DS*16+si+0x1234处</span><br><span class="line"></span><br><span class="line">mov [bx+di], ax	;将ax的值写入DS*16+bx+di</span><br><span class="line"></span><br><span class="line">jump $	; $符号表示当前行，该语句为跳转至当前行；$$为当前section</span><br><span class="line"></span><br><span class="line">;-----------------------stdcall调用约定------------------------</span><br><span class="line">push 2</span><br><span class="line">push 3	;从右往左将传入参数压栈</span><br><span class="line">call subtract	;将当前eip压栈，跳转至被调函数地址开始执行</span><br><span class="line"></span><br><span class="line">push ebp	;压栈保存原ebp，</span><br><span class="line">mov ebp, esp	;更新栈帧基址，进入新栈帧</span><br><span class="line"></span><br><span class="line">mov eax, [ebp+0x8]</span><br><span class="line">mov eax, [ebp+0xc]</span><br><span class="line"></span><br><span class="line">mov esp, ebp</span><br><span class="line"></span><br><span class="line">pop ebp	;弹出栈顶保存的原ebp值到ebp</span><br><span class="line">ret 8	;弹出栈顶地址到eip(弹栈使得esp自加4)，esp+8(移除压栈的传入参数)</span><br><span class="line">;-------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">;-----------------------cdecl调用约定--------------------------</span><br><span class="line">push 2</span><br><span class="line">push 3	;从右往左将传入参数压栈</span><br><span class="line">call subtract	;将当前eip压栈，跳转至被调函数地址开始执行</span><br><span class="line">add esp, 8	;清栈，移除传入参数</span><br><span class="line"></span><br><span class="line">push ebp	;压栈保存原ebp，进入新栈帧</span><br><span class="line">mov ebp, esp</span><br><span class="line"></span><br><span class="line">mov eax, [ebp+0x8]</span><br><span class="line">mov eax, [ebp+0xc]</span><br><span class="line"></span><br><span class="line">mov esp, ebp</span><br><span class="line"></span><br><span class="line">pop ebp	;弹出栈顶保存的原ebp值到ebp</span><br><span class="line">ret	;弹出栈顶地址到eip(弹栈使得esp自加4)，esp+8(移除压栈的传入参数)</span><br><span class="line">;-------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">section .data	;section为伪指令，面向程序员的跳转记号</span><br><span class="line">	var dd 0</span><br><span class="line">	str: dd &quot;hello&quot;, 0xa, 0</span><br><span class="line"></span><br><span class="line">section .text</span><br><span class="line">extern c_print	;导入外部函数 c_print</span><br><span class="line">global _start	;将函数_start导出为全局符号，供外部文件调用</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line">	push str</span><br><span class="line">	jmp $$</span><br></pre></td></tr></table></figure>

<p>SS为栈底，bp为当前帧底</p>
<p>保护模式</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240420193121630.png" class="" title="image-20240420193121630">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240420195137241.png" class="" title="image-20240420195137241">



<p>segment与section</p>
<p>section称为节，是指在汇编源码中经由关键字section或segment修饰、逻辑划分的指令或数据区域，汇编器会将这两个关键字修饰的区域在目标文件中编译成节，也就是说“节”最初诞生于目标文件中。</p>
<p>segment称为段，是链接器根据目标文件中属性相同的多个section合并后的section集合，这个集合称为segment，也就是段，链接器把目标文件链接成可执行文件，因此段最终诞生于可执行文件中。我们平时所说的可执行程序内存空间中的代码段和数据段就是指的segment。</p>
<h4 id="AT-T语法风格"><a href="#AT-T语法风格" class="headerlink" title="AT&amp;T语法风格"></a>AT&amp;T语法风格</h4><p>左 -&gt; 右</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">movl %eax, immed32(%ebx, %esi,2)	</span><br><span class="line">	#将eax的值写入内存immed32+ebx+esi*2处</span><br><span class="line">	#()括号表示取内的值作为内存地址</span><br><span class="line">	#寄存器前必须有%</span><br><span class="line"></span><br><span class="line">movl $123, %eax	#将立即数123写入寄存器eax</span><br><span class="line"></span><br><span class="line">andl %ebx, %ecx #对寄存器 %ebx 和 %ecx 的内容执行按位与操作，并将结果存储到 %ecx 寄存器中。</span><br><span class="line"></span><br><span class="line">xchgl %eax, (%esp) #交换寄存器eax和栈顶位置的值</span><br><span class="line"></span><br><span class="line">popl %eax #指从栈顶弹出数据，并将弹出的数据写入 %eax 寄存器。</span><br><span class="line"></span><br><span class="line">ret #弹出栈顶值写入PC</span><br><span class="line">iret #弹出eip并写入，弹出cs并写入，弹出eflags并写入</span><br></pre></td></tr></table></figure>



<p>内联汇编</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">asm</span> [<span class="keyword">volatile</span>] (<span class="string">&quot;&quot;</span>)	<span class="comment">//volatile为可选项，表示此处代码不得修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">asm</span> (<span class="string">&quot;movl $9, %eax;&quot;</span> <span class="string">&quot;pushl %eax&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">asm</span> [<span class="keyword">volatile</span>] (<span class="string">&quot;&quot;</span>:<span class="string">&quot;&quot;</span>(output) :<span class="string">&quot;&quot;</span>(input) :clobber/modify)</span><br><span class="line">	<span class="comment">//&quot;&quot; 内部为汇编代码</span></span><br><span class="line">    <span class="comment">//output, input为c变量，它们前面的&quot;&quot;为约束</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">asm</span> (<span class="string">&quot;addl %%ebx, %%eax;&quot;</span>:<span class="string">&quot;=a&quot;</span>(out_sum):<span class="string">&quot;a&quot;</span>(in_a),<span class="string">&quot;b&quot;</span>(in_b))</span><br><span class="line">	<span class="comment">//&quot;a&quot;为约束名，约束c语言变量in_a使用寄存器eax</span></span><br><span class="line">	<span class="comment">//&quot;b&quot;为约束名，约束c语言变量in_b使用寄存器ebx</span></span><br><span class="line">	<span class="comment">//&quot;=a&quot;为约束名，将寄存器eax的值写入c语言变量out_sum</span></span><br><span class="line">	<span class="comment">//=为只写，+为读写，&amp;为独占所约束的寄存器</span></span><br><span class="line">	<span class="comment">//由于扩展内联汇编中，%0为占位符符号，故修改寄存器表示为%%eax</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">asm</span> (<span class="string">&quot;movb %0 %1;&quot;</span>::<span class="string">&quot;a&quot;</span>(in_a),<span class="string">&quot;m&quot;</span>(in_b))</span><br><span class="line">	<span class="comment">//&quot;a&quot;为约束名，约束c语言变量in_a使用寄存器eax</span></span><br><span class="line">	<span class="comment">//&quot;m&quot;为约束名，使用c语言变量in_b的内存地址</span></span><br><span class="line">	<span class="comment">//%0,%1为序号占位符，所有input和output从左至右被标序号，这里对应in_a, in_b</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">asm</span> (<span class="string">&quot;divb %[divisor]; movb %%al, %[result]&quot;</span>\</span><br><span class="line">		:[result]<span class="string">&quot;=m&quot;</span>(out)\</span><br><span class="line">		:<span class="string">&quot;a&quot;</span>(in_a),[divisor]<span class="string">&quot;m&quot;</span>(in_b)\</span><br><span class="line">		);</span><br><span class="line">	<span class="comment">//[divisor]为in_b的内存地址，通过%[divisor]获取内存的值</span></span><br><span class="line">	<span class="comment">//[result]为out的内存地址，</span></span><br></pre></td></tr></table></figure>



<h4 id="C-C-相关"><a href="#C-C-相关" class="headerlink" title="C&#x2F;C++ 相关"></a>C&#x2F;C++ 相关</h4><p><strong>宏函数</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SQUARE(x) ((x) * (x))</span></span><br><span class="line"><span class="comment">//  (x) * (x)外的一层括号是为了展开时不改变运输优先级</span></span><br><span class="line"><span class="comment">// 对比 </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADD(x) (x) + (x)</span></span><br><span class="line"><span class="comment">// 在使用 4 / ADD(2) 时，展开式</span></span><br><span class="line"><span class="comment">// 4 / (2) * (2) 导致运算优先级错误</span></span><br><span class="line"><span class="comment">// 对比 </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SQUARE(x) x * x</span></span><br><span class="line"><span class="comment">// 在使用 SQUARE(2 + 3) 时，展开式</span></span><br><span class="line"><span class="comment">// 2 + 3 * 2 + 3 导致运算优先级错误</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_FUNC(x) &#123; \</span></span><br><span class="line"><span class="meta">    int result = (x) * 2; \</span></span><br><span class="line"><span class="meta">    printf(<span class="string">&quot;result: %d\n&quot;</span>, result); \</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="comment">// 使用 &#123;&#125; 可以为宏函数创建一个独立的作用域，避免宏函数内部定义的变量与外部代码中的变量发生冲突。</span></span><br><span class="line"><span class="comment">// 故在使用宏函数的时候使用括号 #define func() (&#123;函数体&#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 宏函数</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a, b) ((a) &gt; (b) ? (a) : (b))</span></span><br><span class="line"><span class="comment">//预处理器会将代码中所有出现宏函数名的地方，替换成宏函数定义的代码段。文本替换</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>内联函数</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 宏函数</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a, b) ((a) &gt; (b) ? (a) : (b))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 内联函数</span></span><br><span class="line"><span class="keyword">inline</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//内联函数在编译阶段由编译器决定是否进行内联展开。如果编译器认为函数体积较小，且调用频率较高，就会将函数代码直接插入到调用点，不使用函数调用的方式。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//MAX 是一个宏函数，而 max 是一个内联函数。两者都可以用来计算两个数的最大值，但 max 函数更安全，因为它有类型检查，并且不会造成变量名污染。</span></span><br></pre></td></tr></table></figure>



<p><strong>const与const_cast&lt;&gt;()</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> <span class="type">const</span></span>;	<span class="comment">//该const声明此函数不会修改调用该函数的对象</span></span><br><span class="line"><span class="comment">//例如</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">Complex</span>(<span class="type">double</span> real, <span class="type">double</span> imag) : <span class="built_in">real_</span>(real), <span class="built_in">imag_</span>(imag) &#123;&#125; <span class="comment">// 构造函数初始化列表，冒号标志着初始化列表的开始，将构造函数参数 real 的值赋给成员变量 real_</span></span><br><span class="line">    </span><br><span class="line">    Complex <span class="keyword">operator</span>+(<span class="type">const</span> Complex&amp; other) <span class="type">const</span> &#123;  <span class="comment">// 版本1: const 成员函数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Complex</span>(real_ + other.real_, imag_ + other.imag_);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Complex <span class="keyword">operator</span>+(<span class="type">const</span> Complex&amp; other) &#123;       <span class="comment">// 版本2: 非 const 成员函数</span></span><br><span class="line">        real_ += other.real_; <span class="comment">// 修改了调用该函数的对象</span></span><br><span class="line">        imag_ += other.imag_;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">  		<span class="type">double</span> real_;</span><br><span class="line">  		<span class="type">double</span> imag_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1.0</span>, <span class="number">2.0</span>)</span></span>;</span><br><span class="line">    <span class="function">Complex <span class="title">c2</span><span class="params">(<span class="number">3.0</span>, <span class="number">4.0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    c1 = c1 + c2;  <span class="comment">// 调用版本1或版本2都可以</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> Complex <span class="title">c3</span><span class="params">(<span class="number">5.0</span>, <span class="number">6.0</span>)</span></span>;</span><br><span class="line">    c3 = c3 + c2;  <span class="comment">// 只能调用版本1 (const 成员函数)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>;	<span class="comment">//该函数返回值为const</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">   <span class="built_in">A</span>()  </span><br><span class="line">   &#123;  </span><br><span class="line">      m_iNum = <span class="number">1</span>;  </span><br><span class="line">   &#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">   <span class="type">int</span> m_iNum;  </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span>    </span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">   <span class="comment">//1. 指针指向类    </span></span><br><span class="line">   <span class="type">const</span> A *pca1 = <span class="keyword">new</span> A;    </span><br><span class="line">   A *pa2 = <span class="built_in">const_cast</span>&lt;A*&gt;(pca1);  <span class="comment">//常量指针转换为非常量指针    </span></span><br><span class="line">   pa2-&gt;m_iNum = <span class="number">200</span>;    <span class="comment">//fine    </span></span><br><span class="line">       </span><br><span class="line">   <span class="comment">//转换后指针指向原来的对象    </span></span><br><span class="line">   cout&lt;&lt; pca1-&gt;m_iNum &lt;&lt;pa2-&gt;m_iNum&lt;&lt;endl; <span class="comment">//200 200    </span></span><br><span class="line">        </span><br><span class="line">   <span class="comment">//2. 指针指向基本类型    </span></span><br><span class="line">   <span class="type">const</span> <span class="type">int</span> ica = <span class="number">100</span>;    </span><br><span class="line">   <span class="type">int</span> * ia = <span class="built_in">const_cast</span>&lt;<span class="type">int</span> *&gt;(&amp;ica);    </span><br><span class="line">   *ia = <span class="number">200</span>;    </span><br><span class="line">   cout&lt;&lt; *ia &lt;&lt;ica&lt;&lt;endl;   <span class="comment">//200 100  </span></span><br><span class="line">    </span><br><span class="line">   A a0;  </span><br><span class="line">   <span class="type">const</span> A &amp;a1 = a0;  </span><br><span class="line">   A a2 = <span class="built_in">const_cast</span>&lt;A&amp;&gt;(a1);　<span class="comment">//常量引用转为非常量引用</span></span><br><span class="line">  </span><br><span class="line">   a2.m_iNum = <span class="number">200</span>;    <span class="comment">//fine    </span></span><br><span class="line">  </span><br><span class="line">   cout&lt;&lt; a0.m_iNum &lt;&lt; a1.m_iNum &lt;&lt; a2.m_iNum &lt;&lt; endl; <span class="comment">//1 1 200    </span></span><br><span class="line">    </span><br><span class="line">   <span class="comment">//常量对象被转换成非常量对象时出错  </span></span><br><span class="line">   <span class="type">const</span> A ca;  </span><br><span class="line">   A a = <span class="built_in">const_cast</span>&lt;A&gt;(ca);  <span class="comment">//不允许</span></span><br><span class="line">   </span><br><span class="line">   <span class="type">const</span> <span class="type">int</span> i = <span class="number">100</span>;  </span><br><span class="line">   <span class="type">int</span> j = <span class="built_in">const_cast</span>&lt;<span class="type">int</span>&gt;(i);  <span class="comment">//不允许 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><strong>static_cast&lt;??&gt;(obj)</strong>:<ul>
<li>用于<strong>相关类型</strong>之间的转换，例如：<ul>
<li>基本类型转换 (int 到 float，double 到 int 等)</li>
<li>void 指针和其他指针类型之间的转换</li>
<li>向上转型 (派生类指针&#x2F;引用到基类指针&#x2F;引用)</li>
<li>向下转型 (基类指针&#x2F;引用到派生类指针&#x2F;引用，<strong>需要程序员保证安全性</strong>)</li>
</ul>
</li>
<li>编译时检查类型，不安全的操作可能导致未定义行为。</li>
<li>将obj转换为<code>&lt;??&gt;</code>类型</li>
</ul>
</li>
<li><strong>dynamic_cast</strong>:<ul>
<li>用于<strong>多态类型</strong>之间的<strong>安全向下转型</strong> (基类指针&#x2F;引用到派生类指针&#x2F;引用)。</li>
<li>运行时检查类型，失败时返回 nullptr (指针) 或抛出 std::bad_cast 异常 (引用)。</li>
<li>要求基类至少有一个虚函数。</li>
</ul>
</li>
<li><strong>const_cast</strong>:<ul>
<li>用于<strong>移除或添加 const 和 volatile 限定符</strong>。</li>
<li>不会改变对象本身的常量性，只是告诉编译器不要进行常量性检查。</li>
<li>如果修改了实际为常量的对象，会导致未定义行为。</li>
</ul>
</li>
<li><strong>reinterpret_cast</strong>:<ul>
<li>用于<strong>底层类型转换</strong>，例如：<ul>
<li>将指针转换为整数</li>
<li>将整数转换为指针</li>
<li>将一个指针转换为另一个不相关的指针类型</li>
</ul>
</li>
<li>非常危险，应该尽量避免使用。</li>
</ul>
</li>
</ul>
</blockquote>
<p><strong>函数指针</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">greet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello from greet function!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// returnType (*pointerName)(parameter1Type, parameter2Type, ...);</span></span><br><span class="line"><span class="built_in">void</span> (*ptr)() = greet; <span class="comment">// 定义函数指针并初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两种调用方式是等效的</span></span><br><span class="line"><span class="built_in">ptr</span>();         <span class="comment">// 简洁写法，ptr实际为地址</span></span><br><span class="line">(*ptr)();     <span class="comment">// 更明确的写法，强调解引用</span></span><br><span class="line">(<span class="type">void</span> *)<span class="number">1234</span>	<span class="comment">//表示一个未知类型的地址</span></span><br><span class="line">(<span class="built_in">void</span> (*)())<span class="number">1234</span>  <span class="comment">//将1234强制类型转换为函数指针（函数的地址</span></span><br><span class="line">(*((<span class="built_in">void</span> (*)())<span class="number">1234</span>))()  <span class="comment">//调用位于地址1234处的函数</span></span><br></pre></td></tr></table></figure>



<p><strong>虚函数与纯虚函数</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">makeSound</span><span class="params">()</span> </span>&#123;  <span class="comment">// 普通虚函数，有默认实现；必须声明为虚才可以在子类中重写</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Animal making sound\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> : <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">makeSound</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; <span class="comment">// 重写基类的虚函数,可以不重写</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Woof!\n&quot;</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;  <span class="comment">// 一个类中可同时存在虚和非虚函数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">draw</span><span class="params">()</span> </span>= <span class="number">0</span>;  <span class="comment">// 纯虚函数，没有函数体</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printDescription</span><span class="params">()</span> </span>&#123;  <span class="comment">// 非虚函数</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;This is a shape.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> : <span class="keyword">public</span> Shape &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;  <span class="comment">// 派生类必须实现 draw() 函数</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Drawing a circle.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VShape</span> &#123; <span class="comment">// 含纯虚函数即不可实例化</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="comment">// ... </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">draw</span><span class="params">()</span> </span>= <span class="number">0</span>; <span class="comment">// 纯虚函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123; <span class="comment">// 非抽象类，包含虚函数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="comment">// ... </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Shape* s = new Shape();  // 错误：无法实例化抽象类</span></span><br><span class="line">    Shape* c = <span class="keyword">new</span> <span class="built_in">Circle</span>();    <span class="comment">// 正确</span></span><br><span class="line"></span><br><span class="line">    Rectangle r;               <span class="comment">// 正确：非抽象类可以实例化</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span> c;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>继承与初始化列表</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// :: 双冒号 作用域解析运算符</span></span><br><span class="line"><span class="comment">// : 单冒号 继承/初始化列表/标签/三目运算符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 C++ 中，当子类继承父类时，子类对象创建过程中会自动调用父类的构造函数。在 C++ 多继承情况下，子类对象创建时会调用所有直接父类的构造函数。</span></span><br><span class="line"><span class="comment">// 如果父类有默认构造函数(即没有参数的构造函数)： 子类可以不显式调用父类构造函数，编译器会自动调用默认构造函数。如果父类没有默认构造函数： 子类必须在初始化列表中显式调用父类构造函数并传递参数。</span></span><br><span class="line"><span class="comment">// 在 Java 中，子类构造函数不会自动调用父类的构造函数，需要程序员显式地使用 super() 方法来调用父类的构造函数，并通过传参的不同，调用不同的构造函数。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>: <span class="keyword">public</span> ClassA, <span class="keyword">public</span> ClassB  &#123;  <span class="comment">// 公有继承于ClassA和ClassB</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Person</span>(<span class="type">const</span> std::string&amp; name, <span class="type">int</span> age) : <span class="built_in">a</span>(age),  <span class="built_in">n</span>(name) &#123;&#125;  <span class="comment">// 初始化列表，成员变量的初始化顺序与其在类定义中声明的顺序一致。编译器会按照成员变量在类定义中出现的顺序依次进行初始化，即使你在初始化列表中以不同的顺序列出它们。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:  <span class="comment">// 按照这里的顺序初始化成员变量，即先初始化n，后初始化a</span></span><br><span class="line">  std::string n;</span><br><span class="line">  <span class="type">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量名(值)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Base1</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;Base1 default constructor called.\n&quot;</span>; &#125;  <span class="comment">// 默认构造函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Base2</span>(<span class="type">int</span> value) : <span class="built_in">m_value</span>(value) &#123;&#125; <span class="comment">// 没有默认构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">int</span> m_value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base1, <span class="keyword">public</span> Base2 &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Derived</span>() &#123;  &#125; <span class="comment">// 没有显式调用父类构造函数，报错</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived2</span> : <span class="keyword">public</span> Base1, <span class="keyword">public</span> Base2 &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Derived</span>(<span class="type">int</span> value) : <span class="built_in">Base2</span>(value) &#123;&#125; <span class="comment">// 显式调用 Base2 的构造函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p><strong>static与内部类</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// c++没有静态类的概念，直接使用static声明类的成员函数/变量即可。相似的，可以在没有实例化类的情况下直接调用方法/访问变量</span></span><br><span class="line"><span class="comment">// c++的内部类和普通类无区别</span></span><br><span class="line"><span class="comment">// java只有内部类可以是静态的；静态内部类可以有（非静态的变量和方法）和（静态的变量和方法）</span></span><br><span class="line"><span class="comment">// java普通内部类不能有静态变量/方法！！！</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> staticVar; <span class="comment">// 静态数据成员声明</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">staticMethod</span><span class="params">()</span> </span>&#123; <span class="comment">// 静态成员函数</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;This is a static method.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> MyClass::staticVar = <span class="number">10</span>; <span class="comment">// 静态数据成员定义和初始化</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyClass::<span class="built_in">staticMethod</span>(); <span class="comment">// 直接调用静态成员函数</span></span><br><span class="line">    std::cout &lt;&lt; MyClass::staticVar &lt;&lt; std::endl; <span class="comment">// 直接访问静态数据成员</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> outerVar = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内部类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">// 静态成员</span></span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> staticVar;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 非静态成员</span></span><br><span class="line">        <span class="type">int</span> instanceVar;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 静态方法</span></span><br><span class="line">        <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">staticMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Static method in inner class&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 非静态方法</span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">instanceMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Instance method in inner class&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">accessOuterClass</span><span class="params">(OuterClass&amp; outer)</span> </span>&#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Accessing outer class variable: &quot;</span> &lt;&lt; outer.outerVar &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态成员初始化</span></span><br><span class="line"><span class="type">int</span> OuterClass::InnerClass::staticVar = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    OuterClass outer;</span><br><span class="line">    OuterClass::InnerClass inner;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用静态方法</span></span><br><span class="line">    OuterClass::InnerClass::<span class="built_in">staticMethod</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用非静态方法</span></span><br><span class="line">    inner.<span class="built_in">instanceMethod</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 访问外部类成员</span></span><br><span class="line">    inner.<span class="built_in">accessOuterClass</span>(outer);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>默认构造函数</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 显然，我们并没有显式的定义构造函数，但是即使没有显式地定义构造函数，C++ 也会提供一个默认构造函数。默认构造函数会将类的成员变量初始化为默认值 (例如，数字类型初始化为 0，指针类型初始化为 nullptr)。</span></span><br><span class="line">    <span class="type">int</span> value;  <span class="comment">// value被默认构造函数初始化为0</span></span><br><span class="line"></span><br><span class="line">    <span class="function">MyClass* <span class="title">createInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">MyClass</span>(); <span class="comment">// 使用指针创建实例</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyClass obj1;  <span class="comment">// obj1通过调用了默认构造函数对其进行了初始化，不为null</span></span><br><span class="line">    </span><br><span class="line">    MyClass* obj2 = obj1.<span class="built_in">createInstance</span>(); <span class="comment">// 通过obj1指针创建实例</span></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Address of obj1: &quot;</span> &lt;&lt; <span class="built_in">static_cast</span>&lt;<span class="type">void</span>*&gt;(&amp;obj1) &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// 本机测试 Address of obj1: 0x61fe14</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;obj2 value: &quot;</span> &lt;&lt; obj2-&gt;value &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> obj2;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>菱形继承与虚继承</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">int</span> x) : <span class="built_in">data</span>(x) &#123; </span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;A constructor called with &quot;</span> &lt;&lt; data &lt;&lt; std::endl; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 虚继承不会改变成员继承规则，派生类仍然会继承虚基类的所有成员。</span></span><br><span class="line"><span class="comment">// 虚继承A类时，A类相当于成为了一个共享类，其他所有再进行虚继承A类时，均只会继承该共享类，不会出现二义性继承（即D类继承了两个A类）。</span></span><br><span class="line"><span class="comment">// 个人理解：类B普通继承类A时，B中相当于加了个A；如果类C普通继承类A，类D普通继承类B，C时，D中相当于有了两个实A，出现二义性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同理，当B类虚继承A，C类继承A，D类继承B，C时，类D相当于有了一个虚A一个实A，ダメです。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> <span class="keyword">virtual</span> A &#123; <span class="comment">// 虚继承</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>(<span class="type">int</span> x) : <span class="built_in">A</span>(x) &#123; </span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;B constructor called&quot;</span> &lt;&lt; std::endl; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> : <span class="keyword">public</span> <span class="keyword">virtual</span> A &#123; <span class="comment">// 虚继承</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">C</span>(<span class="type">int</span> x) : <span class="built_in">A</span>(x) &#123; </span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;C constructor called&quot;</span> &lt;&lt; std::endl; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下方式继承会让D继承到两个A，编译通过，但是A的构造函数触发两次</span></span><br><span class="line"><span class="comment">// 尝试打印A中的data变量，报错：&quot;D::data&quot; is ambiguous</span></span><br><span class="line"><span class="comment">//class C : public A &#123;</span></span><br><span class="line"><span class="comment">//public:</span></span><br><span class="line"><span class="comment">//    C(int x) : A(x) &#123; </span></span><br><span class="line"><span class="comment">//        std::cout &lt;&lt; &quot;C constructor called&quot; &lt;&lt; std::endl; </span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> : <span class="keyword">public</span> B, <span class="keyword">public</span> C &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">D</span>(<span class="type">int</span> x) : <span class="built_in">A</span>(x), <span class="built_in">B</span>(x), <span class="built_in">C</span>(x) &#123;  <span class="comment">// 直接初始化虚基类 A</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;D constructor called&quot;</span> &lt;&lt; std::endl; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">D <span class="title">d</span><span class="params">(<span class="number">10</span>)</span></span>; </span><br><span class="line">    std::cout &lt;&lt; d.data &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>模板</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 头文件: my_template_class.h</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTemplateClass</span> &#123;  <span class="comment">// 类模板</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> T&amp; value)</span></span>;</span><br><span class="line">  <span class="function">T <span class="title">getValue</span><span class="params">()</span> <span class="type">const</span></span>; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 源文件: my_template_class.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;my_template_class.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// template &lt;typename T&gt; 作用域极小，只有紧接着的函数/类中</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="comment">// 为 print 函数声明模板参数，即 print 函数为模板函数</span></span><br><span class="line"><span class="type">void</span> MyTemplateClass&lt;T&gt;::<span class="built_in">print</span>(<span class="type">const</span> T&amp; value) &#123; <span class="comment">// 为模板类 MyTemplateClass&lt;T&gt; 定义 print</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果写成 MyTemplateClass::print，编译器会认为正在为非模板类 MyTemplateClass 的某个模板成员函数进行定义。</span></span><br><span class="line"><span class="comment">//1.由于不存在该非模板类，报错。2.非模板类不能包含模板函数: 非模板类只能包含非模板函数，不能包含模板函数。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="comment">// 为 getValue 函数声明模板参数，即 getValue 函数为模板函数</span></span><br><span class="line">T MyTemplateClass&lt;T&gt;::<span class="built_in">getValue</span>() <span class="type">const</span> &#123; <span class="comment">// 为 MyTemplateClass&lt;T&gt; 定义 getValue</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>栈上创建与堆上创建</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 栈上创建</span></span><br><span class="line"><span class="function">MyTemplateClass&lt;<span class="type">int</span>&gt; <span class="title">intObject1</span><span class="params">(<span class="number">10</span>)</span></span>;  <span class="comment">// 变量名intObject1，值10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量名(值)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 堆上创建</span></span><br><span class="line">MyTemplateClass&lt;<span class="type">int</span>&gt;* intObject2 = <span class="keyword">new</span> <span class="built_in">MyTemplateClass</span>&lt;<span class="type">int</span>&gt;(<span class="number">20</span>);</span><br></pre></td></tr></table></figure>



<h4 id="GDT-LDT与TSS"><a href="#GDT-LDT与TSS" class="headerlink" title="GDT, LDT与TSS"></a>GDT, LDT与TSS</h4><img src="/2024/04/12/Op-sys-Learning-Record/image-20240609174716552.png" class="" title="image-20240609174716552">

<p>硬件厂商推荐通过每个任务拥有一个LDT和一个TSS的方式实现多任务</p>
<p>eg: call 0x0018:0x1234 使用在GDT中索引0x0018的选择子获得段基址，偏移0x1234</p>
<blockquote>
<p>在使用中，段寄存器中的值将确定使用GDT&#x2F;LDT中的第x项</p>
</blockquote>
<h4 id="段描述符与门描述符区别"><a href="#段描述符与门描述符区别" class="headerlink" title="段描述符与门描述符区别"></a>段描述符与门描述符区别</h4><img src="/2024/04/12/Op-sys-Learning-Record/image-20240416192952163.png" class="" title="image-20240416192952163">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240417104649804.png" class="" title="image-20240417104649804">

<p>门 &#x3D; 选择子 + 偏移</p>
<p>选择子 &#x3D; 基址 + 偏移</p>
<p>IDT 保存 中断门</p>
<p>GDT&#x2F;LDT 保存 任务门&#x2F;描述符</p>
<h4 id="物理地址空间使用情况"><a href="#物理地址空间使用情况" class="headerlink" title="物理地址空间使用情况"></a>物理地址空间使用情况</h4><p>tiny-os kernel地址空间</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240421151156773.png" class="" title="image-20240421151156773">

<p>地址空间：</p>
<p>0x0009a000为位图起始地址，占4页</p>
<p>0x0009e000为内核PCB起始，占1页</p>
<p>​	0x0009f000为PCB中内核栈顶(低1M地址中所使用到的最高地址)</p>
<p>0x0009f000~0x00100000为空</p>
<p>0x00100000为内核堆起始，</p>
<p>​	0x00100000~0x00101fff为页目录表和页表</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240427095137775.png" class="" title="image-20240427095137775">



<p>SiFive FU540</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240412184838896.png" class="" title="image-20240412184838896.png">



<p>用户程序地址空间</p>
<p>虚拟地址：</p>
<p>KERNBASE &#x3D; 0x8000 0000</p>
<p>KERNLINK &#x3D; 0x8010 0000</p>
<p>KERNBASE+PHYSTOP &#x3D; 0x8E00 0000</p>
<p>DEVSPACE &#x3D; 0xFE00 0000</p>
<p>物理地址：</p>
<p>低1M部分：0 - 0x10 0000</p>
<p>部分内核数据+空闲空间（用户程序所分配的页表）：0x10 0000 - 0xE00 0000(PHYSTOP)</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240412200020614.png" class="" title="image-20240412200020614">

<p>用户程序虚拟内存内容</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240413095215393.png" class="" title="image-20240413095215393">



<p>Linux 0.11</p>
<p>虚拟地址空间使用情况</p>
<p>每个进程最大虚拟空间为64MB（巨大差异</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240706102456745.png" class="" title="image-20240706102456745">





<h4 id="会话session"><a href="#会话session" class="headerlink" title="会话session"></a>会话session</h4><p>进程通过fork创建新的子进程，进程与创建出的子进程同属一个进程组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> main.c | grep <span class="keyword">for</span> | more</span><br></pre></td></tr></table></figure>

<p>以上三个命令对应三个进程，同属于一个进程组，CTRL+C将中止该进程组的所有进程</p>
<p>Session为进程组的集合，用户通过tty登录后所有的命令(执行的程序)属于同一个session</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240609190505627.png" class="" title="image-20240609190505627">





<h3 id="引导启动程序"><a href="#引导启动程序" class="headerlink" title="引导启动程序"></a>引导启动程序</h3><h4 id="启动流程图"><a href="#启动流程图" class="headerlink" title="启动流程图"></a>启动流程图</h4><p>Linux</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240608151929426.png" class="" title="image-20240608151929426">



<h4 id="BIOS"><a href="#BIOS" class="headerlink" title="BIOS"></a>BIOS</h4><p>计算机启动时为实模式运行，20位地址线，仅能访问1MB空间</p>
<p>机器上电，cs:ip 初始化为 0xf000:0x1110；</p>
<p>CPU从0xffff0开始执行，执行至0xfffff处指令jump后跳转至 f000:e05b，BIOS主体代码所在处；</p>
<p>BIOS内容代码进行硬件检测（内存检测，显卡检测…），</p>
<p>在0x000-0x3ff处建立数据结构，中断向量表IVT，填写中断例程，</p>
<p>进行启动盘检测(0盘0道1扇区最后2个字节:55AA)，从硬盘0盘0道1扇区加载MBR至0x7c00后，跳转执行MBR。</p>
<h4 id="MBR"><a href="#MBR" class="headerlink" title="MBR"></a>MBR</h4><p>MBR占512字节（一个扇区），结尾内容为55AA。</p>
<p>MBR程序位于0x7c00</p>
<p>Linux: boot&#x2F;bootsect.s</p>
<p>bootsect程序(MBR)位于0x7c00，然后bootsect将自身复制到0x90000处，执行跳转至0x90000，使用0x9ff00为栈顶</p>
<p>bootsect将setup程序写入0x90200处，将system加载至0x10000处</p>
<p>​	ps:未直接加载内核至0x00000的原因是0x00000有中断向量表</p>
<p>tiny_os</p>
<p>MBR程序将loader程序写入0x90000处</p>
<h4 id="setup-loader"><a href="#setup-loader" class="headerlink" title="setup&amp;loader"></a>setup&amp;loader</h4><p>Linux: boot&#x2F;setup.s</p>
<p>使用实模式下的中断向量表读取机器数据（读取屏幕光标位置，读取扩展内存大小，读取显卡显示模式，检查显示方式并取参数，取硬盘0信息，取硬盘1信息，检查硬盘2信息），写入0x90000及以后处（覆盖bootsect）</p>
<p>将内核从0x10000<del>0x8ffff移动至0x00000</del>0x7ffff处，</p>
<p>开启A20地址线</p>
<p>修改控制寄存器CR0，进入保护模式</p>
<p>跳转至地址0x00000（通过段选择子2，偏移0转移）</p>
<p>临时gdt已通过data段形式实现在setup.s程序尾部</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240706144702481.png" class="" title="image-20240706144702481">



<p>tiny_os</p>
<p>loader程序位于0x90000，使用0x90000以下部分作为程序栈</p>
<p>loader设置gdt，进入保护模式，并在保护模式加载内核</p>
<h5 id="保护模式"><a href="#保护模式" class="headerlink" title="保护模式"></a>保护模式</h5><p>保护模式使机器从16位进入到32位，寻址方式变更为 基址+偏移</p>
<h6 id="段描述符与全局描述符表GDT"><a href="#段描述符与全局描述符表GDT" class="headerlink" title="段描述符与全局描述符表GDT"></a>段描述符与全局描述符表GDT</h6><p>段寄存器: cs, ds, …(16位寄存器)，保存选择子，即gdt&#x2F;ldt的index对于的值</p>
<p>选择子</p>
<p>RPL：特权等级；TI：选择GDT&#x2F;LDT；索引值：GDT&#x2F;LDT表中的第x个段描述符</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240416193845119.png" class="" title="image-20240416193845119">

<p>GDTR</p>
<p>保存GDT的物理地址，GDT的段描述符记录了各内存段的相关信息</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240416193617238.png" class="" title="image-20240416193617238">

<p>LDTR</p>
<p>保存LDT的内存地址，<strong>LDT必须在GDT中声明</strong>，通过GDT获得LDT内存地址后写入LDTR后使用LDT</p>
<p>GDT</p>
<p>item: 段描述符</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240416192952163.png" class="" title="image-20240416192952163">

<p>段基址：32位段基址；</p>
<p>段界限：对于数据段和代码段，段界限向高地址延申；对于栈，段界限向低地址延申；若偏移量超界错；段大小由 段界限*G 确定，</p>
<p>DPL：段特权级</p>
<p>S：是否系统段</p>
<p>TYPE：段类型</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240427102403905.png" class="" title="image-20240427102403905">



<p>段描述符缓冲寄存器</p>
<p>保存处理后的段描述符</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240420192623948.png" class="" title="image-20240420192623948">

<p>段描述符与内存段</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240427102456078.png" class="" title="image-20240427102456078">

<p>地址计算方式&#x3D;32位段基址+32段偏移</p>
<h5 id="保护模式的启动"><a href="#保护模式的启动" class="headerlink" title="保护模式的启动"></a>保护模式的启动</h5><p>Linux: boot&#x2F;setup.s</p>
<p>使用实模式下的中断向量表读取机器数据，写入0x90000处（覆盖bootsect）</p>
<p>整体下移内核至0x00000处，</p>
<p>设置临时ldt和gdt，加载ldtr和gdtr，开启A20地址线；</p>
<p>重新设备中断控制芯片8259A，设置硬件中断号为0x20 ~ 0x2f，修改CR0寄存器</p>
<p>进入保护模式，跳转至地址0x00000</p>
<p>tiny_os</p>
<p>loader程序位于0x90000，使用0x90000以下部分作为程序栈</p>
<p>1.构建GDT，<strong>GDT内容直接定义在loader内</strong></p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240427102121106.png" class="" title="image-20240427102121106">

<p>2.开启A20地址线</p>
<p>A20地址线：20位地址线的CPU自动发生地址回绕（20位段基址+16位段偏移所产生的超出1MB的部分）</p>
<p>32位地址线为了兼容20位地址线产生的地址回绕，在关闭A20地址线时，CPU将进行地址回绕；在开启A20地址线时，正确访问；</p>
<p>3.加载GDT地址到GDTR</p>
<p>4.置位CR0寄存器的PE位</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240416195112069.png" class="" title="image-20240416195112069">

<p>5.将段寄存器内容更新为段选择子内容</p>
<p>Linux:[类似]</p>
<p>临时gdt包含了两个段描述符，数据段描述符和代码段描述符，段基址均为0x00000</p>
<p>跳转0x00000处</p>
<h4 id="head-loader"><a href="#head-loader" class="headerlink" title="head&amp;loader"></a>head&amp;loader</h4><h5 id="页表组成与构建"><a href="#页表组成与构建" class="headerlink" title="页表组成与构建"></a>页表组成与构建</h5><p>虚拟地址与物理地址映射关系</p>
<p>虚实转换由MMU(Memory Management Unit)硬件实现，</p>
<p>CPU中的SATP寄存器保存Page Table Entry，指向最高一级的页目录page directory的物理内存地址</p>
<p>CPU中的TLB(Translation Lookside Buffer)保存近期访问的PTE内容</p>
<p>XV6</p>
<p>页表中的每一项为PTE(Page Table Entry)，一个PTE 54bit，一级页表为3.375KB</p>
<p>通过SATP寄存器获得最高级页表的物理地址PPN，使用L2查最高级页表获得中间级页表的物理地址；使用L1查中间级页表获得最低级页表的物理地址；使用L0查最低级页表，获得物理地址；</p>
<p>通过TLB获取物理地址PPN；</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240412190738605.png" class="" title="image-20240412190738605">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240412192043741.png" class="" title="image-20240412192043741">



<p>Linux 2.6</p>
<p>虚拟地址高10位，在页目录表中查找对应索引，获得页表的物理地址（20位，余下12位补0）；</p>
<p>虚拟地址中10位，在页表中查找对应索引，获得页的物理地址（20位，余下12位补0）；</p>
<p>虚拟地址后12位，页内偏移；</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240420140907729.png" class="" title="image-20240420140907729">





<p>tiny-os</p>
<p>用户使用低3GB，内核使用高1GB，每页4KB</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240427102727532.png" class="" title="image-20240427102727532">

<p>建立页目录表–页目录表的项即指向一个页表</p>
<p>在物理地址0x100000建立页目录表，一个页目录表含1024个页表项PDE，每个页目录表项4B，占4KB，</p>
<p>第0项（保证loader程序在启动页表后能够正常运行）指向第一个页表，物理地址0x101000</p>
<p>第768项（虚拟地址3GB，用户程序访问内核）指向第一个页表，物理地址0x101000</p>
<p>第1023项指向页目录表，物理地址0x100000</p>
<p>建立页表</p>
<p>在物理地址0x101000建立，一个页表含1024个页表项，每个页表项4B，占4KB，可表示4KB*1024&#x3D;4MB的地址空间</p>
<p>该页表指向的物理地址为0-0x3fffff</p>
<h5 id="head-s-页表构建与进入分页模式"><a href="#head-s-页表构建与进入分页模式" class="headerlink" title="head.s &#x2F; 页表构建与进入分页模式"></a>head.s &#x2F; 页表构建与进入分页模式</h5><p>Linux: boot&#x2F;head.s</p>
<p><img src="file://D:/github/blog/source/_posts/Op-sys-Learning-Record/image-20240609161606117.png?lastModify=1717920885" alt="image-20240609161606117"></p>
<p>位于物理地址0x00000处</p>
<p>加载数据段寄存器，</p>
<p>重新设置idtr，循环创建256项中断描述符，全部指向哑中断处理程序（该程序位于0x6000~中断描述符表前，图中的head.s部分代码）</p>
<p>重新设置gdtr</p>
<p>检查A20地址线是否开启</p>
<p>检查机器是否含有数学协处理器，修改CR0寄存器标志位</p>
<p>将main代码的地址压入位于(ss: 内核数据段选择符, esp: 内核sched模块user_stack处 )的栈，</p>
<p>设置页目录表（为全体进程使用）与页表，4个页表（内核专用页表，新的进程的页表会在主内存区申请）位于页目录表之后，寻址16Mb空间（4KB&#x2F;页表大小，4B&#x2F;页表项，1024*4KB&#x3D;4MB每项寻址空间）</p>
<p>iret弹出入栈的main函数地址，跳转前往执行main函数</p>
<blockquote>
<p>这段汇编先从0x0000开始运行，然后运行到设置内存页表的时候使用.org向后跳，空出内存页表的空间0x1000~0x5000，一直跳到0x6000处继续，将main参数和地址压栈，然后跳过哑中断处理程序，开始创建页内存目录表和写入刚才空出来的内存页表（页内存目录表创建在0x0000，这意味着原本位于这里的head.s的代码将被覆盖</p>
<p>idt是循环创建的，gdt是预先手写好的</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240706163733389.png" class="" title="image-20240706163733389">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240706163716837.png" class="" title="image-20240706163716837">



<p>Linux 0.1x 内核和所有进程共用0x0000的页目录表（这意味着CR3寄存器中的值始终为0x0000，即全部进程共享的页目录表，</p>
<p>其他的4页页表为内核专用，用户进程的页表存放在随机的主内存区</p>
</blockquote>
<p>tiny_os</p>
<p>loader中实现页表的构建与进入分页模式</p>
<p>loader程序</p>
<p>6.清空页目录占用空间0x100000+4096</p>
<p>7.创建页目录项并写入页目录表第0项(指向第1个页表)，第768项(指向第1个页表)和第1023项(指向页目录表，该项用于修改页目录表)</p>
<p>8.创建页表项写入第1个页表(位于0x101000)，分配物理地址0~0x3fffff(实验用mini内核在此处)</p>
<p>9.创建页目录项并写入页目录表第769项~第1022项(指向第2,3,4…个页表,第2,3,4…个页表位于0x102000,0x103000…)</p>
<p>10.修改gdt中段描述符的地址值，上移至0xc0000000以上</p>
<p>11.修改gdt基址，修改esp，上移至0xc0000000以上</p>
<p>12.将页目录地址赋值给cr3，打开cr3的pg位，新gdt值写入gdtr</p>
<p>分页模式启动，</p>
<p>程序<strong>此时</strong>已进入虚拟地址运行，</p>
<p>当前虚拟地址0x0000xxxx，仍处于低1M地址空间中(页目录表第一项指向第一个页表的原因)；</p>
<p>从gdt中获得的段描述符的值为虚拟地址；</p>
<h4 id="内存分段机制"><a href="#内存分段机制" class="headerlink" title="内存分段机制"></a>内存分段机制</h4><p>​	<img src="/2024/04/12/Op-sys-Learning-Record/image-20240706103147318.png" class="" title="image-20240706103147318"></p>
<p>从该图可以看出，偏移值(IP)和段选择子(CS&#x2F;DS&#x2F;…)中的地址为虚拟地址，</p>
<p>通过段选择子读取段描述符表中的段描述符获取完整虚拟地址基址，得到线性地址；</p>
<p>使用线性地址根据页目录表和页表得到物理地址</p>
<h4 id="main-c-loader"><a href="#main-c-loader" class="headerlink" title="main.c&amp;loader"></a>main.c&amp;loader</h4><img src="/2024/04/12/Op-sys-Learning-Record/image-20240609163346462.png" class="" title="image-20240609163346462">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240609180508264.png" class="" title="image-20240609180508264">

<p>Linux: main.c &amp; 任务0（idle进程）</p>
<p>初始化设备与内存信息：</p>
<p>​	根设备号，高速缓存末端地址，机器内存量，主内存开始地址；</p>
<p>调用内核中初始化函数初始化各功能部分；</p>
<ul>
<li>主内存区初始化</li>
<li>硬件中断向量初始化</li>
<li>块设备初始化</li>
<li>字符设备初始化</li>
<li>tty初始化</li>
<li>时间初始化，访问CMOS获取</li>
<li>调度程序初始化</li>
<li>缓存初始化</li>
<li>硬盘初始化</li>
<li>软驱初始化</li>
</ul>
<p>移动到用户模式下执行</p>
<blockquote>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240706162745211.png" class="" title="image-20240706162745211">

<p>此处的宏函数move_to_user_mode展开后，实际上是原地跳转，但是在执行过程中修改了 </p>
<p>cs段选择符-&gt;(ldtr寄存器)LDT表的RPL&#x3D;3的第一个段选择子，任务0代码段</p>
<p>eip-&gt;下一条指令的地址(原地跳转)</p>
<p>ds, es, fs, gs -&gt; (ldtr寄存器)LDT表的RPL&#x3D;3的第二个段选择子，任务0数据段</p>
<p>ss未变更？</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240706163156118.png" class="" title="image-20240706163156118">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240706163204640.png" class="" title="image-20240706163204640">
</blockquote>
<p>fork创建出任务1(init())</p>
<p>循环pause状态—</p>
<p>​	ps: 程序进入interruptible状态（闲置进程），无任务可调度时调度任务0</p>
<p>​	ps:任务0为所有进程的父进程，故不使用堆栈</p>
<p>Linux: main.c&#x2F;init() 任务1</p>
<p>读取硬盘参数（包含分区表信息），加载虚拟盘（若存在），安装根文件系统设备</p>
<p>以读写方式打开tty0，得到文件句柄0stdin，复制两次得到stdout和stderr</p>
<p>fork产生任务2，等待任务2退出</p>
<p>循环</p>
<p>若产生的子进程死亡，重新产生新的进程并进入wait</p>
<blockquote>
<p>任务1与任务0区别</p>
<p>任务1的页表在主内存区，对于任务1，在页目录表有对应于自己的页目录表项，页表内容与任务0相同，虚拟地址高任务0一个页目录表项（在图中线性地址中体现，高的原因是任务1的页目录表项为第二个</p>
<p>任务1会在主内存区申请1页存放PCB+内核栈</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240713185606091.png" class="" title="image-20240713185606091">
</blockquote>
<p>Linux: main.c&#x2F;init() 任务2</p>
<p>关闭从任务1所继承的stdin，stdout和stderr；创建新的会话期</p>
<p>tiny_os</p>
<p>loader中实现kernel写入内核</p>
<p>loader程序位于0x90000，使用0x90000以下部分作为程序栈</p>
<p>13.读磁盘指定扇区，写kernel.bin到虚拟地址0xc0070000~0xc009fbff</p>
<p>14.初始化kernel，将kernel.bin中的segment复制到被编译的虚拟地址处，第一个segment起始于0xc0001500</p>
<p>15.修改栈指针，跳转至kernel，虚拟地址0xc0001500</p>
<h2 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h2><h3 id="外部中断与内部中断"><a href="#外部中断与内部中断" class="headerlink" title="外部中断与内部中断"></a>外部中断与内部中断</h3><img src="/2024/04/12/Op-sys-Learning-Record/image-20240421152049031.png" class="" title="image-20240421152049031">

<p>中断引脚：</p>
<p>INTR: Interupter</p>
<p>NMI: Non Maskable Interupter	向CPU传入中断向量号 2</p>
<p>外部设备中断由中断代理芯片8259A接收后发送中断向量号到CPU中断引脚INTR</p>
<p>Linux： int32 ~ int47 -&gt; IRQ0 ~ IRQ15</p>
<p>软中断：系统调用</p>
<p>Linux：int128</p>
<p>异常：指针越界，栈溢出</p>
<p>Linux：int0 ~ int31</p>
<h3 id="实模式下的中断向量表"><a href="#实模式下的中断向量表" class="headerlink" title="实模式下的中断向量表"></a>实模式下的中断向量表</h3><p>仅在实模式使用，由BIOS进行创建，位于0x00000~0x003ff</p>
<h3 id="中断门与保护模式下的中断描述符表IDT"><a href="#中断门与保护模式下的中断描述符表IDT" class="headerlink" title="中断门与保护模式下的中断描述符表IDT"></a>中断门与保护模式下的中断描述符表IDT</h3><p>中断向量号为 中断向量表&#x2F;中断描述符表 的索引下标</p>
<p>IDTR(Interrupt Descriptor Table Register) 中保存 IDT 位置信息</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240417105214817.png" class="" title="image-20240417105214817">

<p>IDT(Interrupt Descriptor Table)</p>
<p>item: 门</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240417104649804.png" class="" title="image-20240417104649804">

<h3 id="中断过程"><a href="#中断过程" class="headerlink" title="中断过程"></a>中断过程</h3><h4 id="中断初始化"><a href="#中断初始化" class="headerlink" title="中断初始化"></a>中断初始化</h4><p>tiny_os</p>
<p>实模式由BIOS创建中断向量表和中断处理程序；</p>
<p>保护模式由kernel创建中断描述符表和中断处理程序；</p>
<p>1.kernel进行中断初始化：中断描述符初始化，异常处理程序初始化，pic初始化</p>
<p>2.中断描述符初始化：创建中断描述符，描述符中的偏移量由一阶中断处理程序的偏移给出(位于kernel.asm，一阶中断处理程序在进行上下文保存后call二阶中断处理程序，即该初始化中创建的异常处理程序)，写入中断描述符表</p>
<p>3.异常处理程序初始化：将异常处理程序的地址写入二阶中断处理程序表，该表保存函数地址，由一阶中断处理程序call；</p>
<p>4.pic初始化</p>
<p>5.将中断描述符表地址写入idtr</p>
<h4 id="中断处理过程"><a href="#中断处理过程" class="headerlink" title="中断处理过程"></a>中断处理过程</h4><p>1.中断请求</p>
<p>中断请求可能为内部中断或者外部中断</p>
<p>外部中断如下：</p>
<p>当外设发出中断信号后，信号被送入8259A；</p>
<p>8259A检查IMR寄存器中是否屏蔽了来自该IRQ的信号，若IMR寄存器中对应的位为1，表示屏蔽了IRQ代表的中断，则丢掉此中断信号，若IMR寄存器中对应的位为0，表示未屏蔽此中断，则将IRR寄存器中与此中断对应的位 置1。</p>
<p>PR优先级裁决器从IRR寄存器中挑选一个优先级最大的中断，然后8259A向CPU发送INTR信号。</p>
<p>内部中断由代码通过中断向量号触发。</p>
<p>2.(外)中断响应</p>
<p>CPU收到INTR信号后便知道有新的中断了，在执行完当前指令后，向8259A发送一个中断回复信号。</p>
<p>8259A收到回复信号后，将选出来的优先级最大的中断在ISR寄存器中相应的位 置1，表示该中断正在处理，同时将此中断在IRR寄存器中相应的位 置0，相当于将此中断从中断请求队列中去掉。</p>
<p>CPU再向8259A发送INTR信号，表示想要获取中断向量号。</p>
<p>8259A通过数据总线向CPU发送中断向量号，<strong>中断向量号 &#x3D; 起始向量号 + IRQ接口号</strong>，一般起始向量号为32，从中断向量表可看出0—31已经被占用，后面的32—127是分配给可屏蔽中断的，所以此处外设的中断设置的起始向量号便为32。</p>
<p>3.保护现场__压栈</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240714201118464.png" class="" title="image-20240714201118464">

<p>CPU据中断向量号去IDT中获取中断描述符，</p>
<blockquote>
<p>此时将取出选择子中的DPL与当前特权级CPL进行比较，若特权级发生变化，则需要切换栈（不同特权级有着不同的栈，如Linux使用了0， 3特权级，则有两个栈，一个内核栈，一个用户栈）。</p>
</blockquote>
<p>处理器从当前任务的TSS段（每一个任务有一个TSS结构，其中保存着不同特权级栈的SS和ESP值）中获取与DPL特权级相同的栈信息，处理器将当前的旧的SS和ESP的值压入目标栈(<strong>每个进程都拥有独立的内核栈</strong>).</p>
<p>向内核栈压入EFLAGS寄存器值</p>
<p>向内核栈压入CS，EIP值。</p>
<p>若该中断有错误码，压入错误码，</p>
<p>将 段选择符，偏移值写入CS, EIP, 前往执行一阶中断服务程序</p>
<p>图示为发生了特权级改变时的压栈情况</p>
<p><strong>以上过程不由一阶中断程序实现，硬件自动实现</strong></p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240421154614894.png" class="" title="image-20240421154614894">

<p>4.定位中断服务程序</p>
<p>访问中断处理程序的流程</p>
<p>1.通过idtr获得idt的地址，将中断向量号作为索引，访问到中断描述符</p>
<p>2.中断描述符给出<strong>一阶中断处理程序</strong>的段选择子和偏移</p>
<p>3.通过gdtr获得gdt的地址，将段选择子作为索引，访问到段描述符</p>
<p>4.段描述符给出<strong>一阶中断处理程序</strong>的段<strong>虚拟地址</strong>，</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240417110140482.png" class="" title="image-20240417110140482">

<p>5.通过段<strong>虚拟地址</strong>和偏移访问到<strong>一阶中断处理程序</strong>，</p>
<p><strong>一阶中断处理程序</strong>将C函数地址(二阶中断处理程序)压栈，后将地址交换写入eax, 原eax值入栈</p>
<p>其余上下文(ebx,ecx,edx,edi,esi,ebp,ds,es,fs)压栈，</p>
<p>压入错误码，压入执行一阶中断程序前的栈指针(esp0)，作为<strong>二阶中断处理程序参数</strong></p>
<p>并在<strong>二阶中断处理程序</strong>执行完成后，</p>
<p>弹出错误码和esp0，弹出上下文</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240702102514943.png" class="" title="image-20240702102514943">





<p>6.中断处理过程</p>
<p><strong>二阶中断处理程序</strong>，打印出错程序信息</p>
<p>中断的实际处理过程就是执行中断处理程序，Linux将中断处理程序分为上下两部分，需要紧急处理立即执行的归为上半部，不那么紧急的归为下半部。</p>
<p>开中断，即EFLAGS的IF位置1，表示允许响应中断；关中断，即EFLAGS的IF位置0，表示不允许响应中断。</p>
<p>上半部分是刻不容缓的，需要立即执行的部分，所以要在关中断的状态下执行。</p>
<p>而下半部分不那么紧急，在开中断的情况下进行，如果此时有新的中断发生，当前中断处理程序便会换下CPU，CPU会另寻时间重新调度，完成整个中断处理程序。</p>
<p>7.中断返回——出栈</p>
<p>中断返回就是出栈的过程，将第三步保护现场压入栈中的信息弹出。</p>
<p>有错误码弹出错误码。</p>
<p>此时的栈顶指针ESP应指向EIP_old，剩余栈中的信息使用iret指令弹出，CPU执行到iret指令时再次检查和比较特权级是否变化。</p>
<p>弹出EIP_old, CS_old</p>
<p>若特权级变化，将ESP_old, SS_old, 加载到ESP，SS寄存器。</p>
<h3 id="中断处理程序"><a href="#中断处理程序" class="headerlink" title="中断处理程序"></a>中断处理程序</h3><p>Linux: asm.s, traps.c</p>
<p>asm.s</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240702102514943.png" class="" title="image-20240702102514943">

<p><strong>一阶中断处理程序</strong>将C函数地址(二阶中断处理程序)压栈，后将该值交换进入eax, 原eax值入栈</p>
<p>其余上下文(ebx,ecx,edx,edi,esi,ebp,ds,es,fs)压栈，</p>
<p>压入错误码(或0)，压入执行一阶中断程序前的栈指针(esp0)，作为<strong>二阶中断处理程序参数</strong></p>
<p>改变段寄存器ds, es, fs为内核数据段选择符</p>
<p>call<strong>二阶中断处理程序</strong>,</p>
<p>并在<strong>二阶中断处理程序</strong>执行完成后，弹出错误码和esp0，弹出上下文</p>
<p>traps.c</p>
<p><strong>二阶中断处理程序</strong>, 打印出错信息</p>
<p>初始化，设置中断调用门，传入<strong>一阶中断处理程序</strong>(函数)的地址</p>
<h3 id="系统调用处理程序与信号"><a href="#系统调用处理程序与信号" class="headerlink" title="系统调用处理程序与信号"></a>系统调用处理程序与信号</h3><p>Linux: system.c</p>
<p><strong>含时钟中断!!!</strong></p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240704153835415.png" class="" title="image-20240704153835415">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240704190208804.png" class="" title="image-20240704190208804">

<p>对于系统调用处理程序(一阶中断处理程序)：</p>
<p>判断调用号范围</p>
<p>压栈ds, es, fs, edx, ecx, ebx, </p>
<p>修改ds, es, fs,</p>
<p>call 对应的C处理函数(二阶中断处理程序)</p>
<p>压栈eax(二阶中断处理程序返回值)</p>
<p>if(任务非就绪&#x2F;时间片耗尽):</p>
<p>​	执行调度程序</p>
<p>​	执行ret_from_sys_call</p>
<p>else:</p>
<p>​	执行ret_from_sys_call</p>
<p>对于函数ret_from_sys_call：</p>
<p>if(非初始任务&#x2F;非超级用户程序&#x2F;?):</p>
<p>​	取当前任务结构的信号位图，取信号屏蔽码，得到可行信号图，复位信号图并写回</p>
<p>​	将可行信号图中最小的信号压栈，call do_signal，</p>
<p>弹出信号值signr, eax, ebx, ecx, edx, fs, es, ds</p>
<blockquote>
<p>此时cs为用户代码段选择子，eip为信号处理程序；内核栈中的ss和esp将在cpu检查段选择子的rpl部分时发现进入低特权级，弹出并写入；</p>
<p>后续执行信号处理程序，ret时将用户栈顶的restorer写入eip，执行restorer；</p>
<p>restorer丢弃用户栈顶的信号值signr, 设置信号屏蔽码, 丢弃block, 弹出eax, ecx, edx, eflags, ret将用户栈顶的原eip写入eip，恢复系统调用前状态</p>
</blockquote>
<p>​	</p>
<p>函数do_signal：</p>
<blockquote>
<p>sys_signal和sys_sigaction修改进程task_struct的sigaction[32]，用于修改在接收信号时的处理函数，返回原对应信号的处理函数指针</p>
<p>sigaction[32]的项：</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240704193952350.png" class="" title="image-20240704193952350">

<p>sys_sigaction是sys_signal的超集</p>
</blockquote>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240704190208804.png" class="" title="image-20240704190208804">

<p>从task_struct-&gt;sigaction[32]中获取信号signr对应的sigaction</p>
<p>if(非忽略句柄&#x2F;非默认句柄):</p>
<p>​	若sigaction-&gt;sa_flag为oneshot, 将句柄置空</p>
<p>​	修改内核堆栈中eip的值为信号处理程序句柄</p>
<p>​	下移用户堆栈对应esp，并向用户堆栈写入图示值</p>
<blockquote>
<p>sa_restorer</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240704195323779.png" class="" title="image-20240704195323779">
</blockquote>
<p><strong>信号</strong></p>
<p>有上可知，信号将在系统调用结束时检查，并使用该程序task_struct中sigaction[32]中设置的处理函数进行处理</p>
<p>向某程序发信息 -&gt; 修改该程序task_struct的signal</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240705101522972.png" class="" title="image-20240705101522972">



<h3 id="中断处理程序-系统调用处理程序的注册"><a href="#中断处理程序-系统调用处理程序的注册" class="headerlink" title="中断处理程序&#x2F;系统调用处理程序的注册"></a>中断处理程序&#x2F;系统调用处理程序的注册</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">register_handler</span><span class="params">(<span class="type">uint8_t</span> vec_no, intr_handler handler)</span> &#123;</span><br><span class="line">    sys_call_table[vec_no] = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改<strong>中断处理程序表&#x2F;系统调用处理程序表</strong>指向的二阶中断处理程序</p>
<p>仅在内核态可修改此类表</p>
<h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><h3 id="TSS与任务链"><a href="#TSS与任务链" class="headerlink" title="TSS与任务链"></a>TSS与任务链</h3><p>TR(Task Register)</p>
<p>保存TSS地址</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240714093840136.png" class="" title="image-20240714093840136">



<p>Task State Segment	</p>
<p>TSS描述符保存于GDT</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240506191146645.png" class="" title="image-20240506191146645">



<p>TSS内容</p>
<p>保存任务快照（任务被换上&#x2F;换下CPU时）</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240506191245406.png" class="" title="image-20240506191245406">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240428111029824.png" class="" title="image-20240428111029824">



<p>TSS段</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240713192515176.png" class="" title="image-20240713192515176">



<img src="/2024/04/12/Op-sys-Learning-Record/image-20240713192710613.png" class="" title="image-20240713192710613">



<h3 id="PCB"><a href="#PCB" class="headerlink" title="PCB"></a>PCB</h3><img src="/2024/04/12/Op-sys-Learning-Record/image-20240705104639547.png" class="" title="image-20240705104639547">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240705104656011.png" class="" title="image-20240705104656011">

<blockquote>
<p>进程的页目录表基址保存在PCB，linux 0.1x的所有进程的这个值均为0x0000</p>
<p>进程的tss位于PCB</p>
<p>进程的ldt位于PCB和tss</p>
</blockquote>
<h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>Linux</p>
<h4 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h4><p>通过fork从task0创建</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240714144402746.png" class="" title="image-20240714144402746">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240714144419322.png" class="" title="image-20240714144419322">

<blockquote>
<p>被fork出来的子进程将复制父进程的页目录表和页表，fork()后，子进程将获得自己的PCB，其中PCB的页目录表基址和父进程不一致，指向自己的页目录表。该页目录表对应页表中的页表项指向的物理地址与父进程的一致，直至子进程发生写行为时分配新内存页（写时复制技术）</p>
<p>创建新进程需要在fork后在子进程内执行execve切换执行内容</p>
<p>fork的核心工作是复制出新的PCB，并修改PCB中的各值(包括对TSS的修改)</p>
</blockquote>
<h4 id="execve"><a href="#execve" class="headerlink" title="execve"></a>execve</h4><img src="/2024/04/12/Op-sys-Learning-Record/image-20240715111107866.png" class="" title="image-20240715111107866">







<p>tiny_os</p>
<p>进程创建过程</p>
<p>kernel启动进程，传入进程参数（进程文件名和进程名），启动进程。</p>
<p>1.初始化线程</p>
<p>从内核空间申请页面，清洗页面，初始化线程名为线程&#x2F;进程名；</p>
<p>根据线程&#x2F;进程名初始化线程状态；</p>
<p>初始化优先级，时间片上限，已使用时间片，页目录表地址，内核栈指针，魔数等；</p>
<p>加入线程队列，线程指针thread指向该页面底部；</p>
<p>2.创建用户进程的虚拟地址池</p>
<p>用户进程虚拟地址池位于PCB中</p>
<p>设置虚拟地址池起始于0x00000000</p>
<p>设置虚拟地址池所管理的空间的页数和虚拟地址池长度</p>
<p>3.初始化内核栈</p>
<p>线程内核栈位置为PCB页面顶部（高地址），thread-&gt;self_kstack为线程内核栈指针；</p>
<p>下移thread-&gt;self_kstack，留出中断栈空间sizeof(intr_stack)</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240425101059850.png" class="" title="image-20240425101059850">

<p>下移thread-&gt;self_kstack，留出线程栈空间sizeof(thread_stack)</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240425101121206.png" class="" title="image-20240425101121206">



<p>创建线程栈指针kthread_stack，指向当前thread-&gt;self_kstack指针位置，</p>
<p>初始化线程栈，依次写入eip，函数名，函数参数和寄存器初始值ebp,ebx,esi,edi；</p>
<p>thread-&gt;self_kstack此时位于线程栈栈顶，栈顶内容为edi，esi，ebx，ebp，函数参数，函数名，eip；</p>
<p>&#x2F;&#x2F;不执行ret指令，将压栈的函数参数，函数名和返回地址弹出，并前往执行对应函数；</p>
<p>4.创建用户进程的页目录表</p>
<p>从内核分配一页作为进程页目录表</p>
<p>将内核页目录表的高半部分（对应内核空间部分）项复制到进程页目录表中</p>
<p>设置最后一项页表的地址为页目录表地址</p>
<p>4.5 初始化用户内存块表</p>
<p>5.加入调度链表</p>
<p>关中断；</p>
<p>将进程加入调度链表；</p>
<p>开中断；</p>
<p>进程执行</p>
<p>构建用户进程初始上下文信息</p>
<p>移动线程栈指针kthread_stack指向intr_stack顶部，线程栈底部</p>
<p>写入中断栈，依次写入edi, esi, ebp, esp_dummy</p>
<p>ebx, edx, ecx, eax, gs, </p>
<p>ds, es, fs, eip, cs, eflag, esp, ss, 此类寄存器中值均为用户空间，为通过中断返回的方式进入3特权级做准备</p>
<p>thread-&gt;self_kstack此时位于中断栈栈顶，栈顶内容为：</p>
<p>vec_no, edi, esi, ebp, esp_dummy……</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240507185615764.png" class="" title="image-20240507185615764">



<p>将esp设置为中断栈栈顶指针thread-&gt;self_kstack，</p>
<p>jmp intr_exit，跳过压入的中断向量号vec_no，popad弹出所有通用寄存器值，pop gs，fs，es，ds，跳过错误码；此时栈顶为：eip值为filename（指向用户进程入口地址），cs值为SELECTOR_U_CODE，eflag为(EFLAGS_IOPL_0 | EFLAGS_MBS | EFLAGS_IF_1);</p>
<p>前往执行对应函数，进入特权级3；</p>
<h3 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h3><p>调度发生在：</p>
<p>Flag <code>need_sched</code>为1</p>
<p>1.系统调用&#x2F;中断(包括时间中断)-执行处理函数后，若当前进程时间片为0或任务未就绪，调用<code>schedule()</code></p>
<p>2.切换当前running态进程为其他态后，调用<code>schedule()</code></p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240608144715684.png" class="" title="image-20240608144715684">

<p>TASK_INTERRUPTIBLE与TASK_UNINTERRUPTIBLE</p>
<p>TASK_INTERRUPTIBLE可接收信号，会被提前唤醒并响应信号</p>
<p>TASK_UNINTERRUPTIBLE屏蔽信号，即使是 SIGKILL 信号也无法将其杀死。 只有当它自己 wake up 之后，才会查看信号，然后进行处理。</p>
<p><strong>进程需要调度判定</strong></p>
<p>PCB <code>need_resched</code> flag</p>
<p><strong><code>need_resched</code> 标志作用</strong></p>
<p>need_resched 标志用于指示内核调度器，当前进程需要重新调度。当该标志被设置为 1 时，表示当前进程的运行时间已经超过了其时间片，或者有更高优先级的进程进入就绪状态，内核调度器需要在下一次调度时机选择新的进程运行。</p>
<p><strong><code>need_resched</code> 标志生效时机</strong></p>
<p>多种情况下会设置 <code>need_resched</code> 标志，主要包括：</p>
<ul>
<li><strong>时间片耗尽：</strong> 当一个进程运行的时间超过了分配给它的时间片时，内核调度器会设置该进程的 <code>need_resched</code> 标志，以便在下一次调度时选择其他进程运行。</li>
<li><strong>更高优先级进程就绪：</strong> 当一个更高优先级的进程进入就绪状态时，内核调度器会设置当前运行进程（如果其优先级低于新就绪进程）的 <code>need_resched </code>标志，以便尽快调度更高优先级的进程运行。</li>
<li><strong>进程主动放弃 CPU：</strong> 当一个进程主动调用 sched_yield() 或类似的系统调用时，表示它愿意放弃 CPU 使用权，此时内核会设置该进程的 <code>need_resched </code>标志。</li>
<li><strong>从内核态返回用户态：</strong> 当一个进程从内核态返回用户态时，内核会检查 <code>need_resched </code>标志，如果设置了该标志，则会进行进程调度，切换到新的进程运行。</li>
</ul>
<p><strong><code>need_resched</code> 标志检查时机</strong></p>
<p>内核态返回用户态时：系统调用返回&#x2F;中断返回（含时钟中断）</p>
<p>若<code>need_resched</code>标志为<code>1</code>，则调用<code>schedule()</code></p>
<p><strong>等待队列与唤醒</strong></p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240801110805754.png" class="" title="image-20240801110805754">

<p><strong>一个文件表项 -&gt; 一个等待队列！！！</strong></p>
<p><strong>过程</strong></p>
<ol>
<li><p><strong>进程睡眠：</strong></p>
<ul>
<li><p>进程调用 read() 等系统调用读取驱动设备数据，由于数据尚未准备好，驱动程序会将进程加入到自身维护的一个等待队列中 &#x2F; 进程将自己添加进等待队列</p>
<p>进程通过以下步骤将自己加入等待队列</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240801110303316.png" class="" title="image-20240801110303316">

<blockquote>
<p>进程在执行到<code>schedule()</code>时，将自己当前状态的上下文保存至TSS，包括EIP和CS，由于EIP指向<code>while(!condition)</code>判断，即下次程序执行时会进行condition的判断，若满足则结束等待</p>
</blockquote>
</li>
<li><p>进程将自身状态设置为 TASK_INTERRUPTIBLE 或 TASK_UNINTERRUPTIBLE，表示可以被信号或中断唤醒。</p>
</li>
</ul>
</li>
<li><p><strong>中断&#x2F;事件发生：</strong></p>
<ul>
<li>驱动设备完成数据输入后，会向 CPU 发出一个中断请求 &#x2F; 被占用的资源被释放 &#x2F; 进程主动等待的条件满足。</li>
<li>CPU 收到中断请求后，会保存当前上下文，并跳转到该中断对应的中断处理函数执行 &#x2F; 执行与该事件关联的代码（例如，资源管理代码）</li>
</ul>
</li>
<li><p><strong>处理程序&#x2F;唤醒程序：</strong></p>
<ul>
<li>处理程序执行设备相关的处理逻辑，例如从设备读取数据到缓冲区。</li>
<li><strong>关键步骤：</strong> 中断处理程序会调用 wake_up_interruptible() 或类似的 API。该函数会:<ul>
<li>将等待队列中所有等待该设备数据的进程标记为<strong>状态TASK_RUNNING</strong>，并将进程从等待队列的链表中移除，<code>activate_task()</code> 函数负责将进程加入到就绪队列</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>调度与唤醒：</strong></p>
<ul>
<li>中断处理完成后，CPU 会根据调度策略选择下一个要运行的进程。</li>
<li>被唤醒的进程最终获得 CPU 时间，继续执行，此时 read() 系统调用会成功返回读取到的数据。</li>
</ul>
</li>
</ol>
<p><strong>任务切换</strong></p>
<p>使用远跳转实现任务切换</p>
<p>call指令可以实现向高特权级跳转，jmp平级跳转</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 近跳转</span><br><span class="line">jmp short next_instruction</span><br><span class="line"></span><br><span class="line">; 远跳转，使用段地址和偏移量 (实模式)</span><br><span class="line">jmp far 1000h:1234h</span><br><span class="line"></span><br><span class="line">; 远跳转，使用选择子和偏移量 (保护模式)</span><br><span class="line">jmp far [selector:offset]</span><br><span class="line">call 0x0008:0x1234 ; 向GDT中索引为1的调用门跳转，忽略偏移0x1234</span><br></pre></td></tr></table></figure>

<p>在linux 0.x 中，所有任务的TSS均保存在GDT中；</p>
<p>在发生上述两种需要调度的情况时，调度程序(内核)将获取下一个可执行任务，并获取该任务对应的TSS；</p>
<p>jmp far [TSS 选择子]</p>
<ul>
<li><strong>读取 TSS 选择子：</strong> CPU 从指令中获取 [TSS 选择子] 的值，该值指向目标任务 (Task B) 的 TSS 描述符在 GDT 中的位置。</li>
<li><strong>读取 TSS 描述符：</strong> CPU 根据 TSS 选择子，从 GDT 中读取 Task B 的 TSS 描述符，该描述符包含了 Task B 的 TSS 段基址。</li>
<li><strong>加载新 TSS：</strong> CPU 将 Task B 的 TSS 段基址加载到 TR 寄存器中，表示当前任务切换为 Task B。</li>
<li><strong>保存当前任务状态：</strong> CPU 将当前任务 (Task A) 的状态信息保存到 Task A 的 TSS 中，包括：<ul>
<li>CS、EIP、EFLAGS、SS、ESP 等通用寄存器的值。</li>
<li>段寄存器 DS、ES、FS、GS 的值。</li>
</ul>
</li>
<li><strong>加载新任务状态：</strong> CPU 从 Task B 的 TSS 中加载新的任务状态，包括：<ul>
<li>将 Task B 的 CS、EIP、EFLAGS、SS、ESP 等寄存器的值加载到相应的寄存器中。</li>
<li>将 Task B 的 DS、ES、FS、GS 段寄存器的值加载到相应的段寄存器中。</li>
</ul>
</li>
</ul>
<blockquote>
<p>在CPU识别出跳转目标为TSS选择子时（通过硬件机制识别），不会直接将 选择子:偏移 写入 CS:EIP，会进入任务切换流程，通过硬件自动将当前任务的 CS:EIP 以及其他相关寄存器（包括 EFLAGS、SS、ESP、段寄存器等）的值保存在当前任务的 TSS 中，然后从目标任务的 TSS 中加载新的 CS:EIP 以及其他寄存器的值。</p>
</blockquote>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240715103745870.png" class="" title="image-20240715103745870">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240715103802105.png" class="" title="image-20240715103802105">

<p>进程切换时，修改以下：</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240714095015752.png" class="" title="image-20240714095015752">



<p>Linux: system_call.s</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.align 2</span><br><span class="line">_timer_interrupt:</span><br><span class="line">	push %ds		# save ds,es and put kernel data space</span><br><span class="line">	push %es		# into them. %fs is used by _system_call</span><br><span class="line">	push %fs</span><br><span class="line">	pushl %edx		# we save %eax,%ecx,%edx as gcc doesn&#x27;t</span><br><span class="line">	pushl %ecx		# save those across function calls. %ebx</span><br><span class="line">	pushl %ebx		# is saved as we use that in ret_sys_call</span><br><span class="line">	pushl %eax</span><br><span class="line">	movl $0x10,%eax</span><br><span class="line">	mov %ax,%ds</span><br><span class="line">	mov %ax,%es</span><br><span class="line">	movl $0x17,%eax</span><br><span class="line">	mov %ax,%fs</span><br><span class="line">	incl _jiffies  #发生时间中断时将jiffies自增</span><br><span class="line">	movb $0x20,%al		# EOI to interrupt controller #1</span><br><span class="line">	outb %al,$0x20</span><br><span class="line">	movl CS(%esp),%eax</span><br><span class="line">	andl $3,%eax		# %eax is CPL (0 or 3, 0=supervisor)</span><br><span class="line">	pushl %eax</span><br><span class="line">	call _do_timer		# &#x27;do_timer(long CPL)&#x27; does everything from PS: 其实就是修改计时器和调度</span><br><span class="line">	addl $4,%esp		# task switching to accounting ...</span><br><span class="line">	jmp ret_from_sys_call</span><br></pre></td></tr></table></figure>



<p>Linux: sched.c（核心代码</p>
<p>jiffies</p>
<blockquote>
<p>include&#x2F;sched.h 定义为变量</p>
</blockquote>
<p>schedule()</p>
<blockquote>
<p>调度代码</p>
</blockquote>
<p>从任务数组中最后一个任务开始向前扫描直到第一个任务前(跳过空)：</p>
<p>​	若task_struct-&gt;alarm &lt; jiffies, 修改signal并置alarm为0</p>
<p>​	若任务除去屏蔽信号外存在信号且为interruptible, 修改task_struct-&gt;state为就绪</p>
<blockquote>
<p>alarm判断+有信号存在</p>
</blockquote>
<p>next &#x3D; 0 </p>
<p>while(1)</p>
<p>​	从任务数组中最后一个任务开始向前扫描直到第一个任务前(跳过空)：</p>
<p>​		next &#x3D; 当前task_struct-&gt;counter最大的任务；</p>
<p>​		if(counter最大的任务的counter&gt;0):break;</p>
<p>​		else:使用任务优先级更新所有任务的counter</p>
<p>switch_to(next)</p>
<blockquote>
<p>next默认为0，即在没有可执行任务时系统切换至任务0(idle任务)执行</p>
</blockquote>
<p>sleep_on(struct task_struct **p)</p>
<blockquote>
<p>将当前任务state置为uninterruptible并加入睡眠队列</p>
<p>传入的p指向睡眠队列头，该函数将当前task置为睡眠队列头</p>
</blockquote>
<p>do_timer(long cpl)</p>
<blockquote>
<p>时钟中断二阶处理程序</p>
</blockquote>
<p>增加内核&#x2F;用户代码运行时间</p>
<p>定时器链中定时器的值减少，若为0调用处理函数并移除该定时器</p>
<p>减少当前程序的<code>counter</code>值，若为0则置当前进程<code>need_sched</code>为<code>1</code></p>
<p>switch_to()</p>
<blockquote>
<p>switch_to修改current指针指向传入的task任务，切换进程</p>
</blockquote>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240705161507324.png" class="" title="image-20240705161507324">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240705155902092.png" class="" title="image-20240705155902092">





<h2 id="特权级"><a href="#特权级" class="headerlink" title="特权级"></a>特权级</h2><p>CPL(Current Privilege Level)  当前代码特权级</p>
<p>为当前运行代码段的特权级，保存于CS寄存器中段选择子的RPL(2位)处</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240416193845119.png" class="" title="image-20240416193845119">

<p>eg: 运行用户程序代码，CPL &#x3D; 3</p>
<p>​	  运行内核程序代码，CPL &#x3D; 0</p>
<p>RPL(Request Privilege Level) 访问者特权级</p>
<p>访问者代码所在段的描述符的DPL为RPL值</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240416192952163.png" class="" title="image-20240416192952163">

<p>DPL(Descriptor Privilege Level) 受访者特权级</p>
<p>受访者代码所在段的描述符的DPL</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240416192952163.png" class="" title="image-20240416192952163">

<h3 id="门描述符"><a href="#门描述符" class="headerlink" title="门描述符"></a>门描述符</h3><img src="/2024/04/12/Op-sys-Learning-Record/image-20240417104649804.png" class="" title="image-20240417104649804">

<p>门描述符含有DPL，访问者的权限需大于等于门描述符的权限</p>
<p>eg: 访问者RPL&#x3D;3, 门描述符DPL&#x3D;3</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240417104649804.png" class="" title="image-20240417104649804">

<p>门描述符给出目标中断程序的段描述符选择子，</p>
<p>段描述符选择子含有DPL，门描述符的特权小于被访问者(中断程序)的权限</p>
<p>eg: 门描述符DPL&#x3D;3，中断程序段描述符DPL&#x3D;0</p>
<h3 id="访问过程"><a href="#访问过程" class="headerlink" title="访问过程"></a>访问过程</h3><img src="/2024/04/12/Op-sys-Learning-Record/image-20240506164402606.png" class="" title="image-20240506164402606">



<h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p>tiny_os</p>
<p>物理内存被划分为内核内存池和用户内存池</p>
<p>所有程序（用户程序和内核）均存在虚拟地址池，记录虚拟内存使用情况</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240425160621730.png" class="" title="image-20240425160621730">

<h3 id="内存管理-1"><a href="#内存管理-1" class="headerlink" title="内存管理"></a>内存管理</h3><p>Linux</p>
<blockquote>
<p>Linux不对主内存(物理内存)进行内核使用和用户使用的划分；</p>
<p>所有物理内存的申请均在主内存实现；</p>
</blockquote>
<p><strong>VMA 列表</strong></p>
<p>在 Linux 中，每个进程都维护着一个虚拟内存区域（Virtual Memory Area，VMA）列表。 </p>
<p>VMA 列表存储在进程的 PCB 的 mm_struct 结构体中。mm_struct 结构体是 Linux 内核用来管理进程地址空间的核心数据结构。</p>
<p>该列表记录了进程虚拟地址空间中每个内存区域的详细信息，例如：</p>
<ul>
<li><strong>起始地址和结束地址：</strong>  定义了该 VMA 覆盖的虚拟地址范围。</li>
<li><strong>访问权限：</strong>  例如，只读、读写、可执行等。</li>
<li><strong>映射类型：</strong>  例如，文件映射、匿名映射、设备映射等。</li>
<li><strong>文件映射信息：</strong>  如果 VMA 映射了文件，则会记录文件的路径、文件偏移量等信息。</li>
<li><strong>其他属性：</strong>  例如，是否共享、是否私有、是否可交换等。</li>
</ul>
<p>进程的 VMA 列表是一个按照虚拟地址排序的链表。 内核可以使用红黑树等数据结构来加速 VMA 的查找。</p>
<p>每个 VMA 只是描述了进程虚拟地址空间中的一段<strong>连续区域</strong>。 一个进程可以有多个 VMA，每个 VMA 对应不同的内存区域，例如代码段、数据段、堆、栈、共享库映射区域等。</p>
<p><strong>VMA 数据结构</strong></p>
<p>VMA 列表中的每个元素都是一个 <code>vm_area_struct</code> 结构体，该结构体定义在 <code>include/linux/mm_types.h</code> 头文件中。  以下是 <code>vm_area_struct</code> 结构体中一些重要的成员变量：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vm_area_struct</span> &#123;</span></span><br><span class="line">    <span class="comment">/* VMA 的起始和结束虚拟地址 */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> vm_start;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> vm_end;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* VMA 的访问权限 */</span></span><br><span class="line">    <span class="type">pgprot_t</span> vm_page_prot;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* VMA 的标志位，例如 VM_READ、VM_WRITE、VM_EXEC 等 */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> vm_flags;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 指向 VMA 所属进程的 mm_struct 结构体指针 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span> * <span class="title">vm_mm</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 指向下一个 VMA 的指针 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">vm_area_struct</span> *<span class="title">vm_next</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 指向映射文件的 file 结构体指针 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file</span> * <span class="title">vm_file</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 文件映射的起始偏移量 */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> vm_pgoff;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ... 其他成员变量 ... */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p><strong>虚拟内存区域</strong></p>
<p>常见的虚拟内存区域，每个区域通常对应一个或多个 VMA：</p>
<ul>
<li><strong>代码段 (Text Segment):</strong> 存储程序的机器指令代码，通常是只读的。</li>
<li><strong>数据段 (Data Segment):</strong> 存储程序的全局变量和静态变量，分为初始化数据段和未初始化数据段。</li>
<li><strong>堆 (Heap):</strong> 用于动态内存分配，通过 malloc()、calloc()、realloc() 等函数管理。</li>
<li><strong>栈 (Stack):</strong> 用于函数调用，存储函数参数、局部变量、返回地址等信息。</li>
<li><strong>共享库映射区 (Shared Library Mapping Area):</strong> 用于映射动态链接库 (DLL) 的代码和数据。</li>
<li><strong>内存映射文件 (Memory-Mapped Files):</strong> 使用 mmap() 系统调用将文件映射到内存中。</li>
<li><strong>匿名映射 (Anonymous Mapping):</strong> 不对应于任何文件的内存映射，通常用于进程间通信或动态内存分配。</li>
</ul>
<p>tiny_os</p>
<p>内存池创建：</p>
<p>1.kernel创建内核内存池和用户内存池，两个池均位于物理地址0x0009a000；分别管理物理内存的0x00102000~?和0x?(大小为物理内存剩下的一半)</p>
<p>2.kernel创建kernel的虚拟地址池，位于kbm和ubm之后；管理0xc0100000~?(大小同内核内存池)的虚拟地址</p>
<p>3.初始化内核内存池，用户内存池，虚拟地址池，</p>
<p>申请内存过程：</p>
<p>1.在虚拟地址池中申请连续虚拟内存</p>
<p>扫描虚拟地址池位图，判断是否可申请对应页数；若允许，修改位图并返回页<strong>起始虚拟地址</strong>。</p>
<p>2.在给定的物理内存池中逐一申请物理页(不要求连续)</p>
<p>判断需要在哪个物理池中进行申请；扫描物理地址池位图，修改位图并返回单页<strong>起始物理地址</strong>，重复。</p>
<p>3.通过页表建立虚拟页与物理页的映射关系.</p>
<p>将多页虚拟地址差分为单页，传入单页虚拟地址的和单页物理地址；</p>
<p>将虚拟地址高10位作为页目录索引v_pdi，中10位作为页表索引v_pti；</p>
<p>若页目录索引v_pdi处存在PDE，使用单页物理地址构造页表项PTE，写入PDE指向的页表的页表索引v_pti处；</p>
<p>若页目录索引v_pdi处为空，在内核中申请一个物理页作为页表，使用单页物理地址构造页表项PTE，写入PDE指向的页表的页表索引v_pti处；</p>
<p>申请过程中会将所申请到的页清理干净</p>
<h3 id="动态加载与缺页"><a href="#动态加载与缺页" class="headerlink" title="动态加载与缺页"></a>动态加载与缺页</h3><p><strong>缺页中断存在两种情况</strong></p>
<ol>
<li><strong>页表项存在，但 Present 位为 0:</strong> 这表示该虚拟地址已经映射到某个物理页面，但该页面当前不在物理内存中，可能被换出到磁盘了。 这种情况下，缺页中断处理程序需要将页面从磁盘加载到内存中，并更新页表项。</li>
<li><strong>页表项不存在：</strong> 这表示该虚拟地址尚未映射到任何物理页面。 这通常发生在程序第一次访问该地址时，例如访问未初始化的数据段、堆区或动态链接库。 这种情况下，缺页中断处理程序需要分配一个新的物理页面，并将虚拟地址映射到该页面，然后才会允许程序继续执行。</li>
</ol>
<p><strong>加载dll文件</strong></p>
<ul>
<li><strong>查找 DLL 文件：</strong> 根据文件名在磁盘上搜索 DLL 文件。</li>
<li><strong>分配虚拟地址空间：</strong> 在进程的虚拟地址空间中找到一块足够大的空闲区域，用于映射 DLL 文件。 <strong>这一步就决定了 DLL 会被加载到哪个虚拟地址范围。</strong></li>
<li><strong>创建 VMA：</strong> 为 DLL 创建一个虚拟内存区域 (VMA)，记录 DLL 的起始地址、大小、访问权限等信息。</li>
<li><strong>修改页表：</strong> 此时，操作系统<strong>并不会</strong>立即为 DLL 分配物理页面，也不会将 DLL 文件内容加载到内存中。 它只是修改进程的页表，将 DLL 文件的映射信息写入页表，并将这些页表项标记为<strong>无效</strong> (例如，Present 位为 0)。</li>
<li><strong>处理重定位表：</strong> DLL 文件中包含一个重定位表，记录了 DLL 代码和数据中需要进行地址修正的位置。 加载器会根据 DLL 的加载地址，修改重定位表中的地址，确保 DLL 能够正确访问自身和其他模块的代码和数据。</li>
</ul>
<p><strong>加载文件</strong></p>
<ul>
<li><strong>系统调用：</strong> 进程使用 read()、write() 等系统调用来读写文件。</li>
<li><strong>文件描述符表：</strong> 内核根据文件描述符，在进程的文件描述符表中找到对应的文件表项指针。</li>
<li><strong>文件表项：</strong> 内核访问文件表项，获取文件的当前偏移量、访问模式等信息。</li>
<li><strong>虚拟文件系统 (VFS)：</strong> 内核调用虚拟文件系统 (VFS) 的函数，将文件操作转换为具体文件系统的操作。</li>
<li><strong>具体文件系统：</strong> 具体文件系统（例如，ext4、NTFS）负责将文件数据从磁盘读取到内核缓冲区，或者将内核缓冲区中的数据写入磁盘。</li>
<li><strong>数据拷贝：</strong> 内核将数据在内核缓冲区和用户空间缓冲区之间进行拷贝。</li>
</ul>
<blockquote>
<p>为什么不直接将用户进程的一部分虚拟地址空间映射到内存中文件</p>
<p>考虑多个进程访问一个文件的情况：进程直接修改内存中的文件原件会导致同步文件（如同时写导致的数据丢失），还有安全风险、无法充分利用文件系统的缓存机制的问题。</p>
<p>对比 <code>mmap()</code></p>
<p>mmap() 系统调用提供了多种不同的映射方式，包括：</p>
<ul>
<li><strong>文件映射：</strong> 将文件内容映射到进程地址空间，可以高效地读取和修改文件数据。</li>
<li><strong>匿名映射：</strong> 创建不对应于任何文件的内存映射，可用于进程间通信、动态内存分配等。</li>
<li><strong>设备映射：</strong> 将设备寄存器或其他硬件资源映射到进程地址空间，方便用户程序直接访问硬件。</li>
</ul>
<p>使用mmap就可以达到上面讲的那种情况了</p>
<p>PS：mmap允许将相同的物理地址映射到两个不同的进程中不同的虚拟地址空间上，这样就实现了IPC进程间通信，隔壁Binder机制就是这么做的</p>
<ul>
<li><strong>MAP_SHARED 标志：</strong> 当使用 mmap() 创建映射时，可以通过指定 MAP_SHARED 标志来实现共享内存。 使用该标志时，多个进程对映射区域的修改对所有进程可见。</li>
</ul>
</blockquote>
<ul>
<li><strong>更新文件偏移量：</strong> 内核更新文件表项中的文件偏移量，以便下次读写操作从正确的位置开始。</li>
</ul>
<h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><h3 id="i节点"><a href="#i节点" class="headerlink" title="i节点"></a>i节点</h3><img src="/2024/04/12/Op-sys-Learning-Record/image-20240714155420209.png" class="" title="image-20240714155420209">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240714155445517.png" class="" title="image-20240714155445517">



<h3 id="文件打开"><a href="#文件打开" class="headerlink" title="文件打开"></a>文件打开</h3><img src="/2024/04/12/Op-sys-Learning-Record/image-20240714155625208.png" class="" title="image-20240714155625208">



<img src="/2024/04/12/Op-sys-Learning-Record/image-20240714155718673.png" class="" title="image-20240714155718673">

<p> <code>open()</code> 函数返回的指针是进程数据结构中文件指针数组的一个索引。具体来说，当一个文件被打开时，<code>open()</code> 函数会在进程的数据结构中分配一个文件指针数组的索引（在图的最左边），并将其指向文件表（<code>file_table</code>）中的一个条目。在文件表条目中包含了文件的状态标志、引用计数、inode指针和文件位置等信息。</p>
<p>在实际使用中，<code>open()</code> 函数返回的值是文件描述符（file descriptor），它是一个非负整数，通常从0开始递增。这个文件描述符对应于进程数据结构中文件指针数组的一个索引。</p>
<blockquote>
<p>注意，同一个进程多次打开同一个文件，会在系统的打开文件表中新增多个项，因为打开文件表中的项记录了打开文件的权限（eg.: 只读），多次打开时的设置可能不一样</p>
</blockquote>
<p><strong>文件描述符的值</strong></p>
<p>在一个典型的UNIX系统中，文件描述符的值可能是：</p>
<ul>
<li><code>0</code> 对应标准输入（stdin）</li>
<li><code>1</code> 对应标准输出（stdout）</li>
<li><code>2</code> 对应标准错误（stderr）</li>
</ul>
<p>其他文件描述符值将分配给用户打开的文件。例如，<code>open()</code> 函数第一次被调用时，可能返回 <code>3</code>，表示第一个用户打开的文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">进程</span><br><span class="line">+--------------------+</span><br><span class="line">| FD Table (进程)    |</span><br><span class="line">| +-----+------------|</span><br><span class="line">| | 0   | stdin      |</span><br><span class="line">| | 1   | stdout     |</span><br><span class="line">| | 2   | stderr     |</span><br><span class="line">| | ... | ...        |</span><br><span class="line">| | 3   | device_fd  | --&gt; 文件表项 --&gt; inode (device)</span><br><span class="line">| | 4   | property_fd| --&gt; 文件表项 --&gt; inode (property)</span><br><span class="line">| | 5   | socket_fd  | --&gt; 文件表项 --&gt; 套接字结构</span><br><span class="line">| | 6   | pipe_read_fd | --&gt; 文件表项 --&gt; 管道缓冲区</span><br><span class="line">| | 7   | pipe_write_fd| --&gt; 文件表项 --&gt; 管道缓冲区</span><br><span class="line">+-----+--------------+</span><br></pre></td></tr></table></figure>

<blockquote>
<p>关于pipe</p>
<p>在一个进程中创建一个管道时，使用 <code>pipe</code> 系统调用会返回两个文件描述符，一个用于读端 (<code>pipe_read_fd</code>)，一个用于写端 (<code>pipe_write_fd</code>)。这两个文件描述符指向不同的文件表项，但文件表项指向相同的管道缓冲区。</p>
<p>操作系统不会在内存中创建新的inode节点，因为管道是内存数据结构，并不与文件系统实体关联</p>
<p>假定当前进程是一个shell，而它调用fork()产生两个子进程，从而创建一个两阶段管道，具体步骤如下：</p>
<p>1，使用pipe() 创建管道。必须首先做到这一点，以便主进程创建的两个子进程能够继承打开的文件描述符。</p>
<p>2，调用fork()，产生我们的“生产者进程”。该进程的标准输出流向管道。在该子进程中进行如下操作：</p>
<p>  a, 因为生产者进程不需要管道的读取端所以使用 close(pipefd[0]) 关闭它。 </p>
<p>  b,使用close(STDOUT_FILENO)，（即1）关闭最初的标准输出。  </p>
<p>  c,使用dup(pipefd[1])将管道的写入端改变为文件描述符1.  </p>
<blockquote>
<p>dup 函数创建一个新的文件描述符，指向与 oldfd 相同的打开文件表项。新文件描述符的值将是当前进程中可用的最小未使用的文件描述符。此处即为刚才关闭的标准输出，文件描述符1。</p>
</blockquote>
<p>  d,我们不需要打开的文件描述符的两份拷贝，所以使用close(pipefd[1])关闭一个。 </p>
<blockquote>
<p> 注意关闭未使用的管道文件描述符的重要性。因为直到最后一个打开的文件描述符关闭，文件才真正关闭，即使多个进程共享文件描述符时也是如此。因为只有所有的写入端拷贝都被关闭，从管道读取数据 的进程才会知道是否到达文件末尾，所以关闭未使用的文件描述符至关重要。</p>
</blockquote>
<p> e,调用exec()启动运行的程序。</p>
<p>3，调用fork()产生我们的“消费者进程“，该进程的标准输入来自于管道。该子进程中的和生产者的步骤相似，</p>
<p> a,因为右侧的子进程不需要管道的输入端所以使用close(pipefd[1]) 关闭它。</p>
<p> b,使用close(STDIN_FILENO)关闭最初的标准输入。STDIN_FILENO为 0</p>
<p> c,使用dup(pipefd[0])将管道的读取端（输入）改变为文件描述符0.</p>
<p> d,使用close(pipefd[0])关闭文件描述符的一个拷贝。</p>
<p> e,调用exec()启动运行的程序。</p>
<p>4，父进程关闭管道的两端close(pipefd[0]),close(pipefd[1])。</p>
<p>5，最后，在父进程中使用wait等待两个子进程的结束。</p>
</blockquote>
<blockquote>
<p>关于socket</p>
<p>内核会执行以下操作：</p>
<ol>
<li><p><strong>分配资源：</strong> 在内核空间中分配一个新的 socket 数据结构，用于存储 socket 的相关信息，例如：协议族、套接字类型、本地地址、远程地址、连接状态等。</p>
</li>
<li><p><strong>创建文件表项：</strong> 为 socket 创建一个文件表项，并将其添加到系统打开文件表中。文件表项中包含指向 socket 数据结构的指针以及其他文件操作相关的信息。</p>
</li>
<li><p><strong>分配文件描述符：</strong> 在进程的文件描述符表中找到一个最小的未使用的文件描述符，并将其指向新创建的文件表项。</p>
</li>
</ol>
</blockquote>
<p><strong>文件表中的值</strong></p>
<p>文件表（<code>file_table</code>）中的每个条目（<code>struct file</code>）可能包含以下信息：</p>
<ul>
<li><code>f_flags</code>：文件状态标志，如只读、只写或读写。<blockquote>
<p> 注意：poll系统调用监视的就是这个值的变化</p>
</blockquote>
</li>
<li><code>f_count</code>：引用计数，表示当前有多少进程共享此文件。</li>
<li><code>f_inode</code>：指向内存中i节点结构的指针，包含文件的元数据。</li>
<li><code>f_pos</code>：文件位置指针，表示当前文件的读写位置。</li>
</ul>
<p>文件表在系统中的组织方式如下：</p>
<ul>
<li><strong>每个进程有自己的文件指针数组</strong>：每个进程都有一个文件指针数组，存储文件描述符到文件表条目的映射。</li>
<li><strong>全局文件表</strong>：文件表是内核中的全局结构，所有进程共享一个文件表。文件表中的每个条目存储了文件的状态和位置信息。</li>
</ul>
<p>示例</p>
<p>假设有两个进程A和B，同时打开了同一个文件。文件表和文件指针数组可能如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">进程A的文件指针数组:</span><br><span class="line">[0] -&gt; stdin</span><br><span class="line">[1] -&gt; stdout</span><br><span class="line">[2] -&gt; stderr</span><br><span class="line">[3] -&gt; file_table[5]</span><br><span class="line"></span><br><span class="line">进程B的文件指针数组:</span><br><span class="line">[0] -&gt; stdin</span><br><span class="line">[1] -&gt; stdout</span><br><span class="line">[2] -&gt; stderr</span><br><span class="line">[3] -&gt; file_table[5]</span><br><span class="line"></span><br><span class="line">全局文件表(file_table):</span><br><span class="line">[0] - 空闲</span><br><span class="line">[1] - 空闲</span><br><span class="line">...</span><br><span class="line">[5] -&gt; &#123;</span><br><span class="line">    f_flags: O_RDWR,  // 读写标志</span><br><span class="line">    f_count: 2,      // 引用计数为2，因为两个进程都打开了这个文件</span><br><span class="line">    f_inode: 指向i节点,</span><br><span class="line">    f_pos: 0         // 文件位置</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">[63] - 空闲</span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>open()</code> 函数在进程A和B中分别返回了 <code>3</code>，指向了文件表中的同一个条目（<code>file_table[5]</code>），并且引用计数为 <code>2</code>。</p>
<h2 id="字符设备与块设备"><a href="#字符设备与块设备" class="headerlink" title="字符设备与块设备"></a>字符设备与块设备</h2><p>控制设备的<strong>内核模块</strong>被成为<strong>设备驱动程序</strong>，一个设备驱动程序控制一类设备</p>
<p>e.g.: 一个磁盘驱动程序控制所有的磁盘设备</p>
<p>部分驱动程序控制的是<strong>软设备</strong>，软设备不存在对应的物理设备</p>
<p>在 Linux 系统中，硬件设备被抽象为文件，称为设备文件。这些文件通常位于 &#x2F;dev 目录下，用户可以通过文件操作函数来访问硬件设备</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240714193850691.png" class="" title="image-20240714193850691">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240714194037398.png" class="" title="image-20240714194037398">



<h3 id="字符设备"><a href="#字符设备" class="headerlink" title="字符设备"></a>字符设备</h3><p>字符设备是一种以字节流的方式进行数据传输的设备，它每次只传输一个字节的数据，并且数据传输没有缓存</p>
<ul>
<li>键盘、鼠标：每次按键或移动鼠标都会产生一个字符流。</li>
<li>串口、并口：数据以字节流的形式进行传输。</li>
<li>终端设备 (tty, Teletypewriter)：用于与用户交互，每次输入或输出一个字符。</li>
</ul>
<h4 id="TTY"><a href="#TTY" class="headerlink" title="TTY"></a>TTY</h4><img src="/2024/04/12/Op-sys-Learning-Record/image-20240714194408562.png" class="" title="image-20240714194408562">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240714194437093.png" class="" title="image-20240714194437093">

<img src="/2024/04/12/Op-sys-Learning-Record/image-20240714194601289.png" class="" title="image-20240714194601289">

<blockquote>
<p>键盘按键如何到达进程的</p>
<p><strong>1. 硬件中断：</strong></p>
<ul>
<li>当按下或释放键盘上的一个键时，键盘控制器（Keyboard Controller）会生成一个硬件中断信号，发送给中断控制器（Interrupt Controller）。</li>
<li>中断控制器会根据中断优先级和其他因素，决定是否将该中断信号传递给 CPU。</li>
</ul>
<p><strong>2. 中断处理程序：</strong></p>
<ul>
<li><p>终端驱动程序（Terminal Driver）会注册一个中断处理程序，专门处理来自键盘的中断。</p>
</li>
<li><p>如果 CPU 接受了中断请求，它会暂停当前正在执行的任务，转而执行键盘中断处理程序（Interrupt Handler）。当键盘中断发生时，终端驱动的中断处理程序会被调用，它会将扫描码转换为 ASCII 码或 Unicode 码等字符编码。</p>
</li>
<li><p>中断处理程序会读取键盘控制器中的数据，获取按键的扫描码（Scan Code），它代表了按下或释放的具体键位。终端驱动程序会将转换后的字符存储在一个缓冲区（Buffer）中，等待用户程序读取。</p>
</li>
</ul>
<p><strong>3. 用户程序：</strong></p>
<ul>
<li>当用户程序（例如 shell 或文本编辑器）需要获取键盘输入时，它会调用系统调用（System Call）读取终端设备文件（例如 &#x2F;dev&#x2F;tty）。</li>
<li>终端驱动程序会将缓冲区中的字符返回给用户程序，用户程序就可以根据这些字符执行相应的操作了。</li>
</ul>
</blockquote>
<h3 id="块设备"><a href="#块设备" class="headerlink" title="块设备"></a>块设备</h3><p>块设备是一种以数据块为单位进行数据传输的设备，它可以随机访问数据块，并且数据传输通常有缓存</p>
<ul>
<li>硬盘、SSD：数据以块的形式存储和读取。</li>
<li>USB 存储设备：例如 U 盘、移动硬盘等。</li>
<li>CD&#x2F;DVD 光驱：数据以扇区 (sector) 为单位存储，每个扇区通常为 512 字节。</li>
</ul>
<h2 id="kernel程序"><a href="#kernel程序" class="headerlink" title="kernel程序"></a>kernel程序</h2><h3 id="VX6-kernel程序内容"><a href="#VX6-kernel程序内容" class="headerlink" title="VX6 kernel程序内容"></a>VX6 kernel程序内容</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kinit：设置好页表分配器（page allocator）</span><br><span class="line"></span><br><span class="line">kvminit：为kernel分配页表，将低地址设备映射到kernel地址空间（即在kernel页表中写入PTE指向设备）</span><br><span class="line"></span><br><span class="line">kvminithart：页表开始生效，程序计数器将会通过MMU翻译为物理地址</span><br><span class="line"></span><br><span class="line">processinit：设置好初始进程或者说设置好进程表单</span><br><span class="line"></span><br><span class="line">trapinit/trapinithart：设置好user/kernel mode转换代码</span><br><span class="line"></span><br><span class="line">plicinit/plicinithart：设置好中断控制器PLIC（Platform Level Interrupt Controller），我们后面在介绍中断的时候会详细的介绍这部分，这是我们用来与磁盘和console交互方式</span><br><span class="line"></span><br><span class="line">binit：分配buffer cache</span><br><span class="line"></span><br><span class="line">iinit：初始化inode缓存</span><br><span class="line"></span><br><span class="line">fileinit：初始化文件系统</span><br><span class="line"></span><br><span class="line">virtio_disk_init：初始化磁盘</span><br><span class="line"></span><br><span class="line">userinit：最后当所有的设置都完成了，操作系统也运行起来了，会通过userinit运行第一个进程</span><br></pre></td></tr></table></figure>



<h3 id="tiny-os-kernel程序内容"><a href="#tiny-os-kernel程序内容" class="headerlink" title="tiny-os kernel程序内容"></a>tiny-os kernel程序内容</h3><p>loader程序与kernel程序对比</p>
<p>loader为纯二进制程序 ，仅包含机器码，根据机器码内容装载至内存后直接开始运行；</p>
<p>kernel为elf文件，存在文件头，节等内容，在进行segment展开后成为可运行的机器码</p>
<img src="/2024/04/12/Op-sys-Learning-Record/image-20240421144651548.png" class="" title="image-20240421144651548">



<p>kernel代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//interrupt.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">idt_init</span><span class="params">()</span> &#123;</span><br><span class="line">    idt_desc_init(); <span class="comment">//创建门描述符，写入属性和一阶中断程序入口地址，填入idt</span></span><br><span class="line">    exception_handler_init();</span><br><span class="line">    <span class="comment">//异常处理函数初始化，创建中断处理函数，使一阶中断程序有可用调用的函数</span></span><br><span class="line">    pic_init(); <span class="comment">//初始化主片8259A</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将idt地址写入idtr</span></span><br><span class="line">    <span class="type">uint64_t</span> idt_operand = ((<span class="keyword">sizeof</span>(idt) - <span class="number">1</span>) | ((<span class="type">uint64_t</span>) ((<span class="type">uint32_t</span>) idt &lt;&lt; <span class="number">16</span>)));</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(<span class="string">&quot;lidt %0&quot;</span> : : <span class="string">&quot;m&quot;</span> (idt_operand))</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//timer.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">timer_init</span><span class="params">()</span> &#123;</span><br><span class="line">    frequency_set(COUNTER0_PORT, COUNTER0_NO, READ_WRITE_LATCH, COUNTER_MODE, COUNTER0_VALUE);<span class="comment">//设置8253发中断的周期</span></span><br><span class="line">    register_handler(<span class="number">0x20</span>, intr_timer_handler);</span><br><span class="line">    <span class="comment">//触发0x20中断时调用intr_timer_handler函数，用于进行调度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//memory.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">mem_init</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> total_memory = (*(<span class="type">uint32_t</span>*) (<span class="number">0xb00</span>));</span><br><span class="line">    mem_pool_init(total_memory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//init.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_all</span><span class="params">()</span> &#123;</span><br><span class="line">    idt_init();</span><br><span class="line">    timer_init</span><br><span class="line">    <span class="title function_">mem_init</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//thread.h</span></span><br><span class="line"><span class="keyword">struct</span> task_struct* <span class="title function_">thread_start</span><span class="params">(<span class="type">char</span>* name, <span class="type">int</span> prio, thread_func function, <span class="type">void</span>* func_args)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span>* <span class="title">thread</span> =</span> get_kernel_pages(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//此为内核拉起的内核线程，故申请内核页作为PCB</span></span><br><span class="line"></span><br><span class="line">    init_thread(thread, name, prio);</span><br><span class="line">    <span class="comment">//将申请到的内核页清空并写入PCB中的属性</span></span><br><span class="line">    </span><br><span class="line">    thread_create(thread, function, func_args);</span><br><span class="line">    <span class="comment">//初始化PCB中的栈，创建中断栈和线程栈，压入线程需要执行的函数的相关数据和寄存器初始值</span></span><br><span class="line"></span><br><span class="line">    ASSERT(!list_find(&amp;thread_ready_list, &amp;thread-&gt;general_tag));</span><br><span class="line">    list_append(&amp;thread_ready_list, &amp;thread-&gt;general_tag);</span><br><span class="line">    <span class="comment">//将线程加入就绪队列，general_tag为就绪队列/运行队列/阻塞队列等使用</span></span><br><span class="line"></span><br><span class="line">    ASSERT(!list_find(&amp;thread_all_list, &amp;thread-&gt;all_list_tag));</span><br><span class="line">    list_append(&amp;thread_all_list, &amp;thread-&gt;all_list_tag);</span><br><span class="line">    <span class="comment">//将线程加入系统线程队列，all_list_tag为系统线程队列使用</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(<span class="string">&quot;movl %0, %%esp; pop %%ebp; pop %%ebx; pop %%edi; pop %%esi; ret&quot;</span> : : <span class="string">&quot;g&quot;</span> (thread-&gt;self_kstack) : <span class="string">&quot;memory&quot;</span>)</span>;</span><br><span class="line">    <span class="comment">//将压栈的寄存器初始值弹栈，ret将线程需要执行的函数的相关数据弹栈并前往执行</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> thread;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//main.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    init_all();</span><br><span class="line">    thread_start(<span class="string">&quot;k_thread_1&quot;</span>, <span class="number">31</span>, k_thread_function, <span class="string">&quot;skywalker &quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>operation system</category>
      </categories>
      <tags>
        <tag>operation system</tag>
      </tags>
  </entry>
  <entry>
    <title>pytorch_learning_record</title>
    <url>/2024/05/08/pytorch-learning-record/</url>
    <content><![CDATA[<p>dqn与pytorch</p>
<span id="more"></span>

<h1 id="pytorch-learning-record"><a href="#pytorch-learning-record" class="headerlink" title="pytorch_learning_record"></a>pytorch_learning_record</h1><h2 id="Tensor"><a href="#Tensor" class="headerlink" title="Tensor"></a>Tensor</h2><p>附带额外属性的标量，二维数组，多维数组…</p>
<p>主要属性</p>
<ul>
<li><p>T: dimensions reversed</p>
</li>
<li><p>H: 共轭转置</p>
</li>
<li><p>data: 值</p>
</li>
<li><p>grad_fn: 创建该Tensor所使用的函数，在子节点标记为requires_grad时存在</p>
</li>
<li><p>requires_grad: 该Tensor是否需要梯度，生成该Tensor的子节点若为true，该节点同为true</p>
</li>
<li><p>is_leaf: 指示是否叶子节点</p>
</li>
<li><p>dtype: 张量的数据类型，如 torch.FloatTensor，torch.cuda.FloatTensor</p>
</li>
<li><p>shape: 张量的形状。如 (64, 3, 224, 224)</p>
</li>
<li><p>device: 张量所在设备 (CPU&#x2F;GPU)</p>
</li>
<li><p>grad: 张量的梯度，该属性在进行backforward后被填充，非叶节点默认为None。节点的grad属性值在每次backward后进行值的追加</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.tensor(data, dtype=<span class="literal">None</span>, device=<span class="literal">None</span>, requires_grad=<span class="literal">False</span>, pin_memory=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">t= torch.tensor(arr)</span><br><span class="line"></span><br><span class="line">a = torch.tensor([<span class="number">1.</span>], requires_grad=<span class="literal">True</span>)  <span class="comment"># 1.的原因是Only Tensors of floating point and complex dtype can require gradients</span></span><br></pre></td></tr></table></figure>



<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>Add代表加法；</p>
<p>Sub代表减法；</p>
<p>Mul代表乘法；</p>
<p>Mm代表矩阵乘法；</p>
<p>Div代表除法；</p>
<p>T代表矩阵转置；</p>
<p>Pow代表乘方；</p>
<p>Squeeze, Unsqueeze, Relu, Sigmoid？</p>
<h2 id="计算图"><a href="#计算图" class="headerlink" title="计算图"></a>计算图</h2><p>pytorch为动态图计算机制，在每一次反向传播计算梯度的循环内，pytorch先建立正向计算图，然后使用反向传播计算梯度，同时被销毁计算图</p>
<p>自动求导机制中只保存叶子节点的grad，中间tensor即使是requires_grad &#x3D; True在计算完成梯度后会自动释放以节省空间，不会保存，即在进行backward后 中间tensor.grad &#x3D; None</p>
<p>y &#x3D; (x + w) * (w + 1)</p>
<p>a &#x3D; x+w</p>
<p>b &#x3D; w + 1</p>
<img src="/2024/05/08/pytorch-learning-record/image-20240508155001152.png" class="" title="image-20240508155001152">



<p>通常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">w = torch.tensor([<span class="number">1.</span>], requires_grad=<span class="literal">True</span>)</span><br><span class="line">x = torch.tensor([<span class="number">2.</span>], requires_grad=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># y=(x+w)*(w+1)</span></span><br><span class="line">a = torch.add(w, x)</span><br><span class="line">b = torch.add(w, <span class="number">1</span>)</span><br><span class="line">y = torch.mul(a, b)</span><br><span class="line"></span><br><span class="line">y.backward()  <span class="comment"># backward方法默认释放计算图</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(w.grad)</span><br><span class="line"><span class="built_in">print</span>(x.grad)</span><br><span class="line"><span class="built_in">print</span>(a.grad)  <span class="comment"># 非叶子节点的梯度为空，可使用retain_grad()保留</span></span><br><span class="line"><span class="built_in">print</span>(b.grad)  <span class="comment"># 非叶子节点的梯度为空，可使用retain_grad()保留</span></span><br></pre></td></tr></table></figure>



<p>自动梯度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.autograd.grad(outputs,</span><br><span class="line">	inputs,grad_outputs=<span class="literal">None</span>,</span><br><span class="line">	retain_graph=<span class="literal">None</span>,create_graph=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># outputs对inputs求导</span></span><br><span class="line"><span class="comment"># create_graph: 创建计算图</span></span><br><span class="line"><span class="comment"># retain_graph: 保存计算图</span></span><br><span class="line"><span class="comment"># grad_outputs: 多梯度权重</span></span><br><span class="line">	</span><br><span class="line">x = torch.tensor([<span class="number">3.</span>], requires_grad=<span class="literal">True</span>)</span><br><span class="line">y = torch.<span class="built_in">pow</span>(x, <span class="number">2</span>)     <span class="comment"># y = x**2</span></span><br><span class="line"></span><br><span class="line">grad_1 = torch.autograd.grad(y, x, create_graph=<span class="literal">True</span>)   <span class="comment"># grad_1 = dy/dx = 2x = 2 * 3 = 6</span></span><br><span class="line"><span class="built_in">print</span>(grad_1)</span><br><span class="line"></span><br><span class="line">grad_2 = torch.autograd.grad(grad_1[<span class="number">0</span>], x)              <span class="comment"># grad_2 = d(dy/dx)/dx = d(2x)/dx = 2，create_graph=True的作用在此，使grad_1的grad_fn属性存在，可以继续求导</span></span><br><span class="line"><span class="built_in">print</span>(grad_2)</span><br></pre></td></tr></table></figure>



<p>torchviz</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.tensor([<span class="number">1</span>],dtype=torch.float32,requires_grad=<span class="literal">True</span>)</span><br><span class="line">w = torch.tensor([<span class="number">4</span>],dtype=torch.float32,requires_grad=<span class="literal">True</span>)</span><br><span class="line">b = torch.tensor([<span class="number">0.5</span>],dtype=torch.float32,requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">h = w*x + b</span><br><span class="line">graph_forward = make_dot(h)</span><br></pre></td></tr></table></figure>

<p>图中节点的说明（以下由 AI 生成，使用的模型为 ChatGPT ）：</p>
<ul>
<li>AccumulateGrad: 这个节点表示梯度的累积。在反向传播过程中，梯度是被累积的，因为在每一次反向传播调用中，梯度都会被计算并加到之前的梯度上，以便进行梯度下降更新。</li>
<li>TBackward0: 这个节点通常代表Tensor的反向传播操作。当在Tensor上进行某些操作并计算梯度时，这个节点将会出现，表示该Tensor的反向传播。</li>
<li>AddmmBackward0: 这是矩阵乘法操作的反向传播。在神经网络中，矩阵乘法常用于线性层（fully connected layer）的计算，而这个节点则表示反向传播的计算。</li>
<li>ConvolutionBackward0: 这是卷积操作的反向传播。在卷积神经网络中，卷积操作是一种常见的操作，这个节点表示卷积层的反向传播计算。</li>
<li>MaxPool2DWithIndicesBackward0: 这个节点是最大池化操作的反向传播。在最大池化层中，通过取池化窗口中的最大值来减小输入的空间大小，这个节点表示最大池化操作的反向传播。</li>
<li>ReluBackward0: 这是ReLU激活函数的反向传播。ReLU函数是一种常用的非线性激活函数，在深度学习中广泛使用。这个节点表示ReLU函数的反向传播计算。</li>
<li>ReshapeAliasBackward0: 这个节点是reshape操作的反向传播。当对张量进行reshape操作时，这个节点表示reshape操作的反向传播计算。</li>
</ul>
<img src="/2024/05/08/pytorch-learning-record/image-20240508181305285.png" class="" title="image-20240508181305285">



<h2 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Optimizer</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, params, defaults</span>): </span><br><span class="line">        self.defaults = defaults</span><br><span class="line">        self.state = defaultdict(<span class="built_in">dict</span>)</span><br><span class="line">        self.param_groups = []  <span class="comment"># 优化器所管理的参数组</span></span><br><span class="line">        </span><br><span class="line">        self.optimizer = </span><br><span class="line">        </span><br><span class="line">torch.optim.Adam(self.eval_net.parameters(), lr=LR) <span class="comment">#  lr为学习率</span></span><br></pre></td></tr></table></figure>



<p>optimizer.step()</p>
<p>优化器执行一次梯度更新</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">weight = torch.randn((<span class="number">2</span>, <span class="number">2</span>), requires_grad=<span class="literal">True</span>)</span><br><span class="line">weight.grad = torch.ones((<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">optimizer = optim.SGD([weight], lr=<span class="number">0.1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;weight before step:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(weight.data))</span><br><span class="line">optimizer.step()        <span class="comment"># lr为0.1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;weight after step:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(weight.data))</span><br></pre></td></tr></table></figure>

<p>即为weight.data - 0.1 * [[1, 1], [1, 1]]</p>
<p>optimizer.zero_grad()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">zero_grad</span>(<span class="params">self</span>):  <span class="comment"># 循环将所管理的tensor的grad清零</span></span><br><span class="line">    <span class="keyword">for</span> group <span class="keyword">in</span> self.param_groups:</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> group[<span class="string">&#x27;params&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span> p.grad <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                p.grad.detach_()</span><br><span class="line">                p.grad.zero_()</span><br></pre></td></tr></table></figure>





<h2 id="nn-Module"><a href="#nn-Module" class="headerlink" title="nn.Module"></a>nn.Module</h2><p>使用 Pytorch 的 nn.Module 建立网络时，其网络内部参数自动设置为 requires_grad&#x3D;True </p>
<img src="/2024/05/08/pytorch-learning-record/image-20240511103728550.png" class="" title="image-20240511103728550">

<p>而我们使用反向传播时，其实根据全连接层的偏导数计算公式，可知链式求导和 <em>w</em> ，<em>b</em> 的梯度无关，而与其中一个连接层的输出梯度有关，这也是为什么冻结了网络的参数，还是可以输出对输入求导。如下式：</p>
<img src="/2024/05/08/pytorch-learning-record/image-20240511100910357.png" class="" title="image-20240511100910357">



<h2 id="Method-and-Attr"><a href="#Method-and-Attr" class="headerlink" title="Method and Attr"></a>Method and Attr</h2><p>.requires_grad 属性</p>
<p>在pytorch中，tensor有一个requires_grad参数，如果设置为True，则反向传播时，该tensor若为叶节点则其grad值会被写入。</p>
<p> tensor的requires_grad的属性默认为False。</p>
<p>若一个节点requires_grad被设置为True，那么它的所有子节点requires_grad都为True （即使子节点的其他父节点的requires_grad &#x3D; False）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = torch.tensor(<span class="number">5.</span>, requires_grad=<span class="literal">True</span>)  <span class="comment"># grad值为6</span></span><br><span class="line">g = torch.tensor(<span class="number">6.</span>, requires_grad=<span class="literal">False</span>) <span class="comment"># grad值为None</span></span><br><span class="line">r3 = f * g</span><br><span class="line">r3.backward()</span><br></pre></td></tr></table></figure>





<p>.grad_fn 属性</p>
<p>tensor在计算图中的父运算函数</p>
<p>.detach()与.detach_()</p>
<p>[.detach()]: <a href="https://pytorch.org/docs/stable/generated/torch.Tensor.detach.html#torch.Tensor.detach">https://pytorch.org/docs/stable/generated/torch.Tensor.detach.html#torch.Tensor.detach</a>	“Returned Tensor shares the same storage with the original one. In-place modifications on either of them will be seen, and may trigger errors in correctness checks.”</p>
<p><code>.detach_()</code>: is the inplace operation of <code>detach()</code>.</p>
<p>相同：</p>
<p>新tensor的requires_grad为False，grad_fn为None，为<strong>叶节点</strong>；</p>
<p><strong>修改新tensor时原tensor同样发生改变；</strong></p>
<p>不同：</p>
<p>m.detach()后m不发生改变，原m在计算图中的父子关系不改变；</p>
<p>m.detach_()后m发生改变，原m在计算图中和父节点断开，子节点关系不改变;</p>
<p>#与父节点断开不影响梯度传导至叶子节点？？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.tensor(<span class="number">2.</span>, requires_grad=<span class="literal">True</span>)  <span class="comment"># grad = 4</span></span><br><span class="line">b = torch.tensor(<span class="number">4.</span>, requires_grad=<span class="literal">True</span>)  <span class="comment"># grad = 2</span></span><br><span class="line">c = torch.tensor(<span class="number">6.</span>, requires_grad=<span class="literal">True</span>)  <span class="comment"># grad = 1 + 1</span></span><br><span class="line">m = a * b</span><br><span class="line">r1 = m + c</span><br><span class="line"></span><br><span class="line">m_ = m.detach()</span><br><span class="line"><span class="comment"># 执行后仅m_的requires_grad=False</span></span><br><span class="line">m_ = m.detach_()</span><br><span class="line"><span class="comment"># 执行后c和out均为requires_grad=False</span></span><br><span class="line"></span><br><span class="line">r2 = m_ + c</span><br><span class="line">r1.backward()</span><br><span class="line">r2.backward()</span><br></pre></td></tr></table></figure>









<p>torch.no_grad()</p>
<p>是一个上下文管理器，被该语句 wrap 起来的部分将不会track梯度。</p>
<p>with torch.no_grad()所包裹的语句或者@torch.no_grad()所修饰的函数中发生改变或新建的tensor的requires_grad为False</p>
<p>例外：所有factory function，或者创建一个新的tensor时显式指明requires_grad&#x3D;True，都不会受到这种模式的影响。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.tensor([<span class="number">1.</span>], requires_grad=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    y = x * <span class="number">2</span>  <span class="comment"># requires_grad=False</span></span><br><span class="line">    z = torch.tensor([<span class="number">1.</span>], requires_grad=<span class="literal">True</span>) <span class="comment">#   requires_grad=True</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">@torch.no_grad()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">doubler</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span></span><br><span class="line">z = doubler(x)</span><br></pre></td></tr></table></figure>



<p>.backward()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.tensor([<span class="number">1.</span>], requires_grad=<span class="literal">True</span>)</span><br><span class="line">b = torch.tensor([<span class="number">2.</span>], requires_grad=<span class="literal">True</span>)</span><br><span class="line">c = a**<span class="number">2</span></span><br><span class="line">d = b*c</span><br><span class="line">c.backward()  <span class="comment"># c.backward(retain_graph=True)</span></span><br><span class="line">d.backward()</span><br></pre></td></tr></table></figure>

<p>当在调用.backward()或autograd.grad()时，将释放图中保存的中间值。如果需要第二次向后遍历图，或者在调用backward后需要访问保存的张量，则指定retain_graph&#x3D;True。</p>
<p>.backward()方法仅适用于标量</p>
<p>.register_hook()</p>
<p><a href="https://oldpan.me/archives/pytorch-autograd-hook">https://oldpan.me/archives/pytorch-autograd-hook</a></p>
<p>获取中间tensor的grad值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.tensor(<span class="number">1.5</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">b = torch.tensor(<span class="number">2.0</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">c = torch.tensor(<span class="number">3.0</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">m1 = a * b</span><br><span class="line">m1.register_hook(<span class="built_in">print</span>)  <span class="comment"># 控制台输出tensor(1.)</span></span><br><span class="line">r1 = m1 + c</span><br><span class="line">r1.backward()</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>python, pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>common-commands</title>
    <url>/2024/06/22/common-commands/</url>
    <content><![CDATA[<p>常用指令</p>
<span id="more"></span>



<h1 id="Common-Commands"><a href="#Common-Commands" class="headerlink" title="Common Commands"></a>Common Commands</h1><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><p><a href="https://zhuanlan.zhihu.com/p/69746955">https://zhuanlan.zhihu.com/p/69746955</a></p>
<p>python变量，函数均为对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>() : </span><br><span class="line">    <span class="comment">#函数在创建时同时生成变量对象hello和函数对象（函数对象名为hello）</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    x=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(test())<span class="comment">#函数默认返回值为None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">say = hello</span><br><span class="line"> </span><br><span class="line"><span class="keyword">del</span> hello <span class="comment">#del删除了hello变量对象</span></span><br><span class="line">say()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(say))<span class="comment">##对象属性</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(say))<span class="comment">##对象属性</span></span><br><span class="line"><span class="built_in">print</span>(say)<span class="comment">##对象属性</span></span><br><span class="line"><span class="built_in">print</span>(say.__name__) <span class="comment">##对象属性,查看对象名</span></span><br></pre></td></tr></table></figure>



<p>python类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MyClass:</span><br><span class="line">    def my_method(self, arg1, arg2):</span><br><span class="line">    #类的方法第一个参数为self</span><br><span class="line">        # 方法体</span><br><span class="line"></span><br><span class="line">#Bound Method</span><br><span class="line">obj = MyClass()#类 实例化</span><br><span class="line">obj.my_method(arg1, arg2)#实例对象调用方法</span><br><span class="line"></span><br><span class="line">#Unbound Method</span><br><span class="line">MyClass.my_method(obj, arg1, arg2)</span><br><span class="line">	#原因：可以直接通过类访问方法，但是必须指定类的实例</span><br></pre></td></tr></table></figure>



<p>函数内部函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">        x = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> test</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(hello()())</span><br><span class="line"><span class="comment">#首先hello()返回函数对象test，然后调用 test()</span></span><br></pre></td></tr></table></figure>



<p>函数装饰器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">f</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inn</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;inner&quot;</span>)</span><br><span class="line">        f()</span><br><span class="line">    <span class="keyword">return</span> inn</span><br><span class="line"></span><br><span class="line"><span class="meta">@hello</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#等价于</span></span><br><span class="line">test=hello(test)<span class="comment">#原函数对象test仍存在，变量对象test指向新函数hello(test)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#test &lt;function test at 0x000001821AE551C0&gt;</span></span><br><span class="line"><span class="comment">#test() None</span></span><br><span class="line"><span class="comment">#test为函数对象，test()为（执行函数对象后的）返回值</span></span><br><span class="line">test()</span><br><span class="line"><span class="built_in">print</span>(test.__name__)</span><br></pre></td></tr></table></figure>





<p>with语句 上下文对象管理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">with open(&#x27;myfile.txt&#x27;, &#x27;r&#x27;) as f:</span><br><span class="line">    contents = f.read()</span><br><span class="line">    print(contents)</span><br></pre></td></tr></table></figure>

<ul>
<li>**open(‘myfile.txt’, ‘r’)**：这是一个上下文管理器，它打开文件并返回一个文件对象。</li>
<li><strong>as f</strong>：将文件对象赋值给变量 f，以便在 with 代码块中使用。</li>
<li>在 with 代码块中，我们可以使用 f 读取文件内容。</li>
<li>当 with 代码块执行完毕后，文件会自动关闭，即使在读取过程中发生异常。</li>
</ul>
<p>Python类型注解</p>
<p><a href="https://zhuanlan.zhihu.com/p/419955374">https://zhuanlan.zhihu.com/p/419955374</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">say_hi</span>(<span class="params">name: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="comment">#规定函数传入参数为str类型，返回值为str类型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;Hello <span class="subst">&#123;name&#125;</span>!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mix</span>(<span class="params">scores: <span class="built_in">list</span>[<span class="built_in">int</span>], ages: <span class="built_in">dict</span>[<span class="built_in">str</span>, <span class="built_in">int</span>]</span>) -&gt; <span class="built_in">tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]:</span><br><span class="line">    <span class="comment">#容器注解</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">seq: Seq1[<span class="built_in">str</span>]</span>):</span><br><span class="line">    <span class="comment">#传入参数为（列表+元组）的泛化：序列Seq</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> seq:</span><br><span class="line">        <span class="built_in">print</span>(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">a: <span class="built_in">int</span> = <span class="number">0</span></span>) -&gt; <span class="type">Optional</span>[<span class="built_in">str</span>]:</span><br><span class="line">    <span class="comment">#可选返回值：为None或为str</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Yeah&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>() -&gt; <span class="type">Union</span>[<span class="built_in">str</span>, <span class="built_in">int</span>, <span class="built_in">float</span>]:</span><br><span class="line">    <span class="comment">#可选返回值：为str，int，float 三选一</span></span><br><span class="line">    <span class="comment">#Optional[int] 和 Union[int, None] 是等价的。</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#T为泛型，T必须为str或int</span></span><br><span class="line">T = TypeVar(<span class="string">&#x27;T&#x27;</span>, <span class="built_in">str</span>, <span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bar</span>(<span class="params">a: T, b: T</span>) -&gt; <span class="type">List</span>[T]:</span><br><span class="line">    <span class="keyword">return</span> [a, b]</span><br><span class="line"></span><br><span class="line"><span class="comment"># K的具体类型没有限制</span></span><br><span class="line">K = TypeVar(<span class="string">&quot;K&quot;</span>)</span><br></pre></td></tr></table></figure>





<h2 id="python-环境"><a href="#python-环境" class="headerlink" title="python 环境"></a>python 环境</h2><p>sudo apt-get update  # 更新包管理器</p>
<p>sudo apt-get install python3-venv  # 安装Python虚拟环境工具</p>
<p>cd &#x2F;path&#x2F;to&#x2F;your&#x2F;project</p>
<p>python3 -m venv venv</p>
<p>source venv&#x2F;bin&#x2F;activate</p>
<p>pip install -r requirements.txt</p>
<p>deactivate</p>
<p>conda指令</p>
<p>conda env list</p>
<p>conda create –name your_env_name python&#x3D;3.5 numpy scipy</p>
<p>conda remove –<em>name</em> <em>your_env_name</em> –all</p>
<p>conda install</p>
<p>​	conda install numpy&#x3D;1.9.3</p>
<p>activate your_env_name</p>
<p>deactivate</p>
<p>conda clean –all</p>
<p>当前conda虚拟环境中存在pip时，使用pip指令将优先使用环境中pip而非全局pip，可通过pip list（当前环境必须已安装pip）和 conda list 查看当前环境包列表</p>
<p>出现报错</p>
<p>PackagesNotFoundError: The following packages are not available from current channels</p>
<p>尝试在<a href="https://anaconda.org直接搜索该包并使用网站所提供的指令安装/">https://anaconda.org直接搜索该包并使用网站所提供的指令安装</a></p>
<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><ol>
<li><p>**<code>docker pull</code>**：用于从 Docker 镜像仓库下载镜像到本地主机。</p>
<ul>
<li>语法：<code>docker pull [OPTIONS] NAME[:TAG|@DIGEST]</code></li>
<li>示例：<code>docker pull ubuntu:20.04</code></li>
</ul>
<p>这个命令用于获取 Docker 镜像，其中 <code>NAME</code> 表示镜像的名称，<code>TAG</code> 表示镜像的标签，或者可以使用 <code>@DIGEST</code> 来指定镜像的摘要。如果不指定标签，将默认获取 <code>latest</code> 标签的镜像。</p>
</li>
<li><p>**<code>docker load</code>**：用于从文件加载镜像，通常是以 tar 归档文件的形式。</p>
<ul>
<li>语法：<code>docker load [OPTIONS]</code></li>
<li>示例：<code>docker load -i myimage.tar</code></li>
</ul>
<p>这个命令用于加载以 tar 归档文件格式存储的 Docker 镜像。通常用于将镜像从一个环境传输到另一个环境。</p>
</li>
<li><p>**<code>docker save</code>**：用于将 Docker 镜像保存为 tar 归档文件。</p>
<ul>
<li>语法：<code>docker save [OPTIONS] IMAGE [IMAGE...]</code></li>
<li>示例：<code>docker save -o myimage.tar myimage:tag</code></li>
</ul>
<p>这个命令允许你将一个或多个 Docker 镜像保存为 tar 归档文件，通常用于导出镜像以便在不同环境中使用。</p>
</li>
<li><p>**<code>docker run</code>**：用于创建和启动 Docker 容器。</p>
<ul>
<li>语法：<code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code></li>
<li>示例：<code>docker run -d -p 8080:80 my-web-app</code></li>
</ul>
<p>这个命令用于在 Docker 容器中运行一个镜像，你需要指定镜像的名称、容器选项（如端口映射、环境变量、容器名称等），以及容器内要执行的命令。</p>
</li>
<li><p>**<code>docker build</code>**：用于构建自定义 Docker 镜像，通常通过 Dockerfile 文件定义构建步骤。</p>
<ul>
<li>语法：<code>docker build [OPTIONS] PATH | URL | -</code></li>
<li>示例：<code>docker build -t my-custom-image .</code></li>
</ul>
<p><code>docker build</code> 命令用于基于 Dockerfile 构建自定义镜像。你需要提供包含 Dockerfile 的路径，以及可选的选项和标签。</p>
<p>Dockerfile</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用官方 Python 3 镜像作为基础镜像</span><br><span class="line">FROM python:3.8</span><br><span class="line"></span><br><span class="line"># 设置工作目录</span><br><span class="line">WORKDIR /app</span><br><span class="line"></span><br><span class="line"># 复制本地项目到容器中</span><br><span class="line">COPY ./myproject /app</span><br><span class="line"></span><br><span class="line"># 安装项目依赖</span><br><span class="line">RUN pip install -r requirements.txt</span><br><span class="line"></span><br><span class="line"># 指定容器启动命令</span><br><span class="line">CMD [&quot;python&quot;, &quot;app.py&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>




</li>
<li><p>**<code>docker rm</code>**：用于删除已停止的容器。</p>
<ul>
<li>语法：<code>docker rm [OPTIONS] CONTAINER [CONTAINER...]</code></li>
<li>示例：<code>docker rm my-container</code></li>
</ul>
<p>这个命令用于删除一个或多个已经停止的容器，释放资源并清理系统。</p>
</li>
<li><p>**<code>docker stop</code>**：用于停止运行中的容器。</p>
<ul>
<li>语法：<code>docker stop [OPTIONS] CONTAINER [CONTAINER...]</code></li>
<li>示例：<code>docker stop my-container</code></li>
</ul>
<p>这个命令用于停止一个或多个正在运行的容器，使它们从运行状态转换为停止状态。</p>
</li>
<li><p>**<code>docker ps</code>**：用于列出正在运行的容器。</p>
<ul>
<li>语法：<code>docker ps [OPTIONS]</code></li>
<li>示例：<code>docker ps -a</code></li>
</ul>
<p><code>docker ps</code> 命令用于列出当前正在运行的容器，包括容器的 ID、状态、端口映射等信息。加上 <code>-a</code> 选项可以列出所有容器，包括已停止的容器。</p>
</li>
</ol>
<h2 id="Git操作实例"><a href="#Git操作实例" class="headerlink" title="Git操作实例"></a><strong>Git操作实例</strong></h2><p><a href="https://learngitbranching.js.org/">https://learngitbranching.js.org/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在桌面创建test目录</span></span><br><span class="line"><span class="built_in">mkdir</span> /Users/wangsaichao/Desktop/test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到test目录</span></span><br><span class="line"><span class="built_in">cd</span> /Users/wangsaichao/Desktop/test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并初始化git库</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接到远程git仓库 </span></span><br><span class="line"><span class="comment"># -t 默认使用远程仓库的 main 分支，origin为远程仓库别名（替换链接）</span></span><br><span class="line">git remote add origin -t main https://github.com/xx/xxx.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将远程git库下载到本地</span></span><br><span class="line">git pull origin main</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将目录下所有文件都增加到本地库中。</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交更改到本地仓库</span></span><br><span class="line">git commit -m <span class="string">&#x27;提交注释&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将本地的master分支改为main分支, github为避免联想奴隶制。在持续的外界影响之下,默认分支由master改为main。 </span></span><br><span class="line"><span class="comment"># 但是git工具默认init还是创建的master分支 所以要改成main分支。</span></span><br><span class="line">git branch -M main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将本地修改推到github上</span></span><br><span class="line">git push -u origin main  <span class="comment"># 首次</span></span><br><span class="line">git push origin main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除文件跟踪 适用于文件夹</span></span><br><span class="line">git <span class="built_in">rm</span> -r --cached <span class="built_in">dir</span>/</span><br><span class="line"><span class="comment"># 移除文件跟踪 适用于文件</span></span><br><span class="line">git <span class="built_in">rm</span> --cached file</span><br></pre></td></tr></table></figure>

<p>commit</p>
<p>创建检查点</p>
<p>checkout</p>
<p>git checkout main  # 切换head指向main分支指针</p>
<p>git checkout C1  # 切换head指向检查点，<strong>此时head指针与main指针分离！！！</strong></p>
<blockquote>
<p>当 HEAD 指针移动到 main 分支上的非最新提交 c1 (最新提交是 c2) 后，执行commit指令</p>
<ol>
<li><strong>HEAD 指针移动:</strong> git checkout c1 命令会将 HEAD 指针移动到 c1 提交，此时处于 “分离 HEAD 状态”。</li>
<li><strong>新提交产生:</strong> 当进行新的提交时，Git 会创建一个新的提交对象 c3，并将 c1 作为 c3 的父提交。</li>
<li><strong>HEAD 指针移动:</strong> c3 提交创建后，HEAD 指针会指向新的提交 c3。</li>
</ol>
</blockquote>
<p>reset</p>
<p>git reset head~1  # 切换head指向上一检查点</p>
<p>rebase </p>
<ul>
<li>改变当前分支的基底分支，将当前分支的提交记录“复制”到目标分支的最新提交之后，并移动head指针和分支指针。</li>
</ul>
<p>(当前分支 bugFix)</p>
<p>git rebase main  # 原bugFix的内容<strong>仍然存在</strong>，只是 HEAD 指针和分支指针发生了移动，指向bugFix最新提交记录的复制。</p>
<p>merge</p>
<p>(当前分支 main)</p>
<p>git merge bugFix  # 将bugFix 分支合并到当前分支，创建新的检查点，该检查点存在两个父节点（bugFix分支的最新检查点和main分支的最新检查点），并移动head指针和分支指针。</p>
<p>fetch</p>
<ul>
<li>fetch将下载远程仓库的内容，并移动 远程指针 &lt;远程仓库名&gt;&#x2F;&lt;分支&gt; 指向与远程仓库同步的位置</li>
<li>不更新本地指针！！！这意味着，如果本地main分支指针现在指向C2，远程指针指向C1，远程仓库已更新至C3，执行fetch后会存在以下情况</li>
</ul>
<img src="/2024/06/22/common-commands/image-20240823160319940.png" class="" title="image-20240823160319940">

<img src="/2024/06/22/common-commands/image-20240823160406360.png" class="" title="image-20240823160406360">



<p>pull</p>
<ul>
<li>pull指令为fetch和merge指令的和</li>
</ul>
<h2 id="bash通配符"><a href="#bash通配符" class="headerlink" title="bash通配符"></a>bash通配符</h2><p>?表示单个字符，*表示任意个字符，[abc]表示匹配abc中任意一个字符，{a,b,c}表示匹配a或b或c</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ls [ab].txt</span><br><span class="line">a.txt b.txt</span><br><span class="line"></span><br><span class="line">$ ls *[ab].txt</span><br><span class="line">ab.txt a.txt b.txt</span><br><span class="line"></span><br><span class="line">$ echo d&#123;a,e,i,u,o&#125;g</span><br><span class="line">dag deg dig dug dog</span><br></pre></td></tr></table></figure>



<h2 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h2><p>hello.c -预处理 -E-&gt; hello.i -编译 -S-&gt; hello.s -汇编 -c-&gt; hello.o -链接 -&gt; hello</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gcc  main.cpp hello.cpp factorial.cpp -o hello</span><br></pre></td></tr></table></figure>

<p>使用gcc 将多个文件 <strong>生成</strong> 为 hello可执行文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	gcc test.c</span><br><span class="line">	将 test.c 预处理、编译、汇编并链接形成可执行文件。这里未指定输出文件，默认输出为 a.out。</span><br><span class="line"></span><br><span class="line">-o：指定生成的输出文件；</span><br><span class="line">	gcc test.c -o test</span><br><span class="line">	将 test.c 预处理、编译、汇编并链接形成可执行文件 test。-o 选项用来指定输出文件的文件名。</span><br><span class="line">	</span><br><span class="line">-E：仅执行编译预处理；</span><br><span class="line">	gcc -E test.c -o test.i</span><br><span class="line">	将 test.c 预处理输出 test.i 文件。</span><br><span class="line"></span><br><span class="line">-S：将C代码转换为汇编代码；</span><br><span class="line">	gcc -S test.i</span><br><span class="line">	将预处理输出文件 test.i 汇编成 test.s 文件。</span><br><span class="line"></span><br><span class="line">-wall：显示警告信息；</span><br><span class="line"></span><br><span class="line">-c：仅执行编译操作，不进行连接操作。</span><br><span class="line">	gcc -c test.s</span><br><span class="line">	将汇编输出文件 test.s 编译输出 test.o 文件。</span><br><span class="line"></span><br><span class="line">-l：用来指定程序要链接的库，-l参数紧接着就是库名</span><br><span class="line"></span><br><span class="line">-I：寻找头文件的目录</span><br></pre></td></tr></table></figure>



<h2 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make main</span><br><span class="line">make -f config.txt //指定makefile文件</span><br><span class="line">make --file=config.txt</span><br></pre></td></tr></table></figure>

<p>使用Make指令执行Makefile文件(make指令自动寻找当前文件夹下的Makefile文件)</p>
<p>Makefile文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;target&gt; : &lt;prerequisites&gt;	//目标，前置条件</span><br><span class="line">[tab] &lt;commands&gt;	//命令</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.PHONY: clean	//声明目标clean为伪目标</span><br><span class="line">clean:</span><br><span class="line">    rm -rf *.o</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//一个简单的实例</span><br><span class="line">main:main.o fun0.o fun1.o fun2.0	</span><br><span class="line">	gcc -o main main.o fun0.o fun1.o fun2.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//一个复杂的实例</span><br><span class="line"># Define required macros here</span><br><span class="line">SHELL = /bin/sh		//宏定义</span><br><span class="line">OBJS =  main.o factorial.o hello.o</span><br><span class="line">CFLAG = -Wall -g</span><br><span class="line">CC = gcc</span><br><span class="line">INCLUDE =</span><br><span class="line">LIBS = -lm</span><br><span class="line">hello:$&#123;OBJ&#125;	//$&#123;&#125;表示变量</span><br><span class="line">   $&#123;CC&#125; $&#123;CFLAGS&#125; $&#123;INCLUDES&#125; -o $@ $&#123;OBJS&#125; $&#123;LIBS&#125;</span><br><span class="line">clean:</span><br><span class="line">   -rm -f *.o core *.core	//类似于bash,?表示单个字符，*表示任意个字符，[abc]表示匹配abc中任意个字符，&#123;a,b,c&#125;表示匹配a或b或c</span><br><span class="line">.cpp.o:</span><br><span class="line">   $&#123;CC&#125; $&#123;CFLAGS&#125; $&#123;INCLUDES&#125; -c</span><br></pre></td></tr></table></figure>

<p>冒号左侧：目标文件</p>
<p>冒号右侧：被依赖文件，前置条件</p>
<p>前置条件决定 “目标” 是否需要重新构建。只要前置条件中列出的文件中，有任何一个文件被更新（即前置条件列出的文件的最后修改时间比目标的最后修改时间新），或者 “目标” 不存在，那 “目标” 就需要重新构建。</p>
<p>如果前置条件中列出的文件中有任何一个文件不存在，那么 Make 就需要在 Makefile 文件中寻找并执行能够生成该文件的规则，也就是说缺失文件本身也是一个 “目标”，需要先将该 “目标” 构建出来才能利用它去构建当前 “目标”（构建 A 时发现 A 需要依赖 B，所以要先构建 B 才能继续构建 A，简称递归生成依赖）。</p>
<p><code>$@</code>，<code>$^</code>，<code>$&lt;</code> 这种符号，这种符号称为自动变量。自动变量是局部变量，作用域范围在当前的规则内（即自动化变量只应该出现在 Makefile 目标规则中）</p>
<p><code>$@</code> 指代当前目标， Make 命令意图构建的目标</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello: hello.o</span><br><span class="line">    gcc hello.o -o $@	//$@为hello</span><br></pre></td></tr></table></figure>

<p><code>$&lt;</code> 指代第一个前置条件。比如规则为 hello: a b，那么 <code>$&lt;</code> 就指代 a。</p>
<p><code>$^</code> 指代所有前置条件，之间以空格分隔。比如，规则为 hello: a b，那么 <code>$^</code> 就指代 a 和 b。</p>
]]></content>
      <tags>
        <tag>command</tag>
      </tags>
  </entry>
  <entry>
    <title>reinforce-learning-record</title>
    <url>/2024/06/10/reinforce-learning-record/</url>
    <content><![CDATA[<p>reinforce learning</p>
<span id="more"></span>

<h1 id="reinforce-learning-record"><a href="#reinforce-learning-record" class="headerlink" title="reinforce learning record"></a>reinforce learning record</h1><h2 id="MRP"><a href="#MRP" class="headerlink" title="MRP"></a>MRP</h2><img src="/2024/06/10/reinforce-learning-record/image-20240610205131367.png" class="" title="image-20240610205131367">

<h3 id="回报"><a href="#回报" class="headerlink" title="回报"></a>回报</h3><p>在一个马尔可夫奖励过程中，从第t时刻状态S_t开始，直到终止状态时，所有奖励的衰减之和称为<strong>回报</strong>（Return）</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240610203108806.png" class="" title="image-20240610203108806">

<ul>
<li>Rt表示在时刻t获得的奖励</li>
<li><strong>到达状态Si</strong>，得到奖励r(s)；若在时刻t到达状态Si，则<strong>Rt&#x3D;r(Si)</strong></li>
<li>对于某状态序列<img src="/2024/06/10/reinforce-learning-record/image-20240610203423677.png" class="" title="image-20240610203423677">我们有对应于该状态序列的奖励G<img src="/2024/06/10/reinforce-learning-record/image-20240610203434567.png" class="" title="image-20240610203434567"></li>
</ul>
<h3 id="价值函数"><a href="#价值函数" class="headerlink" title="价值函数"></a>价值函数</h3><p>在马尔可夫奖励过程中，一个状态的期望回报（即从这个状态出发的未来累积奖励的期望）被称为这个状态的<strong>价值</strong>（value）。所有状态的价值就组成了<strong>价值函数</strong>（value function），价值函数的输入为某个状态，输出为这个状态的价值。</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240610203509585.png" class="" title="image-20240610203509585">

<ul>
<li>对于某个状态s，从该状态出发可得到的状态序列有很多条</li>
<li>对于某个状态s，价值函数为<strong>从该状态出发，可能存在的所有状态序列的奖励的均值</strong></li>
</ul>
<p>贝尔曼方程</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240610203841177.png" class="" title="image-20240610203841177">

<h2 id="MDP"><a href="#MDP" class="headerlink" title="MDP"></a>MDP</h2><p>与MRP相比，奖励与状态和动作相关</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240610205112917.png" class="" title="image-20240610205112917">

<h3 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h3><p>策略表示在状态s下采取动作a的<strong>概率</strong>，概率可能为1</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240610204522539.png" class="" title="image-20240610204522539">

<h3 id="状态价值函数"><a href="#状态价值函数" class="headerlink" title="状态价值函数"></a>状态价值函数</h3><p>在 MDP 中基于策略Π的状态价值函数（state-value function），定义为从状态s出发遵循策略Π能获得的期望回报</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240610204014373.png" class="" title="image-20240610204014373">

<h3 id="动作价值函数"><a href="#动作价值函数" class="headerlink" title="动作价值函数"></a>动作价值函数</h3><p>在 MDP 中，由于动作的存在，我们额外定义一个<strong>动作价值函数</strong>（action-value function）。表示在 MDP 遵循策略Π时，对当前状态s执行动作a得到的期望回报</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240610204152914.png" class="" title="image-20240610204152914">

<ul>
<li><strong>采取动作a到达状态s</strong>，得到奖励R</li>
</ul>
<h3 id="状态价值函数与动作价值函数关系"><a href="#状态价值函数与动作价值函数关系" class="headerlink" title="状态价值函数与动作价值函数关系"></a>状态价值函数与动作价值函数关系</h3><img src="/2024/06/10/reinforce-learning-record/image-20240610213003398.png" class="" title="image-20240610213003398">

<ul>
<li>从状态s出发，可能采取动作a1, a2, a3, …;对于每个可能采取的动作，均有动作价值Q，则状态s的状态价值为所有动作价值的期望</li>
</ul>
<img src="/2024/06/10/reinforce-learning-record/image-20240610213050168.png" class="" title="image-20240610213050168">

<ul>
<li>在状态s执行动作a后，得到奖励r(s,a)；由于可能到达多个不同的状态s’，动作价值为即时奖励r(s,a)+可能到达的所有状态的价值的期望</li>
</ul>
<h3 id="最优策略"><a href="#最优策略" class="headerlink" title="最优策略"></a>最优策略</h3><p>策略之间的偏序关系</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240612093758370.png" class="" title="image-20240612093758370">

<p>最优策略为 对于任意的策略，均有最优策略优于或不差于其他策略</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240612093948192.png" class="" title="image-20240612093948192">

<img src="/2024/06/10/reinforce-learning-record/image-20240612093958259.png" class="" title="image-20240612093958259">

<p>最优状态价值与最优动作价值的关系</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240612094048209.png" class="" title="image-20240612094048209">



<h3 id="贝尔曼期望方程"><a href="#贝尔曼期望方程" class="headerlink" title="贝尔曼期望方程"></a>贝尔曼期望方程</h3><p>采取策略Π</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240610204627264.png" class="" title="image-20240610204627264">

<ul>
<li>对于状态s，s的状态价值为 ( 折损的 <strong>所有可达的下一状态的价值的期望</strong> + <strong>到达所有可达的下一状态的r(s’,a)的期望</strong> )</li>
<li>对于状态s和动作a，在状态s进行动作a的价值为 ( <strong>在状态s执行动作a的r(s,a)的期望</strong>(实际上就是r(s,a)) + 折损的 <strong>在执行动作a后所有可达的下一状态的所有可执行动作的价值的期望</strong> )</li>
</ul>
<img src="/2024/06/10/reinforce-learning-record/shiow.PNG" class="" title="shiow">

<p>图中情况为每个动作只会到达一个状态&amp;应该直接将动作视为一个节点，图为树</p>
<h3 id="贝尔曼最优方程"><a href="#贝尔曼最优方程" class="headerlink" title="贝尔曼最优方程"></a>贝尔曼最优方程</h3><p>存在策略*，使对于任意的状态s，均有基于策略*状态价值函数大于基于策略Π的状态价值函数</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240610205402396.png" class="" title="image-20240610205402396">

<ul>
<li>对于状态价值：非最优形式是求期望，最优形式是直接选取当前状态，所有动作中，未来状态序列中价值最大的</li>
<li>对于动作价值：非最优形式是求期望，最优形式是直接选取下一状态，所有动作中，未来状态序列中动作价值最大的</li>
</ul>
<h2 id="策略迭代算法-基于策略函数的"><a href="#策略迭代算法-基于策略函数的" class="headerlink" title="策略迭代算法&#x2F;基于策略函数的"></a>策略迭代算法&#x2F;基于策略函数的</h2><p>策略评估：</p>
<p>基于当前策略Π，在已知状态转移函数的情况下（即我们可以知道采取动作a后有多高的几率到达哪个状态），使用<strong>贝尔曼期望方程</strong>迭代更新状态价值函数</p>
<p>ps: 原文中迭代更新状态价值函数是通过</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240610213050168.png" class="" title="image-20240610213050168">

<img src="/2024/06/10/reinforce-learning-record/image-20240610213003398.png" class="" title="image-20240610213003398">

<p>以上两个公式实现的，也即</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">qsa_list = []</span><br><span class="line">	<span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):  <span class="comment"># 迷宫环境，四相运动</span></span><br><span class="line">		qsa = <span class="number">0</span>  <span class="comment"># 当前动作的动作价值</span></span><br><span class="line">        <span class="keyword">for</span> res <span class="keyword">in</span> self.env.P[s][a]:  <span class="comment"># 有模型，即状态转移函数已知</span></span><br><span class="line">        	p, next_state, r, done = res</span><br><span class="line">            qsa += p * (r + self.gamma * self.v[next_state] * (<span class="number">1</span> - done))  <span class="comment"># 第一个公式，计算该动作的价值(开头的p为动作成功概率)</span></span><br><span class="line">         qsa_list.append(self.pi[s][a] * qsa)  <span class="comment"># 乘采取该动作的几率</span></span><br><span class="line">	new_v[s] = <span class="built_in">sum</span>(qsa_list)  <span class="comment"># 第二个公式，根据所有动作的价值计算状态价值</span></span><br></pre></td></tr></table></figure>

<p>target: 更新<strong>状态价值函数</strong>，使之收敛</p>
<p>策略提升：</p>
<p>由于</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240610213003398.png" class="" title="image-20240610213003398">

<p>故修改策略，使得动作价值最大的动作以更高的概率(若最大值唯一，该动作将成为唯一被选取动作；若不唯一，这些动作将均分概率1)被选取，可使新策略下的状态价值函数增大，也即<img src="/2024/06/10/reinforce-learning-record/image-20240611150030644.png" class="" title="image-20240611150030644"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">qsa_list = []</span><br><span class="line">	<span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):  <span class="comment"># 迷宫环境，四相运动</span></span><br><span class="line">    	qsa = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> res <span class="keyword">in</span> self.env.P[s][a]:</span><br><span class="line">        	p, next_state, r, done = res</span><br><span class="line">            qsa += p * (r + self.gamma * self.v[next_state] * (<span class="number">1</span> - done))</span><br><span class="line">        qsa_list.append(qsa)</span><br><span class="line">     maxq = <span class="built_in">max</span>(qsa_list)</span><br><span class="line">     cntq = qsa_list.count(maxq)  <span class="comment"># 计算有几个动作得到了最大的Q值</span></span><br><span class="line">     <span class="comment"># 让这些动作均分概率</span></span><br><span class="line">     self.pi[s] = [<span class="number">1</span> / cntq <span class="keyword">if</span> q == maxq <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> q <span class="keyword">in</span> qsa_list]</span><br></pre></td></tr></table></figure>

<p>target: 修改<strong>策略</strong>，使在新策略下，有基于新策略的状态价值函数大于原策略的状态价值函数</p>
<h2 id="价值迭代算法-基于价值函数的"><a href="#价值迭代算法-基于价值函数的" class="headerlink" title="价值迭代算法&#x2F;基于价值函数的"></a>价值迭代算法&#x2F;基于价值函数的</h2><p>使用贝尔曼最优方程</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240611191853492.png" class="" title="image-20240611191853492">

<p>迭代形式</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240611152610430.png" class="" title="image-20240611152610430">

<p>进行价值迭代；</p>
<p>使用</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240611152643864.png" class="" title="image-20240611152643864">

<p>从迭代完成的状态价值函数中获取策略，即 从当前状态出发，哪个动作的 (即时奖励+下一状态价值) 最大，策略就为哪个动作</p>
<p>ps: 程序实际使用公式</p>
<p>最优状态价值是选择此时使最优动作价值最大的那一个动作时的状态价值</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240611153610316.png" class="" title="image-20240611153610316">

<img src="/2024/06/10/reinforce-learning-record/image-20240610213050168.png" class="" title="image-20240610213050168">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">max_diff = <span class="number">0</span></span><br><span class="line">new_v = [<span class="number">0</span>] * self.env.ncol * self.env.nrow  <span class="comment"># 迷宫环境，初始化状态价值</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(self.env.ncol * self.env.nrow):</span><br><span class="line">    qsa_list = []</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        qsa = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> res <span class="keyword">in</span> self.env.P[s][a]:</span><br><span class="line">            p, next_state, r, done = res</span><br><span class="line">            qsa += p * (r + self.gamma * self.v[next_state] * (<span class="number">1</span> - done))</span><br><span class="line">        qsa_list.append(qsa)  <span class="comment"># 记录状态s下的所有Q(s,a)价值</span></span><br><span class="line">     new_v[s] = <span class="built_in">max</span>(qsa_list)  <span class="comment"># 取最大作为新状态价值</span></span><br><span class="line">     max_diff = <span class="built_in">max</span>(max_diff, <span class="built_in">abs</span>(new_v[s] - self.v[s]))</span><br><span class="line">self.v = new_v</span><br><span class="line"><span class="keyword">if</span> max_diff &lt; self.theta: <span class="keyword">break</span>  <span class="comment"># 满足收敛条件,退出评估迭代</span></span><br><span class="line">cnt += <span class="number">1</span></span><br></pre></td></tr></table></figure>



<h2 id="有模型-无模型-在线策略-离线策略"><a href="#有模型-无模型-在线策略-离线策略" class="headerlink" title="有模型&amp;无模型+在线策略&amp;离线策略"></a>有模型&amp;无模型+在线策略&amp;离线策略</h2><p><strong>有模型强化学习：</strong></p>
<p>智能体学习环境的状态转移函数</p>
<p>环境的状态转移函数已知</p>
<p>智能体可以直接根据状态转移函数得到在对环境进行动作a后环境的下一状态</p>
<p># 状态转移函数P[state][action] &#x3D; [(p, next_state, reward, done)]包含转移成功概率，下一个状态，奖励和是否完成</p>
<ul>
<li>Dyna-Q</li>
<li>Monte Carlo Tree Search (MCTS)</li>
<li>PILCO (Probabilistic Inference for Learning Control)</li>
</ul>
<p><strong>无模型强化学习：</strong></p>
<p>智能体通过与环境交互学习状态和奖励之间的映射关系</p>
<p>环境的状态转移函数未知</p>
<p>智能体必须通过与环境的交互才能得到环境的下一状态</p>
<ul>
<li>Q-learning</li>
<li>SARSA</li>
<li>Deep Q-Network (DQN)</li>
<li>Policy Gradient methods (e.g., REINFORCE, A2C, PPO)</li>
</ul>
<p>样本：当前状态，下一状态，采取动作，奖励</p>
<p><strong>在线策略学习：</strong></p>
<p>不保存样本</p>
<p><strong>离线策略学习：</strong></p>
<p>使用经验回放池保存样本</p>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="蒙特卡洛方法"><a href="#蒙特卡洛方法" class="headerlink" title="蒙特卡洛方法"></a>蒙特卡洛方法</h3><p>Value-based + online</p>
<p>从某状态s出发，基于策略Π，获得一条状态序列，该状态序列对应一个回报G；该过程为一次采样。</p>
<p>反复采样，得到N个状态序列+回报和M，由大数定律，可得该状态的状态价值</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240611161858965.png" class="" title="image-20240611161858965">

<p>使用增量更新方法</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240611161157050.png" class="" title="image-20240611161157050">

<p>补：增量更新原理</p>
<p>新均值 &#x3D; 旧均值 + 1&#x2F;总量 * (新值 - 旧均值) ？</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240611161942958.png" class="" title="image-20240611161942958">

<h3 id="时序差分算法"><a href="#时序差分算法" class="headerlink" title="时序差分算法"></a>时序差分算法</h3><p>Value-based + online</p>
<p>类似于蒙特卡洛，更新状态s的状态价值时，不使用完整的状态序列，在得到下一状态时立即对状态s的状态价值进行更新</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240611162513650.png" class="" title="image-20240611162513650">

<p>蒙特卡洛使用第三行对状态价值进行更新，时序差分使用第四行对状态价值进行更新</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240611162624769.png" class="" title="image-20240611162624769">

<ul>
<li>只向前走了一步的蒙特卡洛</li>
<li>使用下一状态的状态价值代替了很长的状态序列的回报(状态价值本身就是所有未来时刻的回报期望和)</li>
<li>增量更新体现在 减号前部分为 (新 状态s的状态价值)，减号后部分为 (旧 状态s的状态价值)</li>
</ul>
<h3 id="Sarsa算法"><a href="#Sarsa算法" class="headerlink" title="Sarsa算法"></a>Sarsa算法</h3><p>Value-based + online</p>
<p>类似于时序差分算法，对动作价值进行更新，目标是估计 <strong>ε-greedy策略的动作价值函数</strong></p>
<img src="/2024/06/10/reinforce-learning-record/image-20240611191221769.png" class="" title="image-20240611191221769">

<p>算法</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240612100452913.png" class="" title="image-20240612100452913">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">td_error = r + self.gamma * self.Q_table[s1, a1] - self.Q_table[s0, a0]</span><br><span class="line">self.Q_table[s0, a0] += self.alpha * td_error</span><br></pre></td></tr></table></figure>



<h3 id="Q-learning算法"><a href="#Q-learning算法" class="headerlink" title="Q-learning算法"></a>Q-learning算法</h3><p>Value-based + offline</p>
<p>对动作价值进行更新，目标是估计 <strong>最优策略的动作价值函数</strong></p>
<img src="/2024/06/10/reinforce-learning-record/image-20240611194333945.png" class="" title="image-20240611194333945">

<p>算法</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240612100509915.png" class="" title="image-20240612100509915">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">td_error = r + self.gamma * self.Q_table[s1].max() - self.Q_table[s0, a0]</span><br><span class="line">self.Q_table[s0, a0] += self.alpha * td_error</span><br></pre></td></tr></table></figure>



<h3 id="DQN-DDQN"><a href="#DQN-DDQN" class="headerlink" title="DQN&#x2F;DDQN"></a>DQN&#x2F;DDQN</h3><p>Value-based + offline</p>
<p>将Q-learning的Q表换成net</p>
<h3 id="策略梯度算法-REINFORCE"><a href="#策略梯度算法-REINFORCE" class="headerlink" title="策略梯度算法(REINFORCE)"></a>策略梯度算法(REINFORCE)</h3><p>Policy-based + online</p>
<p>定义策略学习的目标函数为，s0为初始状态</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240612100629893.png" class="" title="image-20240612100629893">

<p>目标是修改参数θ，使J(θ)取最大；即对θ求导</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240610213003398.png" class="" title="image-20240610213003398">

<img src="/2024/06/10/reinforce-learning-record/image-20240612100732404.png" class="" title="image-20240612100732404">

<p>where 第一行第一个求和符号后的对象为 策略的<strong>状态访问分布</strong></p>
<img src="/2024/06/10/reinforce-learning-record/image-20240612102026769.png" class="" title="image-20240612102026769">

<p>策略的状态访问分布表示该策略和在环境中会访问到的状态的分布情况(即到达每个状态的概率)</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240612102256431.png" class="" title="image-20240612102256431">

<p>故该求导表示 对于每个状态，我们有一定的概率在该状态，从该状态出发，策略决定了我们能获得的价值的期望</p>
<p>算法</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240611200059062.png" class="" title="image-20240611200059062">

<p>时刻t向后的回报即为(动作)价值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">reward_list = transition_dict[<span class="string">&#x27;rewards&#x27;</span>]</span><br><span class="line">state_list = transition_dict[<span class="string">&#x27;states&#x27;</span>]</span><br><span class="line">action_list = transition_dict[<span class="string">&#x27;actions&#x27;</span>]</span><br><span class="line"></span><br><span class="line">G = <span class="number">0</span></span><br><span class="line">self.optimizer.zero_grad()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(reward_list))):  <span class="comment"># 从最后一步算起</span></span><br><span class="line">    reward = reward_list[i]  <span class="comment"># 取时间步i获得的奖励</span></span><br><span class="line">    state = torch.tensor([state_list[i]],</span><br><span class="line">                         dtype=torch.<span class="built_in">float</span>).to(self.device)  <span class="comment"># 取时间步i的状态</span></span><br><span class="line">    action = torch.tensor([action_list[i]]).view(-<span class="number">1</span>, <span class="number">1</span>).to(self.device)  <span class="comment"># 取时间步i的动作</span></span><br><span class="line">    log_prob = torch.log(self.policy_net(state).gather(<span class="number">1</span>, action))</span><br><span class="line">    <span class="comment"># self.policy_net(state)： 将状态输入策略网络，得到所有可能动作的概率分布。</span></span><br><span class="line">	<span class="comment"># .gather(1, action): 从概率分布中选取实际执行动作对应的概率值。</span></span><br><span class="line">	<span class="comment"># torch.log(...): 对选取的概率值取对数，得到对数概率</span></span><br><span class="line">    G = self.gamma * G + reward  <span class="comment"># G累计了从当前时间步i到episode结束的所有奖励</span></span><br><span class="line">    loss = -log_prob * G  <span class="comment"># loss对应公式中符号α后的部分</span></span><br><span class="line">    loss.backward()  <span class="comment"># 反向传播计算梯度</span></span><br><span class="line">self.optimizer.step()  <span class="comment"># 梯度下降，实际上是对策略进行求导</span></span><br></pre></td></tr></table></figure>



<h3 id="Actor-Critic"><a href="#Actor-Critic" class="headerlink" title="Actor-Critic"></a>Actor-Critic</h3><p>(Value + Policy)-based + offline</p>
<p>策略函数梯度</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240612110026419.png" class="" title="image-20240612110026419">

<p>ψ_t可为不同值，表示不同的方法</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240612110241521.png" class="" title="image-20240612110241521">



<p>价值函数的损失函数与梯度</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240612110951796.png" class="" title="image-20240612110951796">

<img src="/2024/06/10/reinforce-learning-record/image-20240612111022161.png" class="" title="image-20240612111022161">



<p>Actor（策略网络）和 Critic（价值网络）</p>
<ul>
<li><p>Actor 要做的是与环境交互，并在 Critic 价值函数的指导下用策略梯度学习一个更好的策略。</p>
</li>
<li><p>Critic 要做的是通过 Actor 与环境交互收集的数据学习一个价值函数，这个价值函数会用于判断在当前状态什么动作是好的，什么动作不是好的，进而帮助 Actor 进行策略更新。</p>
</li>
</ul>
<p>基于<strong>时序差分(TD)<strong>方法的</strong>Actor-Critic</strong>算法</p>
<img src="/2024/06/10/reinforce-learning-record/image-20240612110750284.png" class="" title="image-20240612110750284">

<p>价值网络使用时序差分(TD)更新，策略网络使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">states = torch.tensor(transition_dict[<span class="string">&#x27;states&#x27;</span>],</span><br><span class="line">                              dtype=torch.<span class="built_in">float</span>).to(self.device)</span><br><span class="line">actions = torch.tensor(transition_dict[<span class="string">&#x27;actions&#x27;</span>]).view(-<span class="number">1</span>, <span class="number">1</span>).to(</span><br><span class="line">            self.device)</span><br><span class="line">rewards = torch.tensor(transition_dict[<span class="string">&#x27;rewards&#x27;</span>],</span><br><span class="line">                               dtype=torch.<span class="built_in">float</span>).view(-<span class="number">1</span>, <span class="number">1</span>).to(self.device)</span><br><span class="line">next_states = torch.tensor(transition_dict[<span class="string">&#x27;next_states&#x27;</span>],</span><br><span class="line">                                   dtype=torch.<span class="built_in">float</span>).to(self.device)</span><br><span class="line">dones = torch.tensor(transition_dict[<span class="string">&#x27;dones&#x27;</span>],</span><br><span class="line">                             dtype=torch.<span class="built_in">float</span>).view(-<span class="number">1</span>, <span class="number">1</span>).to(self.device)</span><br><span class="line"><span class="comment"># 当前状态，动作、奖励、下一个状态和结束标志</span></span><br><span class="line"></span><br><span class="line">td_target = rewards + self.gamma * self.critic(next_states) * (<span class="number">1</span> - dones)</span><br><span class="line"><span class="comment"># 价值网络(critic)</span></span><br><span class="line"><span class="comment"># self.critic(next_states) 使用价值网络(critic)预测下一个状态的价值。</span></span><br><span class="line"><span class="comment"># (1 - dones) 用于处理 episode 结束的情况，如果 dones 为 1 (True)，则表示 episode 结束，此时不需要考虑未来的奖励。</span></span><br><span class="line">td_delta = td_target - self.critic(states)  </span><br><span class="line"><span class="comment"># 计算时序差分误差，即目标值与当前状态价值的差。</span></span><br><span class="line"></span><br><span class="line">log_probs = torch.log(self.actor(states).gather(<span class="number">1</span>, actions))</span><br><span class="line"><span class="comment"># 策略网络(actor)</span></span><br><span class="line"><span class="comment"># self.actor(states) 使用策略网络预测每个动作的概率。</span></span><br><span class="line"><span class="comment"># .gather(1, actions) 从预测的概率分布中选择实际采取的动作对应的概率。torch.log 计算对数概率。</span></span><br><span class="line"></span><br><span class="line">critic_loss = torch.mean(</span><br><span class="line">	F.mse_loss(self.critic(states), td_target.detach()))</span><br><span class="line"><span class="comment"># 计算价值网络的损失函数。(价值网络给出的当前状态价值)和(r+价值网络给出的下一状态的状态价值)的均方误差，即((a-b)^2)/2</span></span><br><span class="line"><span class="comment"># 使用 td_target.detach() 阻止梯度通过 td_target 向策略网络回传。</span></span><br><span class="line">actor_loss = torch.mean(-log_probs * td_delta.detach())</span><br><span class="line"><span class="comment"># 计算策略网络的损失函数。策略函数梯度</span></span><br><span class="line"><span class="comment"># 使用 td_delta.detach() 阻止梯度通过 td_delta 向价值网络回传。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">self.actor_optimizer.zero_grad()</span><br><span class="line">self.critic_optimizer.zero_grad()</span><br><span class="line">actor_loss.backward()  <span class="comment"># 计算策略网络的梯度</span></span><br><span class="line">critic_loss.backward()  <span class="comment"># 计算价值网络的梯度</span></span><br><span class="line">self.actor_optimizer.step()  <span class="comment"># 更新策略网络的参数</span></span><br><span class="line">self.critic_optimizer.step()  <span class="comment"># 更新价值网络的参数</span></span><br></pre></td></tr></table></figure>



<h2 id="强化学习设置小心得"><a href="#强化学习设置小心得" class="headerlink" title="强化学习设置小心得"></a>强化学习设置小心得</h2><p>控制状态空间大小，尽量选择有限状态空间</p>
<p>eg: 将state中的一些值int化</p>
<p>状态空间的表示值尽量接近</p>
<p>采用标准化技术将state内的值均一化</p>
<p>eg: [1, 200, 9999] -&gt; [0.001, 0.99, 0.9999]</p>
<p>reward设置</p>
<p>惩罚和奖励设置插值不要过大, 防止惩罚拟合过快</p>
<p>+2, -200 -&gt; +2, 0</p>
]]></content>
      <tags>
        <tag>python, reinforce learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-Learning-Record</title>
    <url>/2024/07/28/Android-Learning-Record/</url>
    <content><![CDATA[<p>Android学习记录</p>
<span id="more"></span>



<h1 id="Android-Learning-Record"><a href="#Android-Learning-Record" class="headerlink" title="Android Learning Record"></a>Android Learning Record</h1><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[访问修饰符] [非访问修饰符] 数据类型 变量名 [= 初始值];</span><br><span class="line"></span><br><span class="line">[访问修饰符] [非访问修饰符] 返回值类型 方法名(参数列表) [<span class="keyword">throws</span> 异常列表] &#123;</span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>访问修饰符 (可选):</strong></p>
<ul>
<li>public：任何地方都可以访问。</li>
<li>protected：同一个包内和子类可以访问。</li>
<li>private：只有同一个类内可以访问。</li>
<li>默认 (不写)：同一个包内可以访问。</li>
</ul>
<p><strong>非访问修饰符 (可选):</strong></p>
<ul>
<li>static：静态变量，属于类本身。</li>
<li>final：常量，值一旦初始化后不可改变。</li>
<li>transient：序列化时忽略该字段。</li>
<li>volatile：保证多线程环境下变量的可见性。</li>
<li>native：</li>
</ul>
<p><strong>abstract</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;  <span class="comment">// 与C++的含虚函数的类一样，Java抽象类不能直接实例化</span></span><br><span class="line">    <span class="comment">// 实例变量，有默认值</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类变量，有默认值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CATEGORY</span> <span class="operator">=</span> <span class="string">&quot;Animal&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非默认构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象方法  含抽象方法的类就一定不能实例化</span></span><br><span class="line">    <span class="comment">// 同时，Abstract method in non-abstract class 是不被允许的，即抽象方法一定得在抽象类中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 具体方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; is eating.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age); <span class="comment">// 调用父类的非默认构造函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Woof!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>static</strong></p>
<ul>
<li><p><strong>类静态变量</strong>：</p>
</li>
<li><p><strong>类静态方法</strong>：</p>
</li>
<li><p><strong>静态代码块</strong>：静态代码块在类加载时执行，仅执行一次，多用于初始化静态变量，加载配置文件，初始化资源</p>
</li>
<li><p><strong>静态类</strong>：</p>
<ul>
<li><p><strong>声明位置:</strong> 静态类只能在另一个类的内部进行声明，使用 static 关键字修饰。</p>
</li>
<li><p><strong>与外部类的关系:</strong></p>
<ul>
<li>静态类不持有对其外部类实例的引用。</li>
<li><strong>静态类的实例化不需要依赖外部类的实例，可以直接通过 OuterClass.StaticNestedClass 的方式创建。</strong></li>
</ul>
</li>
<li><p><strong>静态内部类可以有非静态的变量和方法</strong>：静态内部类本质上是一个独立的类，它可以拥有实例变量和实例方法。要访问这些实例变量和方法，必须创建静态内部类的对象。</p>
<p><strong>静态内部类可以有静态的变量和方法</strong>：由于静态内部类是静态的，它可以直接包含静态变量和静态方法。这些静态成员属于静态内部类本身，而不属于其外部类的实例。</p>
</li>
</ul>
</li>
</ul>
<p><strong>内部类</strong></p>
<p><strong>内部类中不能使用静态的变量和静态的方法！</strong>！！</p>
<p>内部类的实例化是由外部类实例化之后才加载的，如果外部类还没有实例化，这时候调用内部类的静态成员，此时内部类还没有被加载，却要开始创建静态成员,显示是不合理的,</p>
<p><strong>常见的变量名前缀：</strong></p>
<ul>
<li><strong>m：</strong> 表示 <strong>成员变量</strong> (member variable)，即类级别的变量，区别于局部变量。例如：private int mCount;</li>
<li><strong>s：</strong> 表示 <strong>静态变量</strong> (static variable)，即属于类本身的变量，所有实例共享。例如：public static String sTag &#x3D; “MyClass”;</li>
<li><strong>p：</strong> 表示 <strong>参数</strong> (parameter)，即方法或构造函数的输入参数。例如：public void setName(String pName) { … }</li>
<li><strong>g：</strong> 表示 <strong>全局变量</strong> (global variable)，一般用于 C&#x2F;C++ 代码中。</li>
<li><strong>i：</strong> 表示 <strong>接口</strong> (interface) 或 <strong>抽象类</strong> (abstract class) 的实现类。例如，ActivityManagerProxy 实现了 IActivityManager 接口。</li>
<li><strong>l：</strong> 表示 <strong>局部变量</strong> (local variable)，即方法或代码块内部定义的变量。</li>
<li><strong>this：</strong> 表示当前对象的引用。</li>
</ul>
<p><strong>其他约定：</strong></p>
<ul>
<li><strong>常量 (Constant)：</strong> 通常使用全部大写字母，单词之间用下划线分隔。例如：public static final int MAX_COUNT &#x3D; 100;</li>
<li><strong>布尔类型 (boolean)：</strong> 通常以 is 或 has 开头，例如：private boolean isRunning; 或 public boolean hasPermission();</li>
</ul>
<h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>对于<code>com.example.project</code></p>
<p>其中， <code>com</code> 是顶层包, <code>example</code> 是 <code>com</code> 包的子包, <code>project</code> 是 <code>com.example</code> 包的子包。</p>
<p>在文件系统中，存在以下的层次结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com/</span><br><span class="line">    example/</span><br><span class="line">        project/</span><br><span class="line">            MyClass.java </span><br></pre></td></tr></table></figure>

<p>如果项目根目录是 MyProject，那么 com.example.project.MyClass 类文件应该位于 MyProject&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;example&#x2F;project&#x2F;MyClass.java</p>
<h3 id="泛型与通配符"><a href="#泛型与通配符" class="headerlink" title="泛型与通配符"></a>泛型与通配符</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IResponse</span>&lt;T&gt; &#123; <span class="comment">//使用泛型</span></span><br><span class="line">	</span><br><span class="line">	T <span class="title function_">getData</span><span class="params">()</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringResponse</span> <span class="keyword">implements</span> <span class="title class_">IResponse</span>&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(String t)</span> &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Response</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">IResponse</span>&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(T data)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.data = data;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Response</span>&lt;T <span class="keyword">extends</span> <span class="title class_">BaseData</span>&gt; <span class="keyword">implements</span> <span class="title class_">IResponse</span>&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getToken</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(data!=<span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> data.getToken();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="type">Teacher</span> <span class="variable">teacher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line"></span><br><span class="line">Person person;	</span><br><span class="line">person = student; <span class="comment">// 多态</span></span><br><span class="line">person = teacher; <span class="comment">// 多态</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printList</span><span class="params">(List&lt;?&gt; list)</span> &#123; <span class="comment">//通配符</span></span><br><span class="line">    <span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// 该方法可以接收任何类型的List,例如 List&lt;String&gt;、List&lt;Integer&gt; 等</span></span><br><span class="line"></span><br><span class="line">List&lt;? <span class="keyword">extends</span> <span class="title class_">Person</span>&gt; personList; <span class="comment">//只接收Person或Person子类</span></span><br><span class="line">List&lt;? <span class="built_in">super</span> Student&gt; personList <span class="comment">//只接收Student或Student父类</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<blockquote>
<p><strong>泛型擦除</strong>：编译器在对源代码进行编译的时候将泛型换成了泛型指定的上限类&lt;T extends 上限类型&gt;，如果没有指定泛型的上限，编译器则会使用Object类替代。简单的说在编译完成后的字节码文件中其实是没有泛型的概念的，源代码中的泛型被编译器用Object或者泛型指定的类给替换掉了。</p>
<p><strong>将所有泛型类型参数替换为其上限类型 (Upper Bound)。</strong></p>
<ul>
<li>例如，List&lt;String&gt; 会被替换为 List&lt;Object&gt;，因为 Object 是 String 的上限类型。</li>
<li>如果没有指定上限类型，则默认使用 Object 作为上限类型。</li>
</ul>
<p><strong>插入类型转换代码，以保证类型安全。</strong></p>
<ul>
<li>例如，从 List&lt;Object&gt; 中获取元素时，编译器会插入 (String) 强制类型转换代码，以确保获取到的元素是 String 类型。</li>
</ul>
<p><strong>作用</strong>：声明了一个泛型为String的List集合，并向集合中添加了一个字符串“abc”，接着通过反射向集合list中添加了一个整数类型123，通过输出结果可以看到两个值都被添加到了集合中</p>
</blockquote>
<h3 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h3><ol>
<li><p>**加载 (Loading)**：</p>
<ul>
<li>通过类的全限定名（例如 java.lang.String）查找并读取类的二进制数据（.class 文件）。</li>
<li>将类的静态结构信息（例如类名、方法名、字段名、访问权限等）<strong>存储在方法区中，并创建一个代表该类的 Class 对象，该对象唯一。</strong></li>
<li>加载阶段通常由类加载器完成，Java 提供三种内置的类加载器：<ul>
<li><strong>Bootstrap ClassLoader</strong>：负责加载 Java 核心类库（rt.jar 等）。</li>
<li><strong>Extension ClassLoader</strong>：负责加载 Java 扩展类库（jre&#x2F;lib&#x2F;ext 目录下的类）。</li>
<li><strong>Application ClassLoader</strong>：负责加载应用程序类路径（CLASSPATH）上的类。</li>
</ul>
</li>
</ul>
</li>
<li><p>**链接 (Linking)**：</p>
<ul>
<li><p>**验证 (Verification)**：确保加载的类文件符合 Java 虚拟机规范，防止恶意代码破坏 JVM。</p>
</li>
<li><p>**准备 (Preparation)**：为类的静态变量分配内存空间，并设置默认初始值（例如，int 类型为 0）。</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">123</span>;  <span class="comment">//为value分配内存, 且设置值为0</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">v2</span> <span class="operator">=</span> <span class="number">123</span>  <span class="comment">//为v2分配内存, 且设置值为123</span></span><br><span class="line">	<span class="keyword">public</span>  <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;  <span class="comment">//不会为str分配内存，该 变量为实例变量，创建Test对象时分配内存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>**解析 (Resolution)**：将符号引用（例如类名、方法名）转换为直接引用（例如内存地址）。</p>
</li>
</ul>
</li>
<li><p><strong>初始化 (Initialization)（非必定发生）</strong>：</p>
<ul>
<li>执行类的静态初始化代码块（static {}）和静态变量的初始化语句。</li>
<li>初始化阶段类变量才会被赋予我们在代码中声明的值。JVM会根据语句执行顺序对类对象进行初始化。</li>
<li>只有在类被主动使用时才会进行初始化，例如：<ul>
<li>创建类的实例。</li>
<li><strong>访问类的静态变量。</strong></li>
<li><strong>调用类的静态方法。</strong></li>
<li>反射调用 Test 类。</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>初始化发生条件：</p>
<p>① 遇到 new、getstatic、putstatic、invokestatic 这四条字节码指令时，如果类没有进行过初始化，则需要先触发其初始化。生成这4条指令的最常见的Java代码场景是：使用new关键字实例化对象的时候、读取或设置一个类的静态字段（被final修饰、已在编译器把结果放入常量池的静态字段除外）的时候，以及调用一个类的静态方法的时候。</p>
<p>② 使用 java.lang.reflect 包的方法对类进行反射调用的时候，如果类没有进行过初始化，则需要先触发其初始化。</p>
<p>③ 当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。</p>
<p>④ 当虚拟机启动时，用户需要指定一个要执行的主类（包含main()方法的那个类），虚拟机会先初始化这个主类。</p>
<p>⑤ 当使用 JDK1.7 动态语言支持时，如果一个 java.lang.invoke.MethodHandle实例最后的解析结果 REF_getstatic,REF_putstatic,REF_invokeStatic 的方法句柄，并且这个方法句柄所对应的类没有进行初始化，则需要先出触发其初始化。</p>
<p>⑥ 当一个接口中定义了JDK8新加入的默认方法（被default关键字修饰的接口方法）时，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">        ++x;</span><br><span class="line">        ++y;</span><br><span class="line">        System.out.println(<span class="string">&quot;Singleton构造方法执行，x = &quot;</span> + x +<span class="string">&quot;,y = &quot;</span> + y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;singleton.x = &quot;</span> + singleton.x);</span><br><span class="line">        System.out.println(<span class="string">&quot;singleton.x = &quot;</span> + singleton.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>执行顺序和输出结果分析：</strong></p>
<ol>
<li><p><strong>类加载：</strong> </p>
<ul>
<li><p>主类<code>Singleton</code>的加载：读取<code>Singleton.class</code>文件，获取类的结构信息，在方法区创建<code>Singleton</code>类的 Class 对象</p>
<blockquote>
<p>主类即存在main方法的类</p>
</blockquote>
</li>
<li><p>主类<code>Singleton</code>的链接：验证，准备和解析。准备阶段将为静态变量<code>singleton</code>, <code>x</code>, <code>y</code>分配内存空间，并设置默认值。其中，<code>singleton</code>：引用类型的默认值为 <code>null</code>。<code>x</code>：<code>int</code> 类型的默认值为 <code>0</code>。<code>y</code>： 虽然 <code>y</code> 被显式初始化为 <code>0</code>，但在准备阶段，只会赋予默认值，所以 <code>y</code> 也会被初始化为 <code>0</code>。</p>
<blockquote>
<p>这三个静态变量存放在方法区静态变量区中</p>
</blockquote>
</li>
<li><p>主类<code>Singleton</code>的初始化：</p>
<ul>
<li>静态变量 <code>singleton</code> 初始化：<code>private static Singleton singleton = new Singleton();</code><ul>
<li>这行代码会创建一个 <code>Singleton</code> 实例，进而调用 <code>Singleton</code> 的构造方法。</li>
</ul>
</li>
<li>构造方法执行：<ul>
<li><code>++x;</code>  &#x2F;&#x2F; 此时 x 还没有初始化，默认值为 0，所以 x 变为 1</li>
<li><code>++y;</code>  &#x2F;&#x2F; y 已初始化为 0，所以 y 变为 1</li>
<li><code>System.out.println(&quot;Singleton构造方法执行，x = &quot; + x +&quot;,y = &quot; + y);</code> </li>
<li>输出：<code>Singleton构造方法执行，x = 1,y = 1</code></li>
</ul>
</li>
<li>静态变量 <code>x</code> 和 <code>y</code> 初始化：<ul>
<li><code>public static int x;</code>  &#x2F;&#x2F; 无动作 (构造方法中已经修改)</li>
<li><code>public static int y = 0;</code> &#x2F;&#x2F; y 被赋值为 0 (覆盖了构造方法中的修改)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>main 方法执行：</strong></p>
<ul>
<li><code>System.out.println(&quot;singleton.x = &quot; + singleton.x);</code> <ul>
<li>输出：<code>singleton.x = 1</code></li>
</ul>
</li>
<li><code>System.out.println(&quot;singleton.x = &quot; + singleton.y);</code><ul>
<li>输出：<code>singleton.y = 0</code></li>
</ul>
</li>
</ul>
</li>
</ol>
<p><strong>最终输出结果：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Singleton构造方法执行，x = 1,y = 1</span><br><span class="line">singleton.x = 1</span><br><span class="line">singleton.y = 0</span><br></pre></td></tr></table></figure>



<h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>类的Class对象在<strong>类加载的加载部分</strong>时被创建，保存于<strong>堆</strong>。</p>
<p><strong>反射的核心 API</strong></p>
<p>Java 反射机制主要由 java.lang.reflect 包中的类和接口提供支持，其中最常用的类包括：</p>
<ul>
<li><strong>Class 类:</strong> 代表一个类的类型信息，可以通过 Class 对象获取类的所有信息。</li>
<li><strong>Field 类:</strong> 代表类的成员变量，可以通过 Field 对象获取和设置变量的值。</li>
<li><strong>Method 类:</strong> 代表类的方法，可以通过 Method 对象调用方法。</li>
<li><strong>Constructor 类:</strong> 代表类的构造函数，可以通过 Constructor 对象创建类的实例。</li>
</ul>
<p><strong>获取方式：</strong></p>
<ol>
<li><strong>通过类名获取:</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.example.MyClass&quot;</span>);</span><br></pre></td></tr></table></figure>



<ol start="2">
<li><strong>通过对象获取:</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">MyClass</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>(); </span><br><span class="line"></span><br><span class="line">Class&lt;?&gt; clazz = obj.getClass();</span><br><span class="line"></span><br><span class="line">Class&lt;Person&gt; personClass=(Class&lt;Person&gt;)person.getClass();</span><br></pre></td></tr></table></figure>



<ol start="3">
<li><strong>通过类字面量获取:</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = MyClass.class;</span><br></pre></td></tr></table></figure>

<p>示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClass</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + name + <span class="string">&quot;, Age: &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取 Class 对象</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.example.MyClass&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取构造函数并创建实例</span></span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;John Doe&quot;</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取成员变量并设置值</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>); <span class="comment">// 允许访问私有变量</span></span><br><span class="line">        nameField.set(obj, <span class="string">&quot;Jane Doe&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取方法并调用</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">printInfoMethod</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;printInfo&quot;</span>);</span><br><span class="line">        printInfoMethod.invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>import 类将告知编译器该类的位置，<strong>不会触发类加载</strong></p>
<p><strong>对于一个 Test.java 文件：</strong></p>
<ul>
<li><strong>只有被主类（包含 main() 方法的类）直接或间接使用到的类才会被加载、链接(和初始化)。</strong> 主类将默认进行加载、链接和初始化。</li>
<li><strong>如果 Test.java 中的其他类没有被主类直接或间接使用，那么这些类</strong> <strong>不会被加载</strong> <strong>。</strong></li>
</ul>
<p>触发类加载的时候一般为：</p>
<ol>
<li><p><strong>创建 <code>Test</code> 类的实例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Test</span> <span class="variable">myTestObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>(); </span><br></pre></td></tr></table></figure>

<p>当执行到 <code>new Test()</code> 时，JVM 发现 <code>Test</code> 类还没有被加载，就会启动类加载过程。</p>
<p>这种情况会一口气完成加载、链接和初始化三个过程。</p>
<p>因为创建实例需要用到类的所有信息，包括静态变量的初始值、实例变量的定义等，所以必须完成初始化。</p>
</li>
<li><p><strong>访问 <code>Test</code> 类的静态成员（变量或方法）：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> Test.value; <span class="comment">// 访问静态变量</span></span><br><span class="line">Test.someStaticMethod(); <span class="comment">// 调用静态方法 (假设存在 someStaticMethod)</span></span><br></pre></td></tr></table></figure>

<p>访问 <code>Test.value</code> 或调用 <code>Test.someStaticMethod()</code> 时，需要用到 <code>Test</code> 类的信息，会触发类加载。</p>
<p><strong>如果访问的是静态常量（<code>final static</code>），则只会进行加载和链接，不会进行初始化。</strong></p>
<ul>
<li>因为静态常量在编译阶段就已经确定了值，并存储在类的常量池中，不需要等到初始化阶段。</li>
</ul>
<p><strong>如果访问的是静态变量，则会完成加载、链接和初始化三个过程。</strong></p>
<ul>
<li>因为静态变量的初始值可能需要在初始化阶段执行代码才能确定。</li>
</ul>
</li>
<li><p><strong>使用反射机制操作 <code>Test</code> 类：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; testClass = Class.forName(<span class="string">&quot;com.example.Test&quot;</span>); <span class="comment">// 假设 Test 类在 com.example 包下</span></span><br></pre></td></tr></table></figure>

<p>使用 <code>Class.forName()</code> 获取 <code>Test</code> 类的 <code>Class</code> 对象时，也会触发类加载。</p>
<p><strong>默认情况下，只会进行加载和链接，不会进行初始化。</strong></p>
<ul>
<li><code>Class.forName()</code> 方法可以指定是否进行初始化，默认是不进行初始化的。</li>
</ul>
<p><strong>如果调用 <code>Class.forName()</code> 方法时，第二个参数传入了 <code>true</code>，则会完成加载、链接和初始化三个过程。</strong></p>
<ul>
<li>例如：<code>Class.forName(&quot;com.example.Test&quot;, true, classLoader);</code></li>
</ul>
</li>
</ol>
</blockquote>
<h3 id="注解与APT"><a href="#注解与APT" class="headerlink" title="注解与APT"></a>注解与APT</h3><p>注解( @interface)是一种定义类型</p>
<p>@interface 是一个关键字，用于定义注解类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AuthRequired &#123;</span><br><span class="line">    String <span class="title function_">role</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;admin&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>元注解</strong></p>
<p>元注解是用于注解其他注解的注解，Java 提供了以下元注解：</p>
<ul>
<li><strong>@Retention:</strong> 指定注解的生命周期，可选值：<ul>
<li>RetentionPolicy.SOURCE：仅保留在源代码中，编译时会被丢弃。</li>
<li>RetentionPolicy.CLASS：保留在字节码文件中，但运行时不可见。</li>
<li>RetentionPolicy.RUNTIME：保留在字节码文件中，运行时可见，可以通过反射获取。</li>
</ul>
</li>
<li><strong>@Target:</strong> 指定注解可以应用于哪些元素，可选值：<ul>
<li>ElementType.TYPE：类、接口、枚举</li>
<li>ElementType.FIELD：字段</li>
<li>ElementType.METHOD：方法</li>
<li>ElementType.PARAMETER：方法参数</li>
<li>ElementType.CONSTRUCTOR：构造函数</li>
<li>ElementType.LOCAL_VARIABLE：局部变量</li>
<li>ElementType.ANNOTATION_TYPE：注解</li>
<li>ElementType.PACKAGE：包</li>
</ul>
</li>
<li><strong>@Documented:</strong> 指定将注解包含在 Javadoc 文档中。</li>
<li><strong>@Inherited:</strong> 指定子类可以继承父类的注解。</li>
</ul>
<p>示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@interface</span> AuthRequired &#123;</span><br><span class="line"> String <span class="title function_">role</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;admin&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"> <span class="meta">@AuthRequired(role = &quot;user&quot;)</span> </span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="comment">// ...</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用反射机制获取注解信息</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> MyService.class.getMethod(<span class="string">&quot;doSomething&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (method.isAnnotationPresent(AuthRequired.class)) &#123;</span><br><span class="line"> <span class="type">AuthRequired</span> <span class="variable">auth</span> <span class="operator">=</span> method.getAnnotation(AuthRequired.class);</span><br><span class="line"> <span class="type">String</span> <span class="variable">requiredRole</span> <span class="operator">=</span> auth.role();  <span class="comment">// 拿到了doSomething方法的注解内容</span></span><br><span class="line"> <span class="comment">// ... 进行权限验证</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.CLASS)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Factory &#123;</span><br><span class="line"></span><br><span class="line"> Class <span class="title function_">type</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"> String <span class="title function_">id</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Factory(id = &quot;Rectangle&quot;, type = IShape.class)</span>  <span class="comment">// 为Rectangle类贴上了标签，说明其id和type</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">implements</span> <span class="title class_">IShape</span> &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Draw a Rectangle&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注解像标签：</strong> @AuthRequired 注解就像一个标签，贴在了 doSomething 函数上。</p>
<p><strong>属性像标签内容：</strong> role &#x3D; “user” 就像标签上的文字，描述了这个注解的具体信息。</p>
<p>   <strong>元数据：</strong> 注解和它的属性值一起构成了元数据，这些元数据并不会改变 doSomething 函数本身的代码和行为，而是在程序运行时，可以通过反射机制读取这些元数据，从而实现一些额外的功能，例如权限验证。</p>
</blockquote>
<p><strong>Java APT (Annotation Processing Tool)</strong> </p>
<p>Java APT（注解处理器）是 Java 编译器提供的一种机制，它允许开发者在编译期处理注解，生成额外的代码或进行其他操作。</p>
<p><strong>APT 的工作原理</strong></p>
<ol>
<li><strong>扫描注解:</strong> 在编译 Java 代码时，编译器会扫描源代码中的注解。</li>
<li><strong>调用注解处理器:</strong> 如果发现有注解处理器注册处理了某个注解，编译器会调用相应的注解处理器。</li>
<li><strong>处理注解:</strong> 注解处理器可以读取、分析和处理注解信息，并生成新的代码文件或资源文件。</li>
<li><strong>编译生成最终的 class 文件:</strong> 编译器将生成的代码或资源文件与源代码一起编译，生成最终的 class 文件。</li>
</ol>
<p><strong>创建注解处理器</strong></p>
<ol>
<li><strong>实现 javax.annotation.processing.Processor 接口:</strong> 注解处理器需要实现 Processor 接口，并实现其中的方法，例如 process() 方法。</li>
<li><strong>注册注解处理器:</strong> 在 META-INF&#x2F;services&#x2F;javax.annotation.processing.Processor 文件中声明注解处理器的全限定名，以便编译器可以找到它。</li>
</ol>
<p><strong>注解处理器 API</strong></p>
<p>javax.annotation.processing 包提供了一些 API，用于在注解处理器中访问和处理注解信息：</p>
<ul>
<li><strong>ProcessingEnvironment:</strong> 提供访问编译器环境的方法，例如获取 Elements、Types、Filer 等对象。</li>
<li><strong>Elements:</strong> 表示程序元素的接口，例如包、类、方法、字段等。</li>
<li><strong>Types:</strong> 提供类型相关的操作，例如获取类型的父类、接口等。</li>
<li><strong>Filer:</strong> 用于创建新的源文件或资源文件。</li>
</ul>
<h3 id="线程与同步"><a href="#线程与同步" class="headerlink" title="线程与同步"></a>线程与同步</h3><img src="/2024/07/28/Android-Learning-Record/image-20240729104740287.png" class="" title="image-20240729104740287">

<p><strong>LockSupport, wait()&#x2F;notify() 和 join()</strong></p>
<p><strong>机制区别</strong></p>
<ul>
<li><strong>LockSupport:</strong> 基于<strong>许可证</strong>机制，每个线程都有一个许可证，park() 消耗许可证，unpark() 颁发许可证。</li>
<li><strong>wait()&#x2F;notify():</strong> 基于<strong>锁对象</strong>，线程需要先获取锁对象的监视器锁，才能调用 wait() 进入等待，notify() 唤醒等待相同锁对象的线程。</li>
<li><strong>join():</strong> 基于<strong>线程生命周期</strong>，让一个线程等待另一个线程执行完毕。</li>
</ul>
<p><strong>锁依赖</strong></p>
<ul>
<li><strong>LockSupport:</strong> 不依赖于任何锁，可以直接阻塞和唤醒线程。</li>
<li>**wait()&#x2F;notify() 和 join(): ** 都需要在获取锁的前提下才能使用，并且 wait()&#x2F;notify() 还要求操作相同的锁对象。</li>
</ul>
<p><strong>精确性</strong></p>
<ul>
<li><strong>LockSupport:</strong> 可以更精确地控制线程的阻塞和唤醒，例如可以指定要唤醒的线程。</li>
<li><strong>wait()&#x2F;notify():</strong> notify() 方法随机唤醒一个线程，不够精确。</li>
<li><strong>join():</strong> 只能等待目标线程执行完毕，无法实现更细粒度的控制。</li>
</ul>
<p><strong>使用场景</strong></p>
<ul>
<li><strong>LockSupport:</strong> 适用于更底层的线程同步场景，例如实现自定义同步工具类。</li>
<li><strong>wait()&#x2F;notify():</strong> 适用于经典的生产者-消费者模型等场景。</li>
<li><strong>join():</strong> 适用于需要等待某个线程执行完毕后再继续执行的场景。</li>
</ul>
<p><strong>对于线程 ThreadA 和线程 ThreadB</strong> </p>
<p><strong>Thread.join()</strong></p>
<p>若 ThreadA 在运行过程中执行 ThreadB.join()，</p>
<p><strong>ThreadA 进入 WAITING 状态:</strong> ThreadB.join() 会让 ThreadA 立即进入 WAITING 状态，<strong>并且ThreadA 会无限期地等待 ThreadB 完成，直到 ThreadB 执行完毕才会继续执行</strong>。<strong>ThreadA 将释放任何已持有的锁</strong>。</p>
<p><strong>ThreadB 状态可能不变:</strong> 和之前一样，ThreadB.join() 的调用不会直接改变 ThreadB 的状态。ThreadB 会按照其自身逻辑和状态继续执行或等待。</p>
<p><strong>ThreadB 执行完毕:</strong> 当 ThreadB 执行完毕后，ThreadA 会被唤醒，从 WAITING 状态恢复到 RUNNABLE 状态，<strong>并尝试重新获取之前释放的锁（如果有）</strong>，然后继续执行 ThreadB.join() 之后的代码。</p>
<p><strong>Thread.join(1000)</strong></p>
<p>若 ThreadA 在运行过程中执行 ThreadB.join(1000)，</p>
<p><strong>ThreadA 进入 TIMED_WAITING 状态：</strong> join(1000) 会让 ThreadA 立即进入 TIMED_WAITING（超时等待）状态，最多等待 1000 毫秒（1 秒）。<strong>ThreadA 将释放任何已持有的锁</strong>。</p>
<p><strong>ThreadB 状态可能不变：</strong> ThreadB.join(1000) 的调用不会直接改变 ThreadB 的状态。ThreadB 会按照其自身逻辑和状态继续执行或等待。</p>
<p><strong>两种情况后的 ThreadA：</strong></p>
<ul>
<li><strong>情况一： ThreadB 在 1000 毫秒内执行完毕:</strong> ThreadA 会被唤醒，从 TIMED_WAITING 状态恢复到 RUNNABLE 状态，<strong>并尝试重新获取之前释放的锁（如果有）</strong>，然后继续执行 ThreadB.join(1000) 之后的代码。</li>
<li><strong>情况二： ThreadB 在 1000 毫秒内没有执行完毕:</strong> 1000 毫秒后，ThreadA 会自动被唤醒，从 TIMED_WAITING 状态恢复到 RUNNABLE 状态，<strong>并尝试重新获取之前释放的锁（如果有）</strong>，继续执行 ThreadB.join(1000) 之后的代码。</li>
</ul>
<p><strong>wait() 和 notify()</strong></p>
<ul>
<li><p><strong>wait() 和 notify() 方法必须在同步代码块 (synchronized) 或同步方法中使用。</strong></p>
</li>
<li><p><strong>调用 wait() 和 notify() 方法的对象必须是该同步代码块或同步方法所对应的锁对象。</strong></p>
</li>
</ul>
<p><strong>Object.wait()</strong></p>
<p>让当前线程（假设是 ThreadA）<strong>无限期地释放锁对象，并进入 WAITING 状态</strong>，直到其他线程（例如 ThreadB）调用 notify() 或 notifyAll() 方法唤醒它。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当前线程为 ThreadA</span></span><br><span class="line"><span class="keyword">synchronized</span>(lockObject) &#123; <span class="comment">// lockObject 是共享锁对象</span></span><br><span class="line">  <span class="keyword">while</span> (!someCondition) &#123; <span class="comment">// someCondition 是线程等待的条件</span></span><br><span class="line">    lockObject.wait(); <span class="comment">// ThreadA 释放锁，进入 WAITING 状态</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// someCondition 为 true，ThreadA 被唤醒后，会重新尝试获取锁</span></span><br><span class="line">  <span class="comment">// ... 执行操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>Object.wait(1000)</strong></p>
<p>让当前线程（假设是 ThreadA）释放锁对象，并进入 TIMED_WAITING（超时等待）状态，<strong>最多等待 1000 毫秒</strong>。在这段时间内，有两种情况可以让 ThreadA 被唤醒：</p>
<ul>
<li><strong>其他线程调用 notify() 或 notifyAll() 方法</strong></li>
<li><strong>等待时间超过 1000 毫秒</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当前线程为 ThreadA</span></span><br><span class="line"><span class="keyword">synchronized</span>(lockObject) &#123; <span class="comment">// lockObject 是共享锁对象</span></span><br><span class="line">  <span class="keyword">while</span> (!someCondition) &#123; <span class="comment">// someCondition 是线程等待的条件</span></span><br><span class="line">    lockObject.wait(<span class="number">1000</span>); <span class="comment">// ThreadA 释放锁，进入 TIMED_WAITING 状态</span></span><br><span class="line">  <span class="comment">// someCondition 为 true 或等待超时，ThreadA 会重新尝试获取锁</span></span><br><span class="line">  <span class="comment">// 若此时该锁无法获取到，ThreadA将进入block状态等待获取lockObject对象的锁</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>Object.notify()</strong></p>
<ul>
<li><strong>作用:</strong> 随机唤醒<strong>一个</strong>正在等待<strong>相同锁对象</strong>的线程。</li>
<li><strong>注意：</strong><ul>
<li>notify() 方法<strong>不会立即释放锁</strong>。被唤醒的线程需要等待调用 notify() 的线程释放锁之后，才能真正地获取锁并继续执行。</li>
<li>如果有多个线程正在等待同一个锁对象，notify() 方法只会随机唤醒其中一个，而其他线程仍然会继续等待。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设 ThreadA 调用 wait() 进入等待状态</span></span><br><span class="line"><span class="comment">// 当前线程为 ThreadB</span></span><br><span class="line"><span class="keyword">synchronized</span>(lockObject) &#123;</span><br><span class="line">  <span class="comment">// ... 其他线程执行的操作 ... </span></span><br><span class="line"></span><br><span class="line">  lockObject.notify(); <span class="comment">// 随机唤醒一个等待 lockObject 的线程 (可能是 ThreadA)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ... 调用 notify() 的线程继续执行，直到释放锁 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>Object.notifyAll()</strong></p>
<ul>
<li><strong>作用:</strong> 唤醒<strong>所有</strong>正在等待<strong>相同锁对象</strong>的线程。</li>
<li><strong>注意：</strong><ul>
<li>和 notify() 方法一样，notifyAll() 方法<strong>也不会立即释放锁</strong>。</li>
<li>被唤醒的线程需要竞争锁，只有成功获取锁的线程才能继续执行。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设 ThreadA 和其他线程都在等待 lockObject</span></span><br><span class="line"><span class="comment">// 当前线程为 ThreadB</span></span><br><span class="line"><span class="keyword">synchronized</span>(lockObject) &#123;</span><br><span class="line">  <span class="comment">// ... 其他线程执行的操作 ... </span></span><br><span class="line"></span><br><span class="line">  lockObject.notifyAll(); <span class="comment">// 唤醒所有等待 lockObject 的线程</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ... 调用 notifyAll() 的线程继续执行，直到释放锁 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>LockSupport</strong></p>
<p><strong>许可证机制</strong></p>
<p>LockSupport 的许可证机制可以理解为每个线程都拥有一个虚拟的 “许可证”，每个线程最多只有一个许可证：</p>
<ul>
<li><strong>初始状态：</strong> 线程刚创建时，默认<strong>没有</strong>许可证。</li>
<li><strong>park() 行为：</strong><ul>
<li>如果线程<strong>有</strong>许可证，调用 park() 会<strong>立即返回</strong>，并<strong>消耗</strong>掉这个许可证。</li>
<li>如果线程<strong>没有</strong>许可证，调用 park() 会<strong>阻塞线程</strong>，直到获得许可证。</li>
</ul>
</li>
<li><strong>unpark() 行为：</strong><ul>
<li>如果线程<strong>没有</strong>许可证，调用 unpark() 会<strong>颁发</strong>一个许可证给该线程。</li>
<li>如果线程<strong>已经</strong>有许可证，调用 unpark() <strong>不会</strong>产生任何效果，许可证<strong>不会累积</strong>。</li>
</ul>
</li>
</ul>
<p><strong>LockSupport 的阻塞和唤醒</strong></p>
<p>LockSupport 通过操作线程的 <strong>Parker</strong> 对象来实现阻塞和唤醒。每个线程都有一个 Parker 对象，它内部维护了线程的阻塞状态和许可证信息。</p>
<ul>
<li><strong>park() 阻塞线程：</strong> park() 方法会调用 Parker 对象的 park() 方法，将线程的状态设置为 WAITING 或 PARKED，并挂起线程，直到获得许可证。</li>
<li><strong>unpark() 唤醒线程：</strong> unpark() 方法会调用 Parker 对象的 unpark() 方法，将线程的状态设置为 RUNNABLE，并通知操作系统调度该线程</li>
</ul>
<p><strong>状态与中断</strong></p>
<p><strong>BLOCKED 状态 (阻塞状态)</strong></p>
<ul>
<li><strong>成因:</strong> 线程在尝试获取某个锁时，如果该锁已经被其他线程持有，则当前线程会进入 BLOCKED 状态。</li>
<li><strong>中断的影响:</strong> BLOCKED 状态的线程<strong>不会</strong>响应中断请求。即使调用了 interrupt() 方法，线程也不会立即退出阻塞状态。只有当线程获取到锁之后，才会检查中断状态。</li>
</ul>
<p><strong>WAITING 状态 (等待状态)</strong></p>
<ul>
<li><strong>成因:</strong> 线程调用了 wait()、join()（无超时） 或 park() 方法，进入无限期等待状态。</li>
<li><strong>中断的影响:</strong> WAITING 状态的线程<strong>可以</strong>被中断唤醒。当调用 interrupt() 方法时，线程会抛出 InterruptedException，并退出等待状态。进入 <strong>RUNNABLE (可运行)</strong> 状态</li>
</ul>
<p><strong>TIMED_WAITING 状态 (超时等待状态)</strong></p>
<ul>
<li><strong>成因:</strong> 线程调用了 wait(timeout)、join(timeout)、sleep(timeout) 或 parkNanos(nanos) 方法，进入有限时间等待状态。</li>
<li><strong>中断的影响:</strong> TIMED_WAITING 状态的线程<strong>可以</strong>被中断唤醒。 当调用 interrupt() 方法时，线程会抛出 InterruptedException，并退出等待状态。进入 <strong>RUNNABLE (可运行)</strong> 状态</li>
</ul>
<p><strong>中断后状态</strong></p>
<p>中断后程序会进入 <strong>RUNNABLE (可运行)</strong> 状态，但是不意味着程序可以立即向后执行代码</p>
<ul>
<li><strong>需要获取资源:</strong> 线程需要重新获取之前释放的资源，例如：<ul>
<li>如果是通过 wait() 进入 WAITING 状态的，需要重新获取 wait() 方法所属对象的锁。此时线程若在 synchronized 块中，会等待获取对象的锁，若获取不到，会进入 BLOCKED 状态。</li>
<li>如果是通过 join() 进入 WAITING 状态的，需要等待 join() 的目标线程执行完毕。</li>
</ul>
</li>
<li><strong>需要 CPU 调度:</strong> 线程还需要等待 CPU 的调度，才能真正地执行代码。</li>
</ul>
<h4 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a><strong>Lock</strong></h4><h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><p><strong>公平锁与非公平锁</strong></p>
<p><strong>公平锁</strong>是指多个线程按照申请锁的顺序来获取锁，线程直接进入同步队列中排队，队列中最先到的线程先获得锁。<strong>非公平锁</strong>是多个线程加锁时每个线程都会先去尝试获取锁，如果刚好获取到锁，那么线程无需等待，直接执行，如果获取不到锁才会被加入同步队列的队尾等待执行。</p>
<p><strong>排他锁与共享锁</strong></p>
<p><strong>排他锁</strong>也叫独占锁，是指该锁一次只能被一个线程所持有。如果线程T对数据A加上排它锁后，则其他线程不能再对A加任何类型的锁。获得排它锁的线程即能读数据又能修改数据。<strong>共享锁</strong>是指该锁可被多个线程所持有。如果线程T对数据A加上共享锁后，则其他线程只能对A再加共享锁，不能加排它锁。获得共享锁的线程只能读数据，不能修改数据。</p>
<p><strong>可重入锁与非可重入锁</strong></p>
<p><strong>可重入锁 (ReentrantLock):</strong></p>
<ul>
<li><strong>定义:</strong> 同一个线程可以多次获取同一把锁，而不会导致死锁。</li>
<li><strong>实现机制:</strong> 可重入锁通常使用一个计数器来跟踪线程获取锁的次数。<ul>
<li>当线程第一次获取锁时，计数器加 1。</li>
<li>如果同一个线程再次获取该锁，计数器继续加 1。</li>
<li>当线程释放锁时，计数器减 1。只有当计数器变为 0 时，锁才会真正被释放，其他线程才能获取。</li>
</ul>
</li>
<li><strong>Java 中的实现:</strong> ReentrantLock 类、synchronized 关键字（隐式实现）。</li>
</ul>
<p><strong>非可重入锁 (Non-reentrant Lock):</strong></p>
<ul>
<li><strong>定义:</strong> 如果一个线程已经获取了某个锁，在释放该锁之前，不能再次获取该锁。</li>
<li><strong>Java 中的实现:</strong> Java 中没有直接提供非可重入锁的实现，需要开发者自行实现。</li>
</ul>
<p><strong>乐观锁与悲观锁</strong></p>
<p><strong>乐观锁 (Optimistic Lock):</strong></p>
<ul>
<li><strong>定义:</strong> 乐观地认为并发冲突发生的概率较低，因此不会一开始就加锁，而是 <strong>在更新数据时检查是否发生了冲突</strong>。</li>
<li><strong>实现机制:</strong> 通常使用 <strong>版本号</strong> 或 <strong>时间戳</strong> 来检测冲突。<ul>
<li>在读取数据时，获取数据的版本号或时间戳。</li>
<li>在更新数据时，比较当前版本号或时间戳与之前获取的是否一致。</li>
<li>如果一致，则更新数据；如果不一致，则说明发生了冲突，需要进行处理（例如重试或回滚）。</li>
</ul>
</li>
<li><strong>Java 中的实现:</strong> 可以使用 AtomicInteger、AtomicLong 等原子类实现乐观锁，或者使用 CAS (Compare and Swap) 操作实现。</li>
</ul>
<p><strong>悲观锁 (Pessimistic Lock):</strong></p>
<ul>
<li><strong>定义:</strong> 悲观地认为并发冲突发生的概率较高，因此 <strong>在操作数据时都会先获取锁</strong>，防止其他线程同时访问或修改数据。</li>
<li><strong>实现机制:</strong> 通常使用 <strong>互斥锁</strong> 来实现，例如 Java 中的 synchronized 关键字和 ReentrantLock 类。</li>
<li><strong>Java 中的实现:</strong> synchronized 关键字、ReentrantLock 类等。</li>
</ul>
<h5 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a><strong>volatile</strong></h5><p>取变量值将从主内存获取</p>
<h5 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h5><p>Compare-and-Swap，乐观锁</p>
<ul>
<li>V：要更新的变量(var)</li>
<li>E：预期值(expected)，旧值</li>
<li>N：新值(new)</li>
</ul>
<p>比较并交换的过程如下：</p>
<p>判断 V 是否等于 E，如果等于，将 V 的值设置为 N（原子操作更新）；如果不等，说明已经有其它线程更新了 V，于是当前线程放弃更新，什么都不做。</p>
<p>Unsafe类 native方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">compareAndSwapObject</span><span class="params">(Object o, <span class="type">long</span> offset,Object expected, Object x)</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">compareAndSwapInt</span><span class="params">(Object o, <span class="type">long</span> offset,<span class="type">int</span> expected,<span class="type">int</span> x)</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">compareAndSwapLong</span><span class="params">(Object o, <span class="type">long</span> offset,<span class="type">long</span> expected,<span class="type">long</span> x)</span>;</span><br></pre></td></tr></table></figure>



<p>AtomicInteger类 getAndIncrement</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndIncrement</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> get();  <span class="comment">// 取得AtomicInteger里存储的数值</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> current + <span class="number">1</span>;  <span class="comment">// 加1</span></span><br><span class="line">                <span class="comment">// compareAndSet即为CAS操作，current的值为旧值，变量为AtomicInteger，新值为next的值，尝试将AtomicInteger的值设置为next</span></span><br><span class="line">                <span class="keyword">if</span> (compareAndSet(current, next))   <span class="comment">// 调用compareAndSet执行原子更新操作</span></span><br><span class="line">                    <span class="keyword">return</span> current;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>标准的CAS</p>
<ol>
<li><p>compareAndSet方法首先判断AtomicInteger是否等于current；</p>
</li>
<li><p>如果当前值 &#x3D; current ，说明AtomicInteger的值没有被其他线程修改；</p>
</li>
<li><p>如果当前值 !&#x3D; current，说明AtomicInteger的值被其他线程修改了，<code>compareAndSet()</code>返回False，循环继续，无法返回current；</p>
</li>
</ol>
<h5 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a><strong>synchronized</strong></h5><p>修饰<strong>实例方法</strong>&#x2F;修饰静态方法  锁目标：该方法对应的<strong>对象</strong>&#x2F;<strong>Class对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">       i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">       i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修饰代码块  锁目标：指定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (object) &#123; </span><br><span class="line">   <span class="comment">// 需要同步的代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronizedCounter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">SynchronizedCounter</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SynchronizedCounter</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                counter.increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                counter.increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread1.join();  <span class="comment">// thread1 join执行，即thread1插主线程的队开始执行</span></span><br><span class="line">        thread2.join();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Count: &quot;</span> + counter.getCount()); <span class="comment">// 预期输出：20000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a><strong>ReentrantLock</strong></h5><p>ReentrantLock 是可重入锁：允许线程多次获取同一个锁，每次获取都会增加锁的持有计数，只有当持有计数归零时，锁才会真正释放。</p>
<ul>
<li><strong>可重入锁：</strong> 同一个线程可以多次获取同一个 ReentrantLock，而不会发生死锁。</li>
<li><strong>公平性选择：</strong> 可以选择创建公平锁或非公平锁。<ul>
<li><strong>公平锁：</strong> 按照线程请求锁的顺序分配锁，保证公平性，但吞吐量较低。</li>
<li><strong>非公平锁：</strong> 允许线程 “插队” 获取锁，吞吐量较高，但可能导致线程饥饿。</li>
</ul>
</li>
<li><strong>条件变量：</strong> 支持多个条件变量，可以实现更复杂的线程协作逻辑。</li>
</ul>
<p><strong>获取锁</strong></p>
<ul>
<li><p>**lock(): ** 获取锁。如果锁已被其他线程持有，则当前线程会阻塞，直到获取到锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lock.lock(); <span class="comment">// 获取锁</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// ... 执行需要同步的代码 ...</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    lock.unlock(); <span class="comment">// 释放锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>**tryLock(): ** 尝试获取锁，如果成功获取则返回 true，否则立即返回 false。该方法不会阻塞线程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (lock.tryLock()) &#123; <span class="comment">// 尝试获取锁</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// ... 执行需要同步的代码 ...</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock(); <span class="comment">// 释放锁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 获取锁失败，执行其他逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p><strong>tryLock(long time, TimeUnit unit):</strong> 尝试在指定时间内获取锁，如果成功获取则返回 true，否则超时返回 false。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (lock.tryLock(<span class="number">1</span>, TimeUnit.SECONDS)) &#123; <span class="comment">// 尝试在 1 秒内获取锁</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// ... 执行需要同步的代码 ...</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock(); <span class="comment">// 释放锁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 获取锁超时，执行其他逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>释放锁</strong></p>
<ul>
<li>**unlock(): ** 释放锁。必须与 lock() 或 tryLock() 方法成对出现，确保锁的正确释放。</li>
</ul>
<p><strong>条件变量</strong></p>
<p>一个 ReentrantLock 可以关联多个 Condition 对象，可以实现更复杂的线程协作逻辑，例如 “消费者-多生产者” 模型。</p>
<ul>
<li><p>**newCondition(): ** 创建一个与该锁关联的条件变量。条件变量允许线程在满足特定条件时等待，并在条件满足时被唤醒。</p>
</li>
<li><p>**await(): ** 使当前线程进入等待状态，并释放锁，直到被其他线程唤醒或中断。</p>
</li>
<li><p>**signal(): ** 唤醒一个正在等待该 Condition 的线程。</p>
</li>
<li><p>**signalAll(): ** 唤醒所有正在等待该 Condition 的线程。</p>
</li>
<li><p><strong>await(long time, TimeUnit unit):</strong> 使当前线程在指定时间内进入等待状态，如果超时则自动返回。</p>
</li>
<li><p><strong>awaitNanos(long nanosTimeout):</strong> 使当前线程在指定的纳秒数内进入等待状态，如果超时则自动返回。</p>
</li>
<li><p>**awaitUninterruptibly(): ** 使当前线程进入不可中断的等待状态，直到被其他线程唤醒。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConditionExample</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">notFull</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">notEmpty</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BUFFER_SIZE</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span> (count == BUFFER_SIZE) &#123; <span class="comment">// 缓冲区满，等待</span></span><br><span class="line">                        notFull.await();</span><br><span class="line">                    &#125;</span><br><span class="line">                    count++;</span><br><span class="line">                    System.out.println(<span class="string">&quot;生产者生产了数据，当前数量：&quot;</span> + count);</span><br><span class="line">                    notEmpty.signal(); <span class="comment">// 唤醒消费者</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span> (count == <span class="number">0</span>) &#123; <span class="comment">// 缓冲区空，等待</span></span><br><span class="line">                        notEmpty.await();</span><br><span class="line">                    &#125;</span><br><span class="line">                    count--;</span><br><span class="line">                    System.out.println(<span class="string">&quot;消费者消费了数据，当前数量：&quot;</span> + count);</span><br><span class="line">                    notFull.signal(); <span class="comment">// 唤醒生产者</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        producer.start();</span><br><span class="line">        consumer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>其他方法</strong></p>
<ul>
<li>**getHoldCount(): ** 返回当前线程持有该锁的次数。可重入锁允许同一个线程多次获取锁。</li>
<li>**isHeldByCurrentThread(): ** 判断当前线程是否持有该锁。</li>
<li>**isLocked(): ** 判断该锁是否被任何线程持有。</li>
<li>**hasQueuedThreads(): ** 判断是否有线程在等待获取该锁。</li>
<li>**getQueueLength(): ** 返回等待获取该锁的线程数。</li>
</ul>
<p>实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReentrantLockExample</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">condition</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            lock.lock();  <span class="comment">// 获取锁，如果锁已被其他线程持有，则当前线程会阻塞，直到获取到锁。</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (count &lt; <span class="number">5</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程 1 增加计数：&quot;</span> + ++count);</span><br><span class="line">                    condition.signal(); <span class="comment">// 唤醒其他线程</span></span><br><span class="line">                    condition.await(); <span class="comment">// 等待</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();  <span class="comment">// 释放锁</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (count &lt; <span class="number">5</span>) &#123;</span><br><span class="line">                    condition.await(); <span class="comment">// 等待</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;线程 2 增加计数：&quot;</span> + ++count);</span><br><span class="line">                    condition.signal(); <span class="comment">// 唤醒其他线程</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p><a href="https://tangxman.github.io/2015/07/27/the-difference-of-java-string-pool/">https://tangxman.github.io/2015/07/27/the-difference-of-java-string-pool/</a></p>
-1722133033018.JPG)

<h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><blockquote>
<p>一个 <strong>.class</strong> <strong>文件对应一个 Class 文件常量池!!!!!!!</strong></p>
</blockquote>
<p><strong>Class 文件常量池 ：</strong></p>
<ul>
<li><strong>存储类和接口的常量信息：</strong> Class 文件常量池是 Class 文件中的一部分，它存储了编译时就已经确定的各种字面量和符号引用，主要包括：<ul>
<li><strong>字面量 (Literals):</strong> 基本数据类型的值、字符串、null 值等。</li>
<li><strong>符号引用 (Symbolic References):</strong> 类和接口的全限定名、字段名、方法名、方法描述符等。</li>
</ul>
</li>
<li><strong>支持类加载和链接：</strong> 在类加载的过程中，JVM 会读取 Class 文件常量池中的信息，并在运行时将符号引用解析为直接引用。</li>
</ul>
<p><strong>Class 文件常量池和字符串常量池的关系：</strong></p>
<ul>
<li><strong>字符串常量池是 Class 文件常量池的一部分：</strong> Class 文件常量池中包含一个特殊的区域，专门用来存储字符串字面量，这个区域就是字符串常量池。</li>
<li><strong>类加载时，字符串常量池的内容会被加载到全局字符串池(运行时)：</strong> 这样，不同的类就可以共享相同的字符串对象，节省内存空间。</li>
</ul>
<p><strong>类的字符串常量池：</strong></p>
<ul>
<li>每个类或接口都有自己的<strong>字符串常量池</strong>，存储在该类或接口的字节码文件中。</li>
</ul>
<h3 id="JVM内存"><a href="#JVM内存" class="headerlink" title="JVM内存"></a>JVM内存</h3><h4 id="Method-Area-方法区-元空间"><a href="#Method-Area-方法区-元空间" class="headerlink" title="Method Area (方法区)&#x2F;(元空间)"></a><strong>Method Area (方法区)&#x2F;(元空间)</strong></h4><p><strong>Class与Meta信息</strong></p>
<ul>
<li><strong>className, superClassName, accessFlags, interfaceNames, sourceFile</strong>: 这些是类的基本信息，属于元数据，存储在方法区&#x2F;元空间。</li>
<li><strong>fieldTable</strong>: 字段信息表，包含每个字段的描述信息，存储在方法区&#x2F;元空间。</li>
<li><strong>methodTable</strong>: 方法信息表，包含每个方法的描述信息，存储在方法区&#x2F;元空间。</li>
<li><strong>constantPool</strong>: 运行时常量池，存储常量、方法引用、字段引用等，位于方法区&#x2F;元空间。</li>
<li><strong>instanceSize</strong>: 实例大小是类级别的信息，存储在方法区&#x2F;元空间。</li>
<li><strong>innerClasses, enclosingMethod, genericSignature, runtimeVisibleTypeAnnotations, bootstrapMethods, version, minorVersion, majorVersion, constantValueAttributes, methodHandles, exceptions, nestMembers, nestHost, permittedSubclasses, recordComponents</strong>: 这些信息都属于类的元数据，存储在方法区&#x2F;元空间。</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">Class Info  <span class="comment">// 仅供参考，存在错误</span></span><br><span class="line">|</span><br><span class="line">+---&gt; className<span class="punctuation">:</span> <span class="string">&quot;com/example/MyClass&quot;</span></span><br><span class="line">+---&gt; superClassName<span class="punctuation">:</span> <span class="string">&quot;java/lang/Object&quot;</span></span><br><span class="line">+---&gt; accessFlags<span class="punctuation">:</span> <span class="number">0x0021</span> (PUBLIC | SUPER)</span><br><span class="line">+---&gt; interfaceNames<span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;java/lang/Runnable&quot;</span><span class="punctuation">,</span> <span class="string">&quot;java/io/Serializable&quot;</span><span class="punctuation">]</span></span><br><span class="line">+---&gt; fieldTable<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">|      +---&gt; FieldInfo <span class="punctuation">&#123;</span></span><br><span class="line">|      |       fieldName<span class="punctuation">:</span> <span class="string">&quot;id&quot;</span><span class="punctuation">,</span></span><br><span class="line">|      |       fieldType<span class="punctuation">:</span> <span class="string">&quot;I&quot;</span><span class="punctuation">,</span></span><br><span class="line">|      |       accessFlags<span class="punctuation">:</span> <span class="number">0x0002</span> (PRIVATE)<span class="punctuation">,</span></span><br><span class="line">|      |       attributes<span class="punctuation">:</span> <span class="punctuation">[</span>ConstantValue<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">]</span></span><br><span class="line">|      |     <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">|      +---&gt; FieldInfo <span class="punctuation">&#123;</span></span><br><span class="line">|      |       fieldName<span class="punctuation">:</span> <span class="string">&quot;name&quot;</span><span class="punctuation">,</span></span><br><span class="line">|      |       fieldType<span class="punctuation">:</span> <span class="string">&quot;Ljava/lang/String;&quot;</span><span class="punctuation">,</span></span><br><span class="line">|      |       accessFlags<span class="punctuation">:</span> <span class="number">0x0004</span> (PROTECTED)<span class="punctuation">,</span></span><br><span class="line">|      |       attributes<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">|      |     <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">|      +---&gt; FieldInfo <span class="punctuation">&#123;</span></span><br><span class="line">|      |       fieldName<span class="punctuation">:</span> <span class="string">&quot;constValue&quot;</span><span class="punctuation">,</span></span><br><span class="line">|      |       fieldType<span class="punctuation">:</span> <span class="string">&quot;I&quot;</span><span class="punctuation">,</span></span><br><span class="line">|      |       accessFlags<span class="punctuation">:</span> <span class="number">0x0009</span> (PUBLIC | STATIC)<span class="punctuation">,</span></span><br><span class="line">|      |       attributes<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">|      |     <span class="punctuation">&#125;</span></span><br><span class="line">|    <span class="punctuation">]</span></span><br><span class="line">+---&gt; methodTable<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">|      +---&gt; MethodInfo <span class="punctuation">&#123;</span></span><br><span class="line">|      |       methodName<span class="punctuation">:</span> <span class="string">&quot;&lt;init&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">|      |       methodSignature<span class="punctuation">:</span> <span class="string">&quot;()V&quot;</span><span class="punctuation">,</span></span><br><span class="line">|      |       accessFlags<span class="punctuation">:</span> <span class="number">0x0001</span> (PUBLIC)<span class="punctuation">,</span></span><br><span class="line">|      |       attributes<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">|      |         Code<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">|      |           maxStack<span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">|      |           maxLocals<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">|      |           code<span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">0x2A</span><span class="punctuation">,</span> <span class="number">0xB7</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x01</span><span class="punctuation">,</span> <span class="number">0xB1</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">|      |           exceptionTable<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">|      |           lineNumberTable<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">|      |             <span class="punctuation">&#123;</span>start_pc<span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> line_number<span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">&#125;</span></span><br><span class="line">|      |           <span class="punctuation">]</span></span><br><span class="line">|      |         <span class="punctuation">&#125;</span></span><br><span class="line">|      |       <span class="punctuation">]</span></span><br><span class="line">|      |     <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">|      +---&gt; MethodInfo <span class="punctuation">&#123;</span></span><br><span class="line">|      |       methodName<span class="punctuation">:</span> <span class="string">&quot;run&quot;</span><span class="punctuation">,</span></span><br><span class="line">|      |       methodSignature<span class="punctuation">:</span> <span class="string">&quot;()V&quot;</span><span class="punctuation">,</span></span><br><span class="line">|      |       accessFlags<span class="punctuation">:</span> <span class="number">0x0001</span> (PUBLIC)<span class="punctuation">,</span></span><br><span class="line">|      |       attributes<span class="punctuation">:</span> <span class="punctuation">[</span>...<span class="punctuation">]</span></span><br><span class="line">|      |     <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">|      +---&gt; MethodInfo <span class="punctuation">&#123;</span></span><br><span class="line">|              methodName<span class="punctuation">:</span> <span class="string">&quot;&lt;clinit&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">|              methodSignature<span class="punctuation">:</span> <span class="string">&quot;()V&quot;</span><span class="punctuation">,</span></span><br><span class="line">|              accessFlags<span class="punctuation">:</span> <span class="number">0x0008</span> (STATIC)<span class="punctuation">,</span></span><br><span class="line">|              attributes<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">|                Code<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">|                  maxStack<span class="punctuation">:</span> ...<span class="punctuation">,</span></span><br><span class="line">|                  maxLocals<span class="punctuation">:</span> ...<span class="punctuation">,</span></span><br><span class="line">|                  code<span class="punctuation">:</span> <span class="punctuation">[</span>...<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">|                  exceptionTable<span class="punctuation">:</span> <span class="punctuation">[</span>...<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">|                  lineNumberTable<span class="punctuation">:</span> <span class="punctuation">[</span>...<span class="punctuation">]</span></span><br><span class="line">|                <span class="punctuation">&#125;</span></span><br><span class="line">|              <span class="punctuation">]</span></span><br><span class="line">|            <span class="punctuation">&#125;</span></span><br><span class="line">|    <span class="punctuation">]</span></span><br><span class="line">+---&gt; constantPool<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">|      +---&gt; ConstantPoolInfo<span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span><span class="punctuation">:</span> Unused</span><br><span class="line">|      +---&gt; ConstantPoolInfo<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">:</span> CONSTANT_Utf8_info <span class="punctuation">&#123;</span> <span class="string">&quot;com/example/MyClass&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">|      +---&gt; ConstantPoolInfo<span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span><span class="punctuation">:</span> CONSTANT_Class_info <span class="punctuation">&#123;</span> name_index<span class="punctuation">:</span> <span class="number">1</span> <span class="punctuation">&#125;</span></span><br><span class="line">|      +---&gt; ConstantPoolInfo<span class="punctuation">[</span><span class="number">3</span><span class="punctuation">]</span><span class="punctuation">:</span> CONSTANT_Utf8_info <span class="punctuation">&#123;</span> <span class="string">&quot;java/lang/Object&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">|      +---&gt; ConstantPoolInfo<span class="punctuation">[</span><span class="number">4</span><span class="punctuation">]</span><span class="punctuation">:</span> CONSTANT_Class_info <span class="punctuation">&#123;</span> name_index<span class="punctuation">:</span> <span class="number">3</span> <span class="punctuation">&#125;</span></span><br><span class="line">|      +---&gt; ConstantPoolInfo<span class="punctuation">[</span><span class="number">5</span><span class="punctuation">]</span><span class="punctuation">:</span> CONSTANT_Utf8_info <span class="punctuation">&#123;</span> <span class="string">&quot;id&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">|      +---&gt; ConstantPoolInfo<span class="punctuation">[</span><span class="number">6</span><span class="punctuation">]</span><span class="punctuation">:</span> CONSTANT_Utf8_info <span class="punctuation">&#123;</span> <span class="string">&quot;I&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">|      +---&gt; ConstantPoolInfo<span class="punctuation">[</span><span class="number">7</span><span class="punctuation">]</span><span class="punctuation">:</span> CONSTANT_Utf8_info <span class="punctuation">&#123;</span> <span class="string">&quot;name&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">|      +---&gt; ConstantPoolInfo<span class="punctuation">[</span><span class="number">8</span><span class="punctuation">]</span><span class="punctuation">:</span> CONSTANT_Utf8_info <span class="punctuation">&#123;</span> <span class="string">&quot;Ljava/lang/String;&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">|      +---&gt; ConstantPoolInfo<span class="punctuation">[</span><span class="number">9</span><span class="punctuation">]</span><span class="punctuation">:</span> CONSTANT_Utf8_info <span class="punctuation">&#123;</span> <span class="string">&quot;&lt;init&gt;&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">|      +---&gt; ConstantPoolInfo<span class="punctuation">[</span><span class="number">10</span><span class="punctuation">]</span><span class="punctuation">:</span> CONSTANT_Utf8_info <span class="punctuation">&#123;</span> <span class="string">&quot;()V&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">|      +---&gt; ... (more constant pool entries)</span><br><span class="line">|    <span class="punctuation">]</span></span><br><span class="line">+---&gt; sourceFile<span class="punctuation">:</span> <span class="string">&quot;MyClass.java&quot;</span></span><br><span class="line">+---&gt; innerClasses<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">|      <span class="punctuation">&#123;</span></span><br><span class="line">|        innerClassName<span class="punctuation">:</span> <span class="string">&quot;InnerClass&quot;</span><span class="punctuation">,</span></span><br><span class="line">|        outerClassName<span class="punctuation">:</span> <span class="string">&quot;com/example/MyClass&quot;</span><span class="punctuation">,</span></span><br><span class="line">|        innerName<span class="punctuation">:</span> <span class="string">&quot;InnerClass&quot;</span><span class="punctuation">,</span></span><br><span class="line">|        innerClassAccessFlags<span class="punctuation">:</span> <span class="number">0x0009</span> (PUBLIC | STATIC)</span><br><span class="line">|      <span class="punctuation">&#125;</span></span><br><span class="line">|    <span class="punctuation">]</span></span><br><span class="line">+---&gt; enclosingMethod<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">+---&gt; genericSignature<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">+---&gt; runtimeVisibleAnnotations<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">|      @java.lang.Deprecated<span class="punctuation">,</span></span><br><span class="line">|      @java.lang.SuppressWarnings(<span class="string">&quot;unchecked&quot;</span>)</span><br><span class="line">|    <span class="punctuation">]</span></span><br><span class="line">+---&gt; runtimeVisibleTypeAnnotations<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">+---&gt; bootstrapMethods<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">+---&gt; version<span class="punctuation">:</span> <span class="number">52.0</span></span><br><span class="line">+---&gt; minorVersion<span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">+---&gt; majorVersion<span class="punctuation">:</span> <span class="number">52</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>静态变量 (Static Variables)：</strong></p>
<ul>
<li>静态变量的值和其描述信息（如字段名、类型等）都存储在<strong>方法区&#x2F;元空间</strong>。更具体地说：<ul>
<li>描述信息存储在方法区&#x2F;元空间的 fieldTable 中。</li>
<li>值也存储在方法区&#x2F;元空间中，与类的其他静态数据一起。</li>
</ul>
</li>
</ul>
<p>当 Java 代码访问静态变量时，会发生以下步骤:</p>
<ol>
<li>虚拟机根据变量名找到对应的 <strong>Class 对象</strong>。</li>
<li>在 Class 对象的 <strong>fieldTable</strong> 中找到该静态变量的 <strong>FieldInfo</strong> 结构体。</li>
<li><strong>直接从方法区&#x2F;元空间</strong> 中读取该静态变量的值，而<strong>不需要通过内存地址间接访问</strong>。</li>
</ol>
</blockquote>
<blockquote>
<blockquote>
<p>一个类在 JVM 内存中对应一个运行时常量池！！！！！</p>
</blockquote>
<p><strong>运行时常量池 (Runtime Constant Pool)（多个）：</strong></p>
<ul>
<li><strong>运行时常量池是方法区的一部分</strong>，每个类或接口都对应一个运行时常量池。</li>
<li><strong>它是 Class 文件常量池的运行时表示形式。</strong></li>
<li>当类加载器将 Class 文件加载到内存时，会为该类创建运行时常量池，并将 Class 文件常量池中的内容加载到其中。</li>
</ul>
<p>运行时常量池中存储的内容主要包括：</p>
<ul>
<li><strong>字面量 (Literals):</strong> 例如数字、字符串、null 值等。</li>
<li><strong>符号引用 (Symbolic References):</strong> 例如类和接口的全限定名、字段名、方法名、方法描述符等。</li>
</ul>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">Meta Info  <span class="comment">// 仅供参考，存在错误</span></span><br><span class="line">|</span><br><span class="line">+---&gt; classMetadata<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">|      <span class="comment">// 包含上述Class信息的所有内容</span></span><br><span class="line">|    <span class="punctuation">&#125;</span></span><br><span class="line">+---&gt; methodMetadata<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">|      <span class="punctuation">&#123;</span></span><br><span class="line">|        methodName<span class="punctuation">:</span> <span class="string">&quot;&lt;init&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">|        compiledCode<span class="punctuation">:</span> &lt;native code address&gt;<span class="punctuation">,</span></span><br><span class="line">|        interpreterEntry<span class="punctuation">:</span> &lt;interpreter entry point&gt;<span class="punctuation">,</span></span><br><span class="line">|        nativeEntry<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">|        bytecodeSize<span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">|        maxStack<span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">|        maxLocals<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">|        exceptionTable<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">|        invocationCounter<span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">|        backedgeCounter<span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">|      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">|      <span class="punctuation">&#123;</span></span><br><span class="line">|        methodName<span class="punctuation">:</span> <span class="string">&quot;run&quot;</span><span class="punctuation">,</span></span><br><span class="line">|        <span class="comment">// ... similar structure to &lt;init&gt;</span></span><br><span class="line">|      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">|      <span class="punctuation">&#123;</span></span><br><span class="line">|        methodName<span class="punctuation">:</span> <span class="string">&quot;&lt;clinit&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">|        <span class="comment">// ... similar structure to &lt;init&gt;</span></span><br><span class="line">|      <span class="punctuation">&#125;</span></span><br><span class="line">|    <span class="punctuation">]</span></span><br><span class="line">+---&gt; fieldLayout<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">|      <span class="punctuation">&#123;</span>fieldName<span class="punctuation">:</span> <span class="string">&quot;id&quot;</span><span class="punctuation">,</span> offset<span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">|      <span class="punctuation">&#123;</span>fieldName<span class="punctuation">:</span> <span class="string">&quot;name&quot;</span><span class="punctuation">,</span> offset<span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">&#125;</span></span><br><span class="line">|    <span class="punctuation">]</span></span><br><span class="line">+---&gt; vtableLength<span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">+---&gt; vtable<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">|      &lt;address of Object.hashCode&gt;<span class="punctuation">,</span></span><br><span class="line">|      &lt;address of Object.equals&gt;<span class="punctuation">,</span></span><br><span class="line">|      &lt;address of Object.toString&gt;<span class="punctuation">,</span></span><br><span class="line">|      &lt;address of MyClass.run&gt;<span class="punctuation">,</span></span><br><span class="line">|      &lt;address of Object.finalize&gt;</span><br><span class="line">|    <span class="punctuation">]</span></span><br><span class="line">+---&gt; itableLength<span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">+---&gt; itable<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">|      <span class="punctuation">&#123;</span></span><br><span class="line">|        interface<span class="punctuation">:</span> <span class="string">&quot;java/lang/Runnable&quot;</span><span class="punctuation">,</span></span><br><span class="line">|        methods<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">|          <span class="punctuation">&#123;</span>methodName<span class="punctuation">:</span> <span class="string">&quot;run&quot;</span><span class="punctuation">,</span> methodAddress<span class="punctuation">:</span> &lt;address of MyClass.run&gt;<span class="punctuation">&#125;</span></span><br><span class="line">|        <span class="punctuation">]</span></span><br><span class="line">|      <span class="punctuation">&#125;</span></span><br><span class="line">|    <span class="punctuation">]</span></span><br><span class="line">+---&gt; instanceSize<span class="punctuation">:</span> <span class="number">24</span> bytes</span><br><span class="line">+---&gt; staticFieldValues<span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">]</span></span><br><span class="line">+---&gt; constantValueAttributes<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">|      <span class="punctuation">&#123;</span>fieldIndex<span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> constantValue<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">&#125;</span></span><br><span class="line">|    <span class="punctuation">]</span></span><br><span class="line">+---&gt; methodHandles<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">+---&gt; exceptions<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">+---&gt; nestMembers<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">+---&gt; nestHost<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">+---&gt; permittedSubclasses<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">+---&gt; recordComponents<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br></pre></td></tr></table></figure>





<p>示例：</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">species</span> <span class="operator">=</span> <span class="string">&quot;Human&quot;</span>;  <span class="comment">// 静态变量</span></span><br><span class="line"> <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.name = name;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BRAND</span> <span class="operator">=</span> <span class="string">&quot;Tesla&quot;</span>; <span class="comment">// 静态常量</span></span><br><span class="line"> <span class="keyword">public</span> String model;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String model)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.model = model;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>当这两个类都被加载到 JVM 中后，方法区中大致会存储以下信息：</strong></p>
<p><strong>1.  类信息:</strong></p>
<ul>
<li><code>Person</code> 类的类型信息： 包括类的完整名称 (<code>Person</code>)、父类 (<code>java.lang.Object</code>)、接口（无）、访问修饰符 (<code>public</code>) 等。</li>
<li><code>Car</code> 类的类型信息： 包括类的完整名称 (<code>Car</code>)、父类 (<code>java.lang.Object</code>)、接口（无）、访问修饰符 (<code>public</code>) 等。</li>
</ul>
<p><strong>2.  字段信息:</strong></p>
<ul>
<li><code>Person.species</code>:  字段名、类型 (<code>java.lang.String</code>)、访问修饰符 (<code>public static</code>)。</li>
<li><code>Person.name</code>:  字段名、类型 (<code>java.lang.String</code>)、访问修饰符 (<code>public</code>)。</li>
<li><code>Car.BRAND</code>:  字段名、类型 (<code>java.lang.String</code>)、访问修饰符 (<code>public static final</code>)。</li>
<li><code>Car.model</code>:  字段名、类型 (<code>java.lang.String</code>)、访问修饰符 (<code>public</code>)。</li>
</ul>
<p><strong>3. 方法信息:</strong></p>
<ul>
<li><code>Person</code> 类的构造方法和任何其他方法的名称、返回类型、参数列表、访问修饰符、方法体（字节码）。</li>
<li><code>Car</code> 类的构造方法和任何其他方法的名称、返回类型、参数列表、访问修饰符、方法体（字节码）。</li>
</ul>
<p><strong>4.  运行时常量池:</strong></p>
<ul>
<li><code>Person</code> 类的运行时常量池： 包含字符串字面量 <code>&quot;Human&quot;</code>、”name” 等，以及 <code>Person</code> 构造方法、<code>species</code> 字段的符号引用等。</li>
<li><code>Car</code> 类的运行时常量池： 包含字符串字面量 <code>&quot;Tesla&quot;</code>、”model” 等，以及 <code>Car</code> 构造方法、<code>BRAND</code> 字段的符号引用等。</li>
</ul>
<p><strong>5.  静态变量:</strong></p>
<ul>
<li><code>Person.species</code>:  存储实际的值 <code>&quot;Human&quot;</code>。</li>
<li><code>Car.BRAND</code>:  存储实际的值 <code>&quot;Tesla&quot;</code>。</li>
</ul>
<p><strong>6. Class 对象:</strong></p>
<ul>
<li><code>Person.class</code> 对象：存储 <code>Person</code> 类的类型信息、字段信息、方法信息等的引用。</li>
<li><code>Car.class</code> 对象：存储 <code>Car</code> 类的类型信息、字段信息、方法信息等的引用。</li>
</ul>
</blockquote>
<h4 id="Heap-堆"><a href="#Heap-堆" class="headerlink" title="Heap (堆)"></a><strong>Heap (堆)</strong></h4><img src="/2024/07/28/Android-Learning-Record/image-20240728103642872.png" class="" title="image-20240728103642872">

<p><strong>普通对象</strong></p>
<p><strong>Class对象</strong>！！！</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">Class Object  <span class="comment">// 仅供参考，存在错误</span></span><br><span class="line">|</span><br><span class="line">+---&gt; classLoader<span class="punctuation">:</span> SystemClassLoader</span><br><span class="line">+---&gt; protectionDomain<span class="punctuation">:</span> ProtectionDomain <span class="punctuation">&#123;</span></span><br><span class="line">|      codeSource<span class="punctuation">:</span> CodeSource <span class="punctuation">&#123;</span> location<span class="punctuation">:</span> <span class="string">&quot;file:/path/to/MyClass.class&quot;</span><span class="punctuation">,</span> certs<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">|      permissions<span class="punctuation">:</span> Permissions <span class="punctuation">&#123;</span> ... <span class="punctuation">&#125;</span></span><br><span class="line">|    <span class="punctuation">&#125;</span></span><br><span class="line">+---&gt; className<span class="punctuation">:</span> <span class="string">&quot;com.example.MyClass&quot;</span></span><br><span class="line">+---&gt; packageName<span class="punctuation">:</span> <span class="string">&quot;com.example&quot;</span></span><br><span class="line">+---&gt; modifiers<span class="punctuation">:</span> <span class="number">0x0021</span> (PUBLIC | SUPER)</span><br><span class="line">+---&gt; superClass<span class="punctuation">:</span> Class object for <span class="string">&quot;java.lang.Object&quot;</span></span><br><span class="line">+---&gt; interfaces<span class="punctuation">:</span> <span class="punctuation">[</span>Class object for <span class="string">&quot;java.lang.Runnable&quot;</span><span class="punctuation">,</span> Class object for <span class="string">&quot;java.io.Serializable&quot;</span><span class="punctuation">]</span></span><br><span class="line">+---&gt; declaredFields<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">|      Field object for <span class="string">&quot;id&quot;</span><span class="punctuation">,</span></span><br><span class="line">|      Field object for <span class="string">&quot;name&quot;</span><span class="punctuation">,</span></span><br><span class="line">|      Field object for <span class="string">&quot;constValue&quot;</span></span><br><span class="line">|    <span class="punctuation">]</span></span><br><span class="line">+---&gt; declaredMethods<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">|      Method object for <span class="string">&quot;&lt;init&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">|      Method object for <span class="string">&quot;run&quot;</span></span><br><span class="line">|    <span class="punctuation">]</span></span><br><span class="line">+---&gt; declaredConstructors<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">|      Constructor object for <span class="string">&quot;&lt;init&gt;&quot;</span></span><br><span class="line">|    <span class="punctuation">]</span></span><br><span class="line">+---&gt; annotations<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">|      @java.lang.Deprecated<span class="punctuation">,</span></span><br><span class="line">|      @java.lang.SuppressWarnings(<span class="string">&quot;unchecked&quot;</span>)</span><br><span class="line">|    <span class="punctuation">]</span></span><br><span class="line">+---&gt; innerClasses<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">|      Class object for <span class="string">&quot;com.example.MyClass$InnerClass&quot;</span></span><br><span class="line">|    <span class="punctuation">]</span></span><br><span class="line">+---&gt; enclosingMethod<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">+---&gt; enclosingClass<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">+---&gt; genericInfo<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">+---&gt; typeParameters<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">+---&gt; enumConstants<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">+---&gt; classVersion<span class="punctuation">:</span> <span class="number">52.0</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Class 对象本身是 Java 对象，存储在堆上。Class 对象包含指向方法区&#x2F;元空间的指针，用于访问类的元数据信息，例如 <code>fieldTable</code>, <code>methodTable</code>, <code>constantPool</code> 等。</p>
<ul>
<li><strong>methodTable 指针</strong>: Class 对象中的 methodTable 指针指向方法区&#x2F;元空间中存储的方法信息数组。</li>
<li><strong>Runtime Constant Pool 指针</strong>: Class 对象包含一个指向运行时常量池的指针，该常量池也位于方法区&#x2F;元空间。</li>
</ul>
</blockquote>
<p><strong>全局字符串池 (String Pool)（JDK7 以后）:</strong></p>
<ul>
<li><strong>全局字符串池</strong> 是 JVM 级别维护的字符串常量池，所有类共享。</li>
<li>每个类或接口都有自己的<strong>字符串常量池</strong>，存储在该类或接口的字节码文件中。</li>
<li>类加载时，类的字符串常量池中的字符串会被加载到全局字符串池中。</li>
<li>String.intern() 方法可以将一个字符串手动添加到全局字符串池中。</li>
</ul>
<p><strong>classLoader</strong>: 类加载器是 Java 对象，存储在堆上。</p>
<p><strong>protectionDomain</strong>: 保护域对象也是 Java 对象，存储在堆上。</p>
<p><strong>runtimeAnnotations</strong>: 运行时注解是 Java 对象，存储在堆上。</p>
<h4 id="Thread-线程"><a href="#Thread-线程" class="headerlink" title="Thread (线程)"></a><strong>Thread (线程)</strong></h4><p><strong>虚拟机栈 (JVM Stack)</strong></p>
<ul>
<li><strong>每个线程私有</strong>，随着线程的创建而创建，销毁而销毁。</li>
<li><strong>存储 Java 方法执行的信息：</strong> 每个方法在执行时都会创建一个栈帧 (Stack Frame) 并压入虚拟机栈，栈帧中存储了：<ul>
<li><strong>局部变量表 (Local Variable Array):</strong> 存储方法参数和方法内部定义的局部变量。</li>
<li><strong>操作数栈 (Operand Stack):</strong> 用于存储方法执行过程中产生的中间结果。</li>
<li><strong>动态链接 (Dynamic Linking):</strong> 存储方法返回值的地址、异常处理表等信息。</li>
</ul>
</li>
<li><strong>方法执行完后，对应的栈帧会出栈，释放内存空间。</strong></li>
<li><strong>如果线程请求的栈深度超过了虚拟机栈所允许的最大深度，会抛出 StackOverflowError 异常。</strong></li>
<li><strong>如果虚拟机栈可以动态扩展，但扩展时无法申请到足够的内存，就会抛出 OutOfMemoryError 异常。</strong></li>
</ul>
<p><strong>本地方法栈 (Native Method Stack)</strong></p>
<ul>
<li><strong>与虚拟机栈类似，也是线程私有的。</strong></li>
<li><strong>为 native 方法服务：</strong> native 方法是指使用 Java 以外的语言（例如 C&#x2F;C++）编写的方法。</li>
<li><strong>不同的虚拟机实现方式不同：</strong> 有些虚拟机（例如 HotSpot VM）直接将本地方法栈和虚拟机栈合二为一。</li>
</ul>
<p><strong>程序计数器 (Program Counter Register)</strong></p>
<p> 记录当前线程执行的字节码指令地址。</p>
<blockquote>
<p>协程</p>
</blockquote>
<h3 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h3><img src="/2024/07/28/Android-Learning-Record/image-20240728103642872.png" class="" title="image-20240728103642872">

<p><strong>堆内存划分</strong></p>
<p>Java 的堆内存主要被划分为两个区域：</p>
<ul>
<li><strong>新生代 (Young Generation):</strong>  存放新创建的对象。由于大多数对象的生命周期都比较短，因此新生代的空间相对较小，垃圾回收也比较频繁。新生代又可以细分为三个区域：<ul>
<li><strong>Eden 区:</strong> 新创建的对象首先被分配到这里。</li>
<li><strong>Survivor 区 (From, To):</strong>  经历过一次 Minor GC 后仍然存活的对象会被复制到 Survivor 区。新生代有两个 Survivor 区，每次 Minor GC 只使用其中一个，另一个处于闲置状态。</li>
</ul>
</li>
<li><strong>老年代 (Old Generation):</strong>  存放生命周期较长的对象，例如缓存数据、数据库连接等。老年代的空间比较大，垃圾回收频率也相对较低。</li>
</ul>
<p>垃圾回收分区特点</p>
<p>年轻代（Young Gen）</p>
<ul>
<li>年轻代特点：区域相对老年代较小，对象生命周期短、存活率低，回收频繁。</li>
<li>这种情况复制算法的回收整理，速度是最快的。复制算法的效率只和当前存活对象大小有关，因此很适用于年轻代的回收。而复制算法内存利用率不高的问题，通过hotspot中的两个survivor的设计得到缓解。</li>
</ul>
<p>老年代（Tenured Gen）</p>
<ul>
<li>老年代特点：区域较大，对象生命周期长、存活率高，回收不及年轻代频繁。</li>
<li>这种情况存在大量存活率高的对象，复制算法明显变得不合适。一般是由标记-清除或者是标记-清除与标记-整理的混合实现。</li>
</ul>
<p><strong>垃圾收集类型</strong></p>
<p>Java 中的垃圾收集主要分为两大类：</p>
<ul>
<li><strong>部分收集 (Partial GC):</strong>  只收集部分堆内存空间，频率较高。<ul>
<li><strong>新生代收集 (Minor GC&#x2F;Young GC):</strong>  只收集新生代的垃圾。当 Eden 区空间不足时就会触发 Minor GC。</li>
<li><strong>老年代收集 (Major GC&#x2F;Old GC):</strong>  只收集老年代的垃圾。Major GC 通常伴随着 Minor GC，因为老年代的对象通常是从新生代晋升过来的。</li>
</ul>
</li>
<li><strong>整堆收集 (Full GC):</strong>  收集整个堆内存空间的垃圾，包括新生代和老年代。Full GC 的频率很低，但是执行时间比较长，会造成应用程序的停顿。</li>
</ul>
<blockquote>
<p><strong>JDK6 update 24 后回收规则</strong></p>
<p>在 JDK6 update 24 之后，为了更好地控制 Full GC 的触发时机，引入了新的回收规则：</p>
<p><strong>只要老年代的连续空间大于新生代空间总大小或者历次晋升的平均大小，就会进行 Minor GC，否则将进行 Full GC。</strong></p>
<ul>
<li><strong>老年代的连续空间:</strong>  指老年代中最大的一块连续可用空间。</li>
<li><strong>新生代空间总大小:</strong>  指 Eden 区和两个 Survivor 区的总大小。</li>
<li><strong>历次晋升的平均大小:</strong>  指历次 Minor GC 后晋升到老年代的对象的平均大小。</li>
</ul>
<p><strong>该规则的意义:</strong></p>
<ul>
<li>尽可能避免 Full GC 的发生，因为 Full GC 的成本很高。</li>
<li>当老年代的连续空间不足以容纳新生代的对象时，即使进行 Minor GC 也无法避免 Full GC，因此直接进行 Full GC 反而效率更高。</li>
</ul>
</blockquote>
<p><strong>永久代垃圾回收</strong></p>
<p>永久代内存区域也会进行垃圾回收。永久代的垃圾收集主要包废弃常量和无用的类（被类加载器卸载的Class）。永久代触发垃圾回收的条件比较困难，需要同时满足以下三点：</p>
<ul>
<li>该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例；</li>
<li>加载该类的ClassLoader已经被回收；</li>
<li>该类对应的java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法；</li>
</ul>
<p><strong>对象晋升</strong></p>
<p>当 Eden 区空间不足时，会触发 Minor GC。Minor GC 会将 Eden 区中存活的对象复制到 Survivor 区。如果 Survivor 区也满了，则会将部分存活的对象晋升到老年代。</p>
<p><strong>晋升规则:</strong></p>
<ul>
<li>每个对象都有一个年龄计数器，每经历一次 Minor GC，年龄计数器就加 1。</li>
<li>当对象的年龄达到一定阈值 (默认是 15) 时，就会被晋升到老年代。</li>
<li>如果 Survivor 区中相同年龄的对象总大小超过 Survivor 区空间的一半，则年龄大于等于该年龄的对象也会被晋升到老年代。</li>
</ul>
<h4 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a><strong>垃圾回收算法</strong></h4><p>在垃圾回收过程中，应用软件将处于一种Stop the World的状态。在<strong>Stop the World</strong>状态下，应用程序所有的线程都会挂起，暂停一切正常的工作，等待垃圾回收的完成。如果垃圾回收时间过长，应用程序会被挂起很久，将严重影响用户体验或者系统的稳定性。</p>
<p><strong>标记算法：引用计数算法</strong></p>
<blockquote>
<p>Java垃圾回收没有采用该方法</p>
</blockquote>
<p>引用计数算法（Reference Counting）比较简单，对每个对象保存一个整型的引用计数器属性。用于记录对象被引用的情况。</p>
<p>对于一个对象A，只要有任何一个对象引用了A，则A的引用计数器就加1；当引用失效时，引用计数器就减1。只要对象A的引用计数器的值为0，即表示对象A不可能再被使用，可进行回收。</p>
<p>优点：实现简单，垃圾对象便于辨识；判定效率高，回收没有延迟性。</p>
<p>缺点：</p>
<ol>
<li>它需要单独的字段存储计数器，这样的做法增加了<strong>存储空间的开销</strong>。</li>
<li>每次赋值都需要更新计数器，伴随着加法和减法操作，这增加了<strong>时间开销</strong>。</li>
<li>引用计数器有一个严重的问题，即<strong>无法处理循环引用</strong>的情况。这是一条致命缺陷，导致在Java的垃圾回收器中没有使用这类算法。</li>
</ol>
<p>参考链接：<a href="https://juejin.cn/post/6981812825735987208">https://juejin.cn/post/6981812825735987208</a></p>
<p><strong>标记算法：可达性分析算法</strong></p>
<blockquote>
<p>Java垃圾回收使用了该算法</p>
</blockquote>
<p>可达性分析算法是以根对象集合（GCRoots）为起始点，按照从上至下的方式<strong>搜索被根对象集合所连接的目标对象是否可达。</strong></p>
<p>使用可达性分析算法后，内存中的存活对象都会被根对象集合直接或间接连接着，搜索所走过的路径称为<strong>引用链</strong>（Reference Chain）</p>
<p>如果目标对象没有任何引用链相连，则是不可达的，就意味着该对象己经死亡，可以标记为垃圾对象。</p>
<p>在可达性分析算法中，只有能够被根对象集合直接或者间接连接的对象才是存活对象。</p>
<img src="/2024/07/28/Android-Learning-Record/image-20240814154833539.png" class="" title="image-20240814154833539">

<blockquote>
<p>GC Roots 可以是以下元素：</p>
<p><strong>虚拟机栈中引用的对象</strong></p>
<ul>
<li>比如：各个线程被调用的方法中使用到的参数、局部变量等。</li>
</ul>
<p>本地方法栈内JNI（通常说的本地方法）引用的对象</p>
<p><strong>方法区中类静态属性引用的对象</strong></p>
<ul>
<li>比如：Java类的引用类型静态变量</li>
</ul>
<p><strong>方法区中常量引用的对象</strong></p>
<ul>
<li>比如：字符串常量池（StringTable）里的引用</li>
</ul>
<p><strong>所有被同步锁synchronized持有的对象</strong></p>
<p><strong>Java虚拟机内部的引用</strong></p>
<ul>
<li>基本数据类型对应的Class对象，一些常驻的异常对象（如：NullPointerException、OutofMemoryError），系统类加载器。</li>
</ul>
<p><strong>反映java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等</strong></p>
</blockquote>
<p>参考链接：<a href="https://juejin.cn/post/6981812825735987208">https://juejin.cn/post/6981812825735987208</a></p>
<p><strong>清除算法：标记-清除算法</strong></p>
<p>当堆中的有效内存空间（available memory）被耗尽的时候，就会停止整个程序（也被称为stop the world），然后进行两项工作，第一项则是标记，第二项则是清除</p>
<ol>
<li>标记：Collector从引用根节点开始遍历，标记所有被引用的对象。一般是在对象的Header中记录为可达对象。<ul>
<li>注意：标记的是被引用的对象，也就是可达对象，并非标记的是即将被清除的垃圾对象</li>
</ul>
</li>
<li>清除：Collector对堆内存从头到尾进行线性的遍历，如果发现某个对象在其Header中没有标记为可达对象，则将其回收</li>
</ol>
<img src="/2024/07/28/Android-Learning-Record/image-20240814161729364.png" class="" title="image-20240814161729364">

<blockquote>
<p>被清除的对象实际上是被加入到了空闲内存列表，下次分配内存时该区域为可用区域，直接覆盖写入新内容</p>
</blockquote>
<p><strong>清除算法：复制算法</strong></p>
<p>将活着的内存空间分为两块，每次只使用其中一块，在垃圾回收时将正在使用的内存中的存活对象复制到未被使用的内存块中，之后清除正在使用的内存块中的所有对象，交换两个内存的角色，最后完成垃圾回收</p>
<img src="/2024/07/28/Android-Learning-Record/image-20240814161933420.png" class="" title="image-20240814161933420">

<p><strong>新生代垃圾回收使用复制算法，Eden区和S0区存活对象整体复制到S1区</strong></p>
<img src="/2024/07/28/Android-Learning-Record/image-20240814162137394.png" class="" title="image-20240814162137394">



<p><strong>清除算法：标记-压缩算法</strong></p>
<p>标记-压缩算法 等价于进行 标记-清除算法+内存碎片整理</p>
<ol>
<li>第一阶段和标记清除算法一样，从根节点开始标记所有被引用对象</li>
<li>第二阶段将所有的存活对象压缩到内存的一端，按顺序排放。之后，清理边界外所有的空间。</li>
</ol>
<img src="/2024/07/28/Android-Learning-Record/image-20240814162220131.png" class="" title="image-20240814162220131">







<h2 id="Android程序"><a href="#Android程序" class="headerlink" title="Android程序"></a>Android程序</h2><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p><strong>dp 和 sp</strong></p>
<p><strong>dp (Density-independent Pixel - 密度无关像素)</strong></p>
<ul>
<li><strong>定义:</strong> dp 是一个基于屏幕密度的抽象单位。它代表了在 160 dpi (dots per inch) 屏幕上一个物理像素的长度。</li>
<li><strong>用途:</strong> 主要用于定义 View 的尺寸和间距，例如按钮的宽度、边距、内边距等。</li>
<li><strong>优势:</strong> 使用 dp 可以保证应用在不同屏幕密度的设备上保持一致的显示效果。系统会根据设备的屏幕密度自动将 dp 值转换为对应的像素值。</li>
<li><strong>示例:</strong><ul>
<li>android:layout_width&#x3D;”100dp” 表示该 View 的宽度为 100dp，在不同密度的屏幕上，系统会将其转换为对应的像素值，以保持相同的物理尺寸。</li>
</ul>
</li>
</ul>
<p><strong>sp (Scale-independent Pixel - 缩放无关像素)</strong></p>
<ul>
<li><strong>定义:</strong> sp 与 dp 类似，也是一个基于屏幕密度的抽象单位。不同之处在于，sp 还受到用户字体大小设置的影响。</li>
<li><strong>用途:</strong> 主要用于定义文字大小。</li>
<li><strong>优势:</strong> 使用 sp 可以根据用户的字体大小偏好自动调整文字大小，提高应用的可访问性。</li>
<li><strong>示例:</strong><ul>
<li>android:textSize&#x3D;”18sp” 表示该 TextView 的文字大小为 18sp，如果用户在系统设置中调整了字体大小，该 TextView 的文字大小也会随之改变。</li>
</ul>
</li>
</ul>
<p><strong>layout_gravity 和 gravity</strong></p>
<p><strong>layout_gravity</strong></p>
<ul>
<li><strong>作用目标:</strong> layout_gravity 属性用于控制 <strong>当前 View 在其父布局中的对齐方式</strong>。</li>
<li><strong>适用范围:</strong> 该属性只能应用于 <strong>ViewGroup 的子 View</strong>，因为它需要依赖于父布局的特性才能生效。</li>
<li><strong>常见取值:</strong><ul>
<li>top、bottom、left、right：分别表示顶部对齐、底部对齐、左侧对齐、右侧对齐。</li>
<li>center：表示水平和垂直居中对齐。</li>
<li>center_horizontal、center_vertical：分别表示水平居中对齐、垂直居中对齐。</li>
<li>start、end：分别表示在当前语言环境下，内容开始的方向对齐、内容结束的方向对齐。</li>
<li>可以使用 | 符号组合多个值，例如 android:layout_gravity&#x3D;”bottom|right” 表示右下角对齐。</li>
</ul>
</li>
</ul>
<p><strong>gravity</strong></p>
<ul>
<li><p><strong>作用目标:</strong> gravity 属性用于控制 <strong>当前 View 中的内容对齐方式</strong>。</p>
</li>
<li><p><strong>适用范围:</strong> 该属性可以应用于 <strong>任何 View</strong>，因为它控制的是 View 自身内容的显示方式。</p>
</li>
<li><p><strong>常见取值:</strong></p>
<ul>
<li>与 layout_gravity 的取值基本相同，例如 top、bottom、left、right、center 等等。</li>
</ul>
</li>
</ul>
<p><strong>padding 与 margin</strong></p>
<ul>
<li><p><strong>padding(内边距)：</strong></p>
<ul>
<li>使视图的内容与其边界保持一定的距离。</li>
<li>使 TextView 中的文字距离 TextView 的边界 10dp，设置 android:padding&#x3D;”10dp”。</li>
<li>padding 就像是在视图内部加了一圈空白边框，使得内容不会紧贴着视图边界。</li>
</ul>
</li>
<li><p><strong>margin(外边距)：</strong></p>
<ul>
<li>控制视图在布局中的位置，或者让视图之间保持一定的距离。</li>
<li>使两个 Button 之间保持 20dp 的距离，就可以为其中一个 Button 设置 android:layout_marginRight&#x3D;”20dp”，或者为另一个 Button 设置 android:layout_marginLeft&#x3D;”20dp”。</li>
<li><strong>margin 就像是在视图外部加了一圈透明边框，使得视图与其他视图之间保持一定的距离。</strong></li>
</ul>
</li>
</ul>
<p>margin和padding作用对象都是自身，非其他视图</p>
<p><strong>ConstrainLayout</strong></p>
<ul>
<li><p><strong>android:layout_width&#x3D;”0dp”:</strong> 在 ConstraintLayout 中，将视图的宽度设置为 0dp 是一个特殊的用法。它表示该视图的宽度应该 <strong>匹配约束条件</strong>。在这个例子中，Button 的左右两边分别被约束到了 login_container 的左右两边 (app:layout_constraintEnd_toEndOf&#x3D;”@id&#x2F;login_container” 和 app:layout_constraintStart_toStartOf&#x3D;”@id&#x2F;login_container”)，因此 Button 的宽度会扩展到与 login_container 的宽度相同。</p>
</li>
<li><p><strong>app:layout_margin…</strong>: 这是一组专门用于 ConstraintLayout 的 margin 属性，用于设置视图与其约束目标之间的距离。例如：</p>
<ul>
<li>app:layout_marginStart：设置视图与其约束目标的起始边距（取决于布局方向，可能是左边距或右边距）。</li>
<li>app:layout_marginEnd：设置视图与其约束目标的结束边距。</li>
<li>app:layout_marginTop：设置视图与其约束目标的顶部边距。</li>
<li>app:layout_marginBottom：设置视图与其约束目标的底部边距。</li>
</ul>
</li>
</ul>
<p><strong>RecyclerView</strong></p>
<p>onCreateViewHolder触发时机</p>
<ul>
<li><strong>首次加载 RecyclerView 时：</strong> 当 RecyclerView 第一次被加载到屏幕上时，onCreateViewHolder 方法会被调用，用于创建 ViewHolder 实例。此时，RecyclerView 需要根据你的布局文件实例化 ViewHolder，并将它们缓存起来以备后用。</li>
<li><strong>缓存中没有可用的 ViewHolder 时：</strong> 当用户滚动 RecyclerView，需要显示新的 item，而缓存中没有可用的 ViewHolder 时，onCreateViewHolder 会被调用以创建新的 ViewHolder。</li>
</ul>
<p>onBindViewHolder触发时机</p>
<ul>
<li><strong>首次加载 RecyclerView 时：</strong> 在 onCreateViewHolder 创建了 ViewHolder 后，onBindViewHolder 方法会被立即调用，用于将数据绑定到 ViewHolder 上。</li>
<li><strong>用户滚动 RecyclerView，新的 item 需要显示时：</strong> 当用户滚动 RecyclerView，新的 item 进入屏幕时，onBindViewHolder 会被调用，将对应位置的数据绑定到复用的 ViewHolder 上。</li>
<li><strong>调用 notifyDataSetChanged() 等方法刷新 RecyclerView 时：</strong> 当你更新了数据源并调用 notifyDataSetChanged()、notifyItemInserted() 等方法刷新 RecyclerView 时，onBindViewHolder 会被调用，以更新 ViewHolder 的数据。</li>
</ul>
<p><strong>LayoutInflater</strong></p>
<p> LayoutInflater 是与 Context 绑定的，而 Activity 本身就是一个 Context。每个 Activity 都会持有自己唯一的 LayoutInflater 对象，用于加载布局文件。</p>
<p>该 Activity 中所有的 Fragment 和 RecyclerView 所使用的 LayoutInflater 对象为 Activity 对应的 Context LayoutInflater 对象</p>
<p>**ViewBinding 与 ViewHolder **</p>
<p>在启用ViewBinding后，ViewBinding 会为每个 XML 布局文件生成一个绑定类</p>
<p>针对每个xml文件，将使用(xml的驼峰文件名+Bindng)作为java文件名的方式，生成对应的java类</p>
<p>xml对应生成的 ViewBinding 类：</p>
<p><strong>根视图属性 (<code>root</code>)</strong>:</p>
<ul>
<li>每个生成的 ViewBinding 类都有一个 <code>root</code> 属性，表示布局的根视图（通常是最外层的 <code>ViewGroup</code>），通过 <code>getRoot()</code> 获取，为 View 类型。</li>
</ul>
<p><strong>每个视图的属性 (<code>views</code>)</strong> :</p>
<ul>
<li>对于布局中的每个视图，ViewBinding 类会生成一个相应的属性。这些属性的名称是基于视图的 <code>id</code> 自动生成的，格式为 <code>viewId</code>，其中 <code>viewId</code> 是 XML 布局中视图的 <code>android:id</code> 属性。</li>
</ul>
<p><strong><code>inflate</code> 方法</strong>:</p>
<ul>
<li>ViewBinding 类提供静态 <code>inflate</code> 方法，用于将布局文件转换为相应的视图层次结构，并返回 ViewBinding 类的实例。<ul>
<li><code>inflate</code> 方法调用 LayoutInflater 将布局文件转换为对应的 View 层级结构。</li>
<li><code>inflate</code> 方法将 View 实例绑定到 Binding 对象的属性中。</li>
</ul>
</li>
</ul>
<p><strong><code>bind</code> 方法</strong>:</p>
<ul>
<li>ViewBinding 类还提供一个静态 <code>bind</code> 方法，用于将现有的视图（比如已经通过 <code>setContentView()</code> 加载的视图）绑定到 ViewBinding 类上。</li>
</ul>
<p>ViewHolder在创建时，通过 new Viewholder(binding) 创建，实际上是将 binding.root 赋值给了 ViewHolder.itemView</p>
<blockquote>
<p>ViewHolder 像是视图的“控制器”: ViewHolder 对根视图 (itemView) 进行了一次封装，但它更像是 MVC 模式中的 Controller，负责管理视图的生命周期、数据绑定、事件处理等逻辑。</p>
<p>ViewHolder 像是视图的“访问器”: ViewBinding 是对 View 树进行了一次包装，但它更像是提供了 类型安全、便捷 的方式来访问视图。</p>
</blockquote>
<h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><ul>
<li><strong>资源访问:</strong> 获取字符串、颜色、尺寸、图片等资源。</li>
<li><strong>组件启动:</strong> 启动 Activity、Service、BroadcastReceiver 等组件。</li>
<li><strong>系统服务获取:</strong> 获取布局服务 (LayoutInflater)、包管理器 (PackageManager)、通知服务 (NotificationManager) 等系统服务。</li>
<li><strong>文件操作:</strong> 访问设备存储、缓存目录等。</li>
<li><strong>数据库操作:</strong> 使用 SQLite 数据库。</li>
<li><strong>网络操作:</strong> 发送网络请求。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取字符串资源</span></span><br><span class="line"><span class="type">String</span> <span class="variable">appName</span> <span class="operator">=</span> context.getString(R.string.app_name);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取颜色资源</span></span><br><span class="line"><span class="type">int</span> <span class="variable">primaryColor</span> <span class="operator">=</span> context.getColor(R.color.colorPrimary);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动 Activity</span></span><br><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(context, SecondActivity.class);</span><br><span class="line">context.startActivity(intent);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取布局加载器</span></span><br><span class="line"><span class="type">LayoutInflater</span> <span class="variable">inflater</span> <span class="operator">=</span> LayoutInflater.from(context);</span><br><span class="line"><span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> inflater.inflate(R.layout.my_layout, parent, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取包管理器</span></span><br><span class="line"><span class="type">PackageManager</span> <span class="variable">packageManager</span> <span class="operator">=</span> context.getPackageManager();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取通知服务</span></span><br><span class="line"><span class="type">NotificationManager</span> <span class="variable">notificationManager</span> <span class="operator">=</span> </span><br><span class="line">    (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);</span><br></pre></td></tr></table></figure>



<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><h3 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h3><p>为了解决手动内存管理带来的问题而设计的。它们通过引用计数来跟踪有多少个指针指向同一个对象。</p>
<ul>
<li>当你创建一个指向对象的智能指针时，对象的引用计数加 1。</li>
<li>当智能指针超出作用域或被赋值为其他值时，引用计数减 1。</li>
<li>当引用计数变为 0 时，智能指针会自动销毁对象，释放内存。</li>
</ul>
<p><strong>循环引用问题</strong>： 对象A中存在智能指针指向对象B，对象B中存在智能指针指向对象A；</p>
<p>由于智能指针的引用计数始终不为0，对象A和对象B将始终不能被释放。</p>
<p><strong>解决方案</strong>：使用弱引用；对某对象使用弱引用将不增加引用计数。</p>
<h3 id="Java层与Native层"><a href="#Java层与Native层" class="headerlink" title="Java层与Native层"></a>Java层与Native层</h3><p><strong>流程</strong></p>
<p><strong>1. Java 层调用 native 方法：</strong></p>
<ul>
<li>当 Java 代码执行到 native 方法调用时，例如 System.loadLibrary(“mylib”); 或调用某个 native 方法，JVM 会暂停当前 Java 方法的执行。</li>
</ul>
<p><strong>2. 检查方法表：</strong></p>
<ul>
<li>JVM 会先检查该 native 方法是否已经链接到对应的 native 函数。</li>
<li>每个类都有一个方法表（<strong>methodTable</strong>），存储了该类的所有方法信息，包括 native 方法。</li>
<li>如果方法表中已经有该 native 方法的入口地址，说明已经完成链接，可以直接跳转到步骤 6 执行 native 代码。</li>
</ul>
<p><strong>3. 加载动态链接库：</strong></p>
<ul>
<li>如果方法表中没有找到 native 方法的入口地址，说明该 native 方法还没有链接。</li>
<li>JVM 会调用 System.loadLibrary() 方法加载指定的动态链接库 (例如 libmylib.so)。</li>
<li>动态链接库加载后，会被映射到进程的地址空间。</li>
</ul>
<p><strong>4. 查找 JNI_OnLoad 函数：</strong></p>
<ul>
<li>JVM 会在加载的动态链接库中查找名为 JNI_OnLoad 的函数。</li>
<li>这个函数是可选的，如果存在，JVM 会调用它。</li>
<li>JNI_OnLoad 函数可以进行一些初始化工作，例如注册 native 方法。</li>
</ul>
<p><strong>5. 注册 native 方法：</strong></p>
<ul>
<li>如果动态链接库中存在 JNI_OnLoad 函数，并且该函数调用了 RegisterNatives 方法，那么 JVM 会根据 RegisterNatives 提供的参数，将 Java native 方法与动态链接库中的 native 函数进行关联。</li>
<li>JVM 会更新方法表，将 native 方法的入口地址设置为对应的 native 函数地址。</li>
</ul>
<p><strong>6. 执行 native 代码：</strong></p>
<ul>
<li>现在，JVM 已经找到了 native 方法对应的 native 函数地址。</li>
<li>JVM 将控制权转移到 native 函数，并将必要的参数传递给 native 函数。<ul>
<li><strong>参数转换：</strong> Java 和 native 代码使用不同的数据类型，因此 JVM 需要将 Java 参数转换为 native 函数能够理解的数据类型。 例如，将 Java 的 String 类型转换为 C 的 char* 类型。</li>
<li><strong>压入 JNIEnv 指针：</strong> JVM 会将 JNIEnv 指针作为第一个参数压入 native 方法栈。 JNIEnv 指针指向一个线程局部变量，包含了大量的 JNI 函数指针，native 函数可以通过这些函数与 JVM 进行交互。</li>
<li><strong>压入 jclass 或 jobject 引用：</strong> 对于非静态 native 方法，JVM 还会将调用该方法的 Java 对象的引用 (jobject) 压入 native 方法栈。 对于静态 native 方法，则会将该方法所属类的引用 (jclass) 压入 native 方法栈。</li>
</ul>
</li>
<li>native 函数执行完毕后，将结果返回给 JVM。</li>
</ul>
<p><strong>7. 返回 Java 层：</strong></p>
<ul>
<li>JVM 恢复 Java 方法的执行，并使用 native 函数返回的结果继续执行后续的指令。</li>
</ul>
<blockquote>
<p><strong>JNIEnv</strong> 仅用于访问 <strong>JVM 自带的 JNI 函数</strong> </p>
<p><strong>程序员自行加载的 JNI 函数</strong> 通过JVM查类的<strong>methodTable</strong>获取JNI函数入口</p>
<p><strong>so 库中的 native 函数:</strong></p>
<ul>
<li>这些函数是由开发者使用 C&#x2F;C++ 等 native 语言编写的，用于实现特定的功能，例如访问硬件、调用第三方库等。</li>
<li>这些函数需要通过 JNI_OnLoad 和 RegisterNatives 注册到 JVM，才能被 Java 代码调用。</li>
</ul>
<p><strong>JVM 自身实现的 JNI 函数:</strong></p>
<ul>
<li>这些函数是 JVM 内部实现的，用于处理 Java 和 native 代码之间的交互，例如创建 Java 对象、调用 Java 方法、处理异常等等。</li>
<li>这些函数不需要开发者手动注册，它们是 JVM 的一部分，可以直接通过 JNIEnv 指针访问。</li>
</ul>
<p>– NewStringUTF 函数： 这个函数用于创建一个新的 Java 字符串对象，它是 JVM 自身实现的 JNI 函数，你可以在 jni.h 头文件中找到它的声明。<br>– FindClass 函数： 这个函数用于查找指定的 Java 类，它也是 JVM 自身实现的 JNI 函数。<br>– CallObjectMethod 函数： 这个函数用于调用 Java 对象的实例方法，它也是 JVM 自身实现的 JNI 函数。</p>
</blockquote>
<p><strong>Java函数，native函数与JNI函数</strong></p>
<p>native函数</p>
<p>即为标准c&#x2F;c++函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算两个整数的和</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Java函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打印字符串到控制台</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printString</span><span class="params">(String str)</span> &#123;</span><br><span class="line">  System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JNI函数：可供Java语言调用的，非Java语言实现函数（服务于Java的C函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 Java 字符串的长度</span></span><br><span class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_example_MyClass_getStringLength</span><span class="params">(JNIEnv *env, jobject thiz, jstring str)</span> </span>&#123;  <span class="comment">// JNIEXPORT 和 JNICALL 是平台相关的宏定义</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span>* nativeStr = env-&gt;<span class="built_in">GetStringUTFChars</span>(str, <span class="number">0</span>);</span><br><span class="line">  jint len = <span class="built_in">strlen</span>(nativeStr); </span><br><span class="line">  env-&gt;<span class="built_in">ReleaseStringUTFChars</span>(str, nativeStr);</span><br><span class="line">  <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>Java函数调用JNI函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Java 代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyJavaClass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;my_native_lib&quot;</span>); <span class="comment">// 加载 Native 库</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明 native 方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">getSumFromNative</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyJavaClass</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyJavaClass</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> obj.getSumFromNative(<span class="number">5</span>, <span class="number">3</span>); <span class="comment">// 调用 native 方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Sum from Native: &quot;</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JNI 函数 (C++)</span></span><br><span class="line"><span class="function">JNIEXPORT jint JNICALL </span></span><br><span class="line"><span class="function"><span class="title">Java_com_example_MyJavaClass_getSumFromNative</span><span class="params">(JNIEnv *env, jobject thiz, jint a, jint b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 计算 a 和 b 的和</span></span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>native函数调用Java函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JNI 函数 (C++)</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="type">void</span> JNICALL </span></span><br><span class="line"><span class="function"><span class="title">Java_com_example_MyNativeClass_callJavaMethod</span><span class="params">(JNIEnv *env, jobject thiz)</span> </span>&#123;  <span class="comment">// 实际上普通的C函数就可以使用JNIEnv调用java函数，这里写成JNI函数是为了使用Java访问该函数再调用其他的java函数</span></span><br><span class="line">    <span class="comment">// 获取 Java 类</span></span><br><span class="line">    jclass cls = env-&gt;<span class="built_in">GetObjectClass</span>(thiz); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 Java 方法的 ID</span></span><br><span class="line">    jmethodID mid = env-&gt;<span class="built_in">GetMethodID</span>(cls, <span class="string">&quot;printMessage&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)V&quot;</span>); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 Java 字符串</span></span><br><span class="line">    jstring message = env-&gt;<span class="built_in">NewStringUTF</span>(<span class="string">&quot;Hello from Native!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 Java 方法</span></span><br><span class="line">    env-&gt;<span class="built_in">CallVoidMethod</span>(thiz, mid, message); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Java 代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyNativeClass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Message from Native: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>






<h3 id="常见内存泄露情况"><a href="#常见内存泄露情况" class="headerlink" title="常见内存泄露情况"></a>常见内存泄露情况</h3><p><strong>非静态的内部类默认持有外部类的引用</strong></p>
<p>将一个长时间运行的（匿名）内部类对象传递给其他对象，而这些对象的生命周期比外部类更长，就会导致外部类无法被垃圾回收，从而造成内存泄漏。</p>
<p><strong>静态内部类不持有外部类引用！！！</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeakyActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView textView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_leaky);</span><br><span class="line"></span><br><span class="line">        textView = findViewById(R.id.text_view);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟耗时操作</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10000</span>); <span class="comment">// 模拟耗时 10 秒</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 尝试更新 UI，但此时 Activity 可能已经销毁</span></span><br><span class="line">                textView.setText(<span class="string">&quot;更新 UI&quot;</span>); <span class="comment">// 这里会造成内存泄漏</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决方案，使用静态内部类 + 弱引用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">MyHandler</span> <span class="variable">mMyHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyHandler</span>(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyHandler</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> WeakReference&lt;Activity&gt; mReference;</span><br><span class="line"></span><br><span class="line">        MyHandler(Activity reference) &#123;</span><br><span class="line">            mReference = <span class="keyword">new</span> <span class="title class_">WeakReference</span>&lt;&gt;(reference);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">            <span class="type">MainActivity</span> <span class="variable">activity</span> <span class="operator">=</span> (MainActivity) mReference.get();</span><br><span class="line">            <span class="keyword">if</span> (activity != <span class="literal">null</span>) &#123;</span><br><span class="line">                activity.handleMessage(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        mMyHandler.removeCallbacksAndMessages(<span class="literal">null</span>);</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>匿名内部类与匿名函数 (Lambda 表达式)</strong> </p>
<p><strong>匿名内部类</strong></p>
<p><strong>定义：</strong></p>
<ul>
<li>匿名内部类是<strong>没有名字的类定义</strong>，通常在需要使用类的地方直接定义和实例化。</li>
<li>必须继承一个类或实现一个接口。</li>
</ul>
<p><strong>语法：</strong></p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类/接口() &#123;</span><br><span class="line">    <span class="comment">// 类体，可以包含成员变量、方法、构造函数等</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>示例：</strong></p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个实现 Runnable 接口的匿名内部类</span></span><br><span class="line"><span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;匿名内部类执行中...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(runnable).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通类实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyButtonListener</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;按钮被点击了！ (普通类)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JButton</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;点击我&quot;</span>);</span><br><span class="line">        <span class="type">MyButtonListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyButtonListener</span>();</span><br><span class="line">        button.addActionListener(listener); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匿名内部类实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JButton</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;点击我&quot;</span>);</span><br><span class="line">        button.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;按钮被点击了！ (匿名内部类)&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>匿名函数 (Lambda 表达式)</strong></p>
<p><strong>定义：</strong></p>
<ul>
<li>Lambda 表达式是 Java 8 引入的一种<strong>简洁的函数式编程语法</strong>。</li>
<li>可以看作是<strong>匿名函数</strong>，可以直接传递给需要函数式接口作为参数的方法。</li>
</ul>
<p><strong>语法：</strong></p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(参数列表) -&gt; &#123; 函数体 &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>参数列表可以省略类型，如果只有一个参数，括号也可以省略。</li>
<li>如果函数体只有一行代码，花括号也可以省略。</li>
</ul>
<p><strong>示例：</strong></p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 Lambda 表达式创建 Runnable 实例</span></span><br><span class="line"><span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;Lambda 表达式执行中...&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(runnable).start();</span><br></pre></td></tr></table></figure>



</blockquote>
<h3 id="Handler，Looper与MessageQueue"><a href="#Handler，Looper与MessageQueue" class="headerlink" title="Handler，Looper与MessageQueue"></a>Handler，Looper与MessageQueue</h3><p><strong>Message</strong></p>
<img src="/2024/07/28/Android-Learning-Record/image-20240813144056439.png" class="" title="image-20240813144056439">

<ul>
<li>obtain(): 若sPool中存在msg，取出并返回；否则new返回</li>
<li>obtain(h: Handler): 调用obtain()并指定msg的target为Handler</li>
<li>obtain(h: Handler, callback: Runnable): 额外指定callback</li>
</ul>
<p><strong>Looper&amp;MessageQueue</strong></p>
<img src="/2024/07/28/Android-Learning-Record/image-20240813145303945.png" class="" title="image-20240813145303945">

<img src="/2024/07/28/Android-Learning-Record/image-20240813145313326.png" class="" title="image-20240813145313326">

<p>主线程有且只有一个 Looper，它是在应用启动时由系统自动创建并启动的。</p>
<p>子线程默认没有Looper，需要手动创建和启动。</p>
<p>Looper与MessageQueue</p>
<ul>
<li><p>每个 Looper 都会关联一个唯一的 MessageQueue。Looper 对象创建时，会创建一个 MessageQueue 对象。</p>
</li>
<li><p>MessageQueue 就像一个消息容器，负责存储消息。当我们使用 Handler 发送消息时，消息并不会直接被处理，而是会被添加到 Looper 关联的 MessageQueue 中。</p>
</li>
<li><p>Looper 通过一个无限循环不断地从 MessageQueue 中读取消息。当 Looper 发现 MessageQueue 中没有消息可处理时，就会判断是否有 IdleHandler 需要执行；若没有， Looper 就会进入休眠状态，等待新的消息到来。</p>
</li>
<li><p>当 Looper 从 MessageQueue 中读取到消息后，会根据消息的 target 属性（即发送消息时使用的 Handler 对象），将消息分发给对应的 Handler 进行处理。</p>
</li>
</ul>
<p><strong>一个线程最多一个Looper！！！</strong></p>
<blockquote>
<p>如何保证一个线程最多一个Looper？</p>
<p>ThreadLocal是一个线程内部的数据存储类，当某个线程调用prepare方法的时候，会首先通过ThreadLocal检查这个线程是否已经创建了Looper,如果还没创建，则实例化Looper并将实例化后的Looper保存到ThreadLocal中，而如果ThreadLocal中已经保存了Looper，则会抛出一个RuntimeException的异常。那么意味着在一个线程中最多只能调用一次prepare方法，这样就保证了Looper的唯一性。</p>
</blockquote>
<p><strong>Handler</strong></p>
<img src="/2024/07/28/Android-Learning-Record/image-20240813144733590.png" class="" title="image-20240813144733590">

<p>Handler不会被默认创建，需手动创建</p>
<p><strong>多个 Handler 可绑定同一个 Looper</strong>，在创建 Handler 时，若未指定 Looper，则默认绑定当前线程的 Looper</p>
<p>使用 Handler 对象的 send 或 post 方法，向 Handler 对象绑定的 Looper 对应的 MessageQueue 发送Msg。<strong>若发送的为runnable，handler会将其封装为Message。</strong></p>
<p>Looper.loop() 方法不断从 MessageQueue 中取出消息。</p>
<p>Looper 取出消息后，会根据 Message.target 属性找到当初发送该消息的 Handler。</p>
<p><strong>Handler 处理消息:</strong> Handler 接收到 Looper 派发的消息后，执行以下逻辑：</p>
<ul>
<li><p>检查 Message 是否携带 Callback，若有则调用 Callback.run() 处理消息。</p>
</li>
<li><p>若 Message 没有 Callback，则检查自身是否设置了默认的 mCallback，若有则调用 mCallback.handleMessage() 处理消息。</p>
</li>
<li><p>若以上两种 Callback 都没有，则调用自身 handleMessage() 方法处理消息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatchMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">    <span class="comment">// msg.callback.run() msg处理次序1</span></span><br><span class="line">    <span class="keyword">if</span> (msg.callback != <span class="literal">null</span>) &#123;</span><br><span class="line">        handleCallback(msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mCallback != <span class="literal">null</span>) &#123;  <span class="comment">// msg处理次序2</span></span><br><span class="line">            <span class="comment">// mCallback.handleMessage(msg)</span></span><br><span class="line">            <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// msg处理次序3</span></span><br><span class="line">        handleMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleCallback</span><span class="params">(Message message)</span> &#123;</span><br><span class="line">    message.callback.run();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Callback</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>注意1：进行Msg处理（调用 handleMessage 方法）的是Handler所绑定的Looper所在的线程，即消息发送到哪个消息队列，该队列所在线程就进行消息处理</strong></p>
<p><strong>注意2：主线程的大部分时间都在 Looper 的循环中度过，所有的操作，包括生命周期方法调用、UI 更新、事件处理等，都是作为消息被 Looper 依次处理的，每个消息的处理都是短暂的。一个消息处理完毕后，Looper 立即处理下一个消息或等待新消息。</strong></p>
<p>在通常情况下，主线程创建 Handler 对象并绑定mainLooper，子线程使用该 Handler 对象发送信息到主线程的MessageQueue ，当 Looper 从 MessageQueue 中读取到消息后，调用发送该 Msg 的 Handler handleMessage 方法处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Handler networkHandler;</span><br><span class="line">    <span class="keyword">private</span> Handler uiHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建处理网络请求的 Handler</span></span><br><span class="line">        networkHandler = <span class="keyword">new</span> <span class="title class_">Handler</span>(Looper.getMainLooper()) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(<span class="meta">@NonNull</span> Message msg)</span> &#123;</span><br><span class="line">                <span class="comment">// 处理网络请求结果</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> (String) msg.obj;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;网络请求结果: &quot;</span> + result, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建处理用户输入事件的 Handler</span></span><br><span class="line">        uiHandler = <span class="keyword">new</span> <span class="title class_">Handler</span>(Looper.getMainLooper()) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(<span class="meta">@NonNull</span> Message msg)</span> &#123;</span><br><span class="line">                <span class="comment">// 处理用户输入事件</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> (String) msg.obj;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;用户输入: &quot;</span> + input, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟网络请求</span></span><br><span class="line">        simulateNetworkRequest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟用户输入事件</span></span><br><span class="line">        simulateUserInput();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">simulateNetworkRequest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发送网络请求结果</span></span><br><span class="line">            <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> Message.obtain();</span><br><span class="line">            message.obj = <span class="string">&quot;成功!&quot;</span>;</span><br><span class="line">            networkHandler.sendMessage(message);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">simulateUserInput</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 发送用户输入事件</span></span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> Message.obtain();</span><br><span class="line">        message.obj = <span class="string">&quot;Hello!&quot;</span>;</span><br><span class="line">        uiHandler.sendMessageDelayed(message, <span class="number">3000</span>); <span class="comment">// 延迟 3 秒发送</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>runOnUiThread()</p>
<p>Android 应用中的 UI 元素（例如按钮、文本框、图片等）都是运行在主线程中，这个主线程也被称为 UI 线程。如果在后台线程（非 UI 线程）中执行耗时操作（例如网络请求、文件读写），操作完成后如果需要更新 UI，就不能直接在后台线程中进行。这是因为 Android 规定只能在 UI 线程中更新 UI 元素。</p>
<p>runOnUiThread() 方法的作用是将一段代码逻辑放入 UI 线程的消息队列中，等待 UI 线程空闲时执行。这样就保证了更新 UI 的操作一定会在 UI 线程中进行，避免了线程安全问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">runOnUiThread(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        Toast.makeText(getApplicationContext(), <span class="string">&quot;This is a Toast message&quot;</span>, Toast.LENGTH_SHORT).show();  <span class="comment">// Toast必须放在Ui线程执行哦</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


</blockquote>
<p><strong>IdleHandler</strong></p>
<p><strong>消息队列中有消息</strong>: Looper 会取出消息并分发给对应的 Handler 处理。</p>
<p><strong>消息队列为空</strong>: Looper 会检查是否有 IdleHandler 需要执行。如果有，就依次执行 IdleHandler 的 queueIdle() 方法；如果没有，Looper 就会进入休眠状态，等待新的消息到来。</p>
<p>queueIdle() 方法的返回值是一个boolean值，返回true会将IdleHandler保留，否则会将其移除。重写Idle的 queueIdle 方法实现在消息队列为空时进行的任务。</p>
<p>在MessageQueue中维护了一个IdleHandler集合<code>mIdleHandlers</code>，并且提供了添加IdleHandler和移除IdleHandler的方法。可以通过 <code>Looper.myQueue().addIdleHandler(new Idler())</code> 添加一个IdleHandler。</p>
<p><strong>HandlerThread</strong></p>
<p>自带 Looper 的线程，启动后会自动创建并运行 Looper 的消息循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.graphics.Bitmap;</span><br><span class="line"><span class="keyword">import</span> android.graphics.BitmapFactory;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.os.HandlerThread;</span><br><span class="line"><span class="keyword">import</span> android.os.Message;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;MainActivity&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HandlerThread mCompressThread;</span><br><span class="line">    <span class="keyword">private</span> Handler mCompressHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 HandlerThread</span></span><br><span class="line">        mCompressThread = <span class="keyword">new</span> <span class="title class_">HandlerThread</span>(<span class="string">&quot;CompressThread&quot;</span>);</span><br><span class="line">        mCompressThread.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 Handler，绑定到 HandlerThread 的 Looper</span></span><br><span class="line">        mCompressHandler = <span class="keyword">new</span> <span class="title class_">Handler</span>(mCompressThread.getLooper()) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(<span class="meta">@NonNull</span> Message msg)</span> &#123;</span><br><span class="line">                <span class="comment">// 模拟图片压缩操作</span></span><br><span class="line">                <span class="type">Bitmap</span> <span class="variable">bitmap</span> <span class="operator">=</span> (Bitmap) msg.obj;</span><br><span class="line">                compressImage(bitmap);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 任务完成，计数器减一</span></span><br><span class="line">                ((CountDownLatch) msg.getData().getParcelable(<span class="string">&quot;latch&quot;</span>)).countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟添加多个图片压缩任务</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">imageCount</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(imageCount);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; imageCount; i++) &#123;</span><br><span class="line">            <span class="type">Bitmap</span> <span class="variable">bitmap</span> <span class="operator">=</span> BitmapFactory.decodeResource(getResources(), R.drawable.ic_launcher_background);</span><br><span class="line">            addTaskToQueue(bitmap, latch);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待所有任务完成</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            latch.await();</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;所有图片压缩任务已完成&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加压缩任务到消息队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addTaskToQueue</span><span class="params">(Bitmap bitmap, CountDownLatch latch)</span> &#123;</span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> Message.obtain();</span><br><span class="line">        message.obj = bitmap;</span><br><span class="line">        <span class="type">Bundle</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bundle</span>();</span><br><span class="line">        data.putParcelable(<span class="string">&quot;latch&quot;</span>, latch);</span><br><span class="line">        message.setData(data);</span><br><span class="line">        mCompressHandler.sendMessage(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟图片压缩操作</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">compressImage</span><span class="params">(Bitmap bitmap)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            bitmap.compress(Bitmap.CompressFormat.JPEG, <span class="number">80</span>, baos);</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>); <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            Log.d(TAG, <span class="string">&quot;图片压缩完成，线程：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        <span class="comment">// 退出 HandlerThread</span></span><br><span class="line">        mCompressThread.quitSafely();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="进程间交互"><a href="#进程间交互" class="headerlink" title="进程间交互"></a>进程间交互</h3><p>平时我们所熟知的前端（Web\Android\iOS）通过网络与服务器通信是客户端-服务端模式的体现，而在Android Framework中，四大组件的创建、生命周期也是通过这样的模式进行通信：</p>
<ul>
<li>服务器端(server)指的就是SystemServer进程，这个进程提供了很多服务，比如AMS、PMS、WMS等等，所有的APP进程都可以与其通信。</li>
<li>客户端(client)指的就是各个独立的APP进程。</li>
</ul>
<p>Android开发中，我们可以通过Package包名和Activity类名，来打开一个APP。实际上，项目里的业务代码startActivity()方法并不是直接创建进程、拉起APP的。而是通过一系列的调用，把请求传递给SystemServer的AMS。AMS收到来自客户端的请求后，再通知zygote进程来fork一个新进程，来开启我们的目标APP。APP中所有Activity的生命周期过程，都由AMS（SystemServer进程）统一调度，并在APP自身进程中具体完成。</p>
<p>这个过程涉及到3个进程：APP进程、SystemServer进程、Zygote进程。</p>
<ul>
<li>APP进程与SystemServer进程通过Binder机制，进行跨进程通信。</li>
<li>SystemServer进程与Zygote进程通过Socket，进行跨进程通信。</li>
</ul>
<img src="/2024/07/28/Android-Learning-Record/image-20240723153011448-1722133358773.png" class="" title="image-20240723153011448">



<h4 id="AIDL与Binder"><a href="#AIDL与Binder" class="headerlink" title="AIDL与Binder"></a>AIDL与Binder</h4><p><strong>Android Interface Definition Language</strong></p>
<p>仅当需要在<strong>不同应用间通过 IPC 方式访问服务（在服务中进行多线程处理）时</strong>才有必要使用 AIDL。若<strong>无需跨越不同应用，同应用内执行并发 IPC，则应通过实现 Binder</strong> 来创建接口；又或者<strong>只想执行 IPC，但不需要处理多线程时使用 Messenger</strong> 来实现接口。</p>
<p>server进程与client进程交互</p>
<p><strong>普通方式</strong></p>
<p>server进程：</p>
<p>继承Service，实现onBinder并返回Binder对象；</p>
<p>需在该Binder对象中实现onTransact(…)和服务方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GradeService</span> <span class="keyword">extends</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> REQUEST_CODE=<span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Binder</span> <span class="variable">mBinder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Binder</span>() &#123;</span><br><span class="line">        <span class="comment">// 透过匿名内部类方式继承Binder并实现服务方法，该方式存在内存泄露</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">onTransact</span><span class="params">(<span class="type">int</span> code, <span class="meta">@NonNull</span> Parcel data, <span class="meta">@Nullable</span> Parcel reply, <span class="type">int</span> flags)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            <span class="keyword">if</span> (code == REQUEST_CODE) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> data.readString();</span><br><span class="line">                <span class="comment">// 根据姓名查询学生成绩并将成绩写入到返回数据</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">studentGrade</span> <span class="operator">=</span> getStudentGrade(name);</span><br><span class="line">                <span class="keyword">if</span> (reply != <span class="literal">null</span>)</span><br><span class="line">                    reply.writeInt(studentGrade);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.onTransact(code, data, reply, flags);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 服务方法：根据姓名查询学生成绩</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getStudentGrade</span><span class="params">(String name)</span> &#123;         </span><br><span class="line">            <span class="keyword">return</span> StudentMap.getStudentGrade(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IBinder <span class="title function_">onBind</span><span class="params">(Intent intent)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mBinder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>client进程：</p>
<p>通过bindService(intent, mServiceConnection, xxx)绑定服务，</p>
<p>mServiceConnection对象中实现onServiceConnected和onServiceDisconnected方法，方法中获得server进程返回的Binder对象</p>
<p>调用Binder对象的onTransact方法得到结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinderActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="comment">// 远程服务的Binder代理</span></span><br><span class="line">    <span class="keyword">private</span> IBinder mRemoteBinder;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ServiceConnection</span> <span class="variable">mServiceConnection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServiceConnection</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> &#123;</span><br><span class="line">            <span class="comment">// 获取远程服务的Binder代理</span></span><br><span class="line">            mRemoteBinder = iBinder;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> &#123;</span><br><span class="line">            mRemoteBinder = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_binder);</span><br><span class="line">        <span class="comment">// 绑定服务</span></span><br><span class="line">        findViewById(R.id.btn_bind_service).setOnClickListener(view -&gt; bindGradeService());</span><br><span class="line">        <span class="comment">// 查询学生成绩</span></span><br><span class="line">        findViewById(R.id.btn_find_grade).setOnClickListener(view -&gt; getStudentGrade(<span class="string">&quot;Anna&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 绑定远程服务</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">bindGradeService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">action</span> <span class="operator">=</span> <span class="string">&quot;android.intent.action.server.gradeservice&quot;</span>;</span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(action);</span><br><span class="line">        intent.setPackage(getPackageName());</span><br><span class="line">        bindService(intent, mServiceConnection, BIND_AUTO_CREATE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从远程服务查询学生成绩</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getStudentGrade</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="type">Parcel</span> <span class="variable">data</span> <span class="operator">=</span> Parcel.obtain();</span><br><span class="line">        <span class="type">Parcel</span> <span class="variable">reply</span> <span class="operator">=</span> Parcel.obtain();</span><br><span class="line">        <span class="type">int</span> <span class="variable">grade</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        data.writeString(name);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mRemoteBinder == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Need Bind Remote Server...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            mRemoteBinder.transact(REQUEST_CODE, data, reply, <span class="number">0</span>);</span><br><span class="line">            grade = reply.readInt();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> grade;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用ServiceConnection对象的原因</p>
<ul>
<li>绑定服务是一个异步操作，服务进程的连接和启动都需要时间。</li>
<li>如果客户端进程同步等待服务连接，可能会导致 UI 线程阻塞，造成 ANR (Application Not Responding)。</li>
<li><code>ServiceConnection</code>  提供了一种异步回调机制，当服务连接成功或断开时，系统会自动回调 <code>ServiceConnection</code>  中的 <code>onServiceConnected()</code>  和 <code>onServiceDisconnected()</code>  方法，通知客户端进程。默认情况下，bindService() 方法是在主线程中调用的，因此 ServiceConnection 的回调方法也会在主线程中执行。</li>
<li>这样，客户端进程就可以在 <code>onServiceConnected()</code>  方法中获取到服务的代理对象，并在 <code>onServiceDisconnected()</code>  方法中处理服务断开的情况，而无需阻塞等待。</li>
</ul>
<p>客户端调用Binder对象的transact方法中转</p>
<ul>
<li>客户端调用的是 Binder 代理对象（客户端内的binder对象）的 transact()。这个方法会将请求发送给 Binder 驱动。</li>
<li>Binder 驱动收到请求后，会找到对应的服务端 Binder 对象，并在服务端进程调用 <strong>服务端 Binder 对象</strong> 的 onTransact() 方法。</li>
</ul>
<p><strong>xxxbinder.transact() 方法是一个同步方法，这意味着在默认情况下，客户端进程会在调用 transact() 方法后阻塞，直到服务端进程完成请求并返回结果。</strong></p>
</blockquote>
<p><strong>代理模式</strong></p>
<p>server进程：</p>
<p>引入服务方法端口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IGradeInterface</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">getStudentGrade</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>引入xxxBinder继承一般Binder类并实现服务端口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GradeBinder</span> <span class="keyword">extends</span> <span class="title class_">Binder</span> <span class="keyword">implements</span> <span class="title class_">IGradeInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getStudentGrade</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> StudentMap.getStudentGrade(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">onTransact</span><span class="params">(<span class="type">int</span> code, <span class="meta">@NonNull</span> Parcel data, <span class="meta">@Nullable</span> Parcel reply, <span class="type">int</span> flags)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="keyword">if</span> (code == REQUEST_CODE) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> data.readString();</span><br><span class="line">            <span class="type">int</span> <span class="variable">studentGrade</span> <span class="operator">=</span> getStudentGrade(name);</span><br><span class="line">            <span class="keyword">if</span> (reply != <span class="literal">null</span>)</span><br><span class="line">                reply.writeInt(studentGrade);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.onTransact(code, data, reply, flags);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务端继承Service，实现onBinder并返回xxxBinder对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GradeService</span> <span class="keyword">extends</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> REQUEST_CODE=<span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Binder</span> <span class="variable">mBinder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GradeBinder</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IBinder <span class="title function_">onBind</span><span class="params">(Intent intent)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mBinder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>client进程：</p>
<p>引入服务方法端口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IGradeInterface</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">getStudentGrade</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现服务接口得到代理Binder类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinderProxy</span> <span class="keyword">implements</span> <span class="title class_">IGradeInterface</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IBinder mBinder;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">BinderProxy</span><span class="params">(IBinder binder)</span> &#123;</span><br><span class="line">        mBinder = binder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">// 通过Binder查询成绩</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getStudentGrade</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="type">Parcel</span> <span class="variable">data</span> <span class="operator">=</span> Parcel.obtain();</span><br><span class="line">        <span class="type">Parcel</span> <span class="variable">reply</span> <span class="operator">=</span> Parcel.obtain();</span><br><span class="line">        <span class="type">int</span> <span class="variable">grade</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        data.writeString(name);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mBinder == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Need Bind Remote Server...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            mBinder.transact(REQUEST_CODE, data, reply, <span class="number">0</span>);</span><br><span class="line">            grade = reply.readInt();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> grade;</span><br><span class="line">    &#125;</span><br><span class="line">		</span><br><span class="line">    <span class="comment">// 实例化Binder代理类的对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IGradeInterface <span class="title function_">asInterface</span><span class="params">(IBinder iBinder)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (iBinder == <span class="literal">null</span>) &#123;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 始终返回 BinderProxy 对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BinderProxy</span>(iBinder); </span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主activity中通过ServiceConnection对象的onServiceConnected方法从服务端得到返回的Binder对象，转成代理类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ServiceConnection</span> <span class="variable">mServiceConnection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServiceConnection</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> &#123;</span><br><span class="line">      	<span class="comment">// 连接服务成功，根据是否跨进程获取BinderProxy或者GradeBinder实例</span></span><br><span class="line">        mBinderProxy = BinderProxy.asInterface(iBinder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> &#123;</span><br><span class="line">        mBinderProxy = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>关于 onTransact()&#x2F;transact(…) 方法：</strong> </p>
<ul>
<li>虽然客户端代码中没有直接调用 transact(…) 方法，但实际上，客户端的BinderProxy 的 getStudentGrade() 方法内部会调用 mBinder.transact(…)，最终还是会走到服务端的 onTransact() 方法。</li>
<li>代理模式只是隐藏了底层的通信细节，让客户端代码看起来像是在调用本地方法一样，但实际上跨进程通信仍然是通过 transact() 和 onTransact() 方法来完成的。</li>
</ul>
</blockquote>
<p><strong>AIDL</strong></p>
<blockquote>
<p>类似于代理模式，AIDL 会自动生成类似于所写的 <code>IGradeInterface</code>、服务端<code>GradeBinder</code>、客户端<code>BinderProxy</code>  这样的代码结构，从而简化了 Binder 通信的开发。</p>
</blockquote>
<p>server进程：</p>
<p>创建AIDL文件，将暴露给客户端的<strong>接口在这个AIDL文件中声明</strong>，</p>
<ul>
<li>在服务端项目的 src&#x2F;main 目录下创建一个名为 aidl 的文件夹（如果还没有的话）。</li>
<li>在 aidl 文件夹内创建一个与你的包名相同的文件夹，例如 com&#x2F;example&#x2F;gradeservice。</li>
<li>在该包名文件夹下创建一个名为 IGradeService.aidl 的文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IGradeService.aidl</span></span><br><span class="line"><span class="keyword">package</span> com.example.gradeservice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IGradeService</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">getStudentGrade</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Service中实现这个AIDL接口并创建<strong>Service用来监听客户端的连接请求</strong>。</p>
<ul>
<li>Rebuild 项目。Android Studio 会自动根据 AIDL 文件生成对应的 Java 接口文件（IGradeService.java）。</li>
<li>创建一个名为 GradeService 的 Service 类，并实现 IGradeService.Stub 抽象类。</li>
<li>在 GradeService 中实现 getStudentGrade() 方法，提供具体的业务逻辑。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GradeService.java</span></span><br><span class="line"><span class="keyword">package</span> com.example.gradeservice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Service;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.IBinder;</span><br><span class="line"><span class="keyword">import</span> android.os.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GradeService</span> <span class="keyword">extends</span> <span class="title class_">Service</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IGradeService.<span class="type">Stub</span> <span class="variable">mBinder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IGradeService</span>.Stub() &#123; <span class="comment">// 实现接口IGradeService的binder类</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getStudentGrade</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            <span class="keyword">return</span> StudentMap.getStudentGrade(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IBinder <span class="title function_">onBind</span><span class="params">(Intent intent)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mBinder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>client进程：</p>
<p>引入AIDL</p>
<ul>
<li>将服务端的 IGradeService.aidl 文件 <strong>原封不动地</strong> 复制到客户端项目的 src&#x2F;main&#x2F;aidl&#x2F;com&#x2F;example&#x2F;gradeservice&#x2F; 目录下。</li>
</ul>
<p><strong>绑定服务端的Service</strong>，绑定成功后，将<strong>服务端返回的Binder对象转成AIDL接口所属的类型</strong>，调用AIDL接口中的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.gradeservice.IGradeService;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MainActivity.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">BaseViewBindingActivity</span>&lt;ActivityBinderBinding&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IGradeService mBinderProxy;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ServiceConnection</span> <span class="variable">mServiceConnection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServiceConnection</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> &#123;</span><br><span class="line">          	<span class="comment">// 透过服务端返回的binder对象转换为代理binder对象</span></span><br><span class="line">            mBinderProxy = IGradeService.Stub.asInterface(iBinder);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> &#123;</span><br><span class="line">            mBinderProxy = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        binding.btnBindService.setOnClickListener(view -&gt; bindGradeService());</span><br><span class="line">      	<span class="comment">// 查询学生成绩</span></span><br><span class="line">        binding.btnFindGrade.setOnClickListener(view -&gt; getStudentGrade(<span class="string">&quot;Anna&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">// 绑定服务</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">bindGradeService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">action</span> <span class="operator">=</span> <span class="string">&quot;android.intent.action.server.aidl.gradeservice&quot;</span>;</span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(action);</span><br><span class="line">        intent.setPackage(getPackageName());</span><br><span class="line">        bindService(intent, mServiceConnection, BIND_AUTO_CREATE);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">		<span class="comment">// 查询成绩</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getStudentGrade</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">grade</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            grade = mBinderProxy.getStudentGrade(name);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        ToastUtils.showShort(<span class="string">&quot;Anna grade is &quot;</span> + grade);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="Binder实现"><a href="#Binder实现" class="headerlink" title="Binder实现"></a>Binder实现</h4><p><a href="https://www.cnblogs.com/samchen2009/p/3316001.html">https://www.cnblogs.com/samchen2009/p/3316001.html</a></p>
<p><a href="https://sharrychoo.github.io/blog/android-source/dc-binder1">https://sharrychoo.github.io/blog/android-source/dc-binder1</a></p>
<p>进程使用Binder与System_Server通信，例如：AlarmManagerService、BluetoothService 和 BatteryService，</p>
<p><strong>Binder结构</strong></p>
<p><strong>device_node</strong>: Binder设备节点。</p>
<p><strong>global_state</strong>: 全局状态信息，包括上下文管理器、进程计数、线程计数等。</p>
<p><strong>binder_procs</strong>: 使用Binder的进程列表，每个<strong>binder_proc</strong>包含：</p>
<ul>
<li>nodes: 红黑树，用于存储该进程创建的所有 Binder 对象。<ul>
<li><strong>Binder 对象:</strong> 提供特定功能的接口，例如 MediaPlayerService、ActivityManagerService 等系统服务。进程每提供一种服务就有一个binder对象。</li>
</ul>
</li>
<li>refs: 记录其他进程对该进程中 Binder 对象的引用。<ul>
<li><strong>Binder 引用对象:</strong> 代表对一个 Binder 对象的引用，可以在进程间传递，例如客户端进程持有的服务端 Binder 对象的引用。</li>
</ul>
</li>
<li>buffers: 管理 Binder 通信过程中使用到的内存缓冲区。</li>
<li>binder_thread: binder_thread 结构体指针数组，存储了该进程所有 Binder 线程的信息。</li>
</ul>
<img src="/2024/07/28/Android-Learning-Record/image-20240806112818621.png" class="" title="image-20240806112818621">



<p><strong>Binder源码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> &#123;</span></span><br><span class="line">	<span class="comment">// 用于将该 binder_proc 结构体插入到一个哈希链表中。该哈希链表存储了系统中所有的 binder_proc 结构体，方便查找。</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> <span class="title">proc_node</span>;</span></span><br><span class="line">	<span class="comment">// 红黑树的根节点。该红黑树存储了该进程中所有的 binder_thread 结构体</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span> <span class="title">threads</span>;</span></span><br><span class="line">	<span class="comment">// 红黑树的根节点。该红黑树存储了该进程中所有的 binder_node 结构体，用于管理 Binder 实体</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span> <span class="title">nodes</span>;</span></span><br><span class="line">	......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 驱动函数映射。定义了 Binder 驱动的文件操作函数集。每个成员都是一个函数指针，指向处理特定文件操作的函数。</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">binder_fops</span> =</span> &#123;</span><br><span class="line">	.owner = THIS_MODULE,</span><br><span class="line">	.poll = binder_poll,</span><br><span class="line">	.unlocked_ioctl = binder_ioctl,</span><br><span class="line">	.compat_ioctl = binder_ioctl,</span><br><span class="line">	.mmap = binder_mmap,</span><br><span class="line">	.open = binder_open,</span><br><span class="line">	.flush = binder_flush,</span><br><span class="line">	.release = binder_release,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册驱动参数结构体</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">miscdevice</span> <span class="title">binder_miscdev</span> =</span> &#123;</span><br><span class="line">	.minor = MISC_DYNAMIC_MINOR,</span><br><span class="line">    <span class="comment">// 驱动名称</span></span><br><span class="line">	.name = <span class="string">&quot;binder&quot;</span>,</span><br><span class="line">	.fops = &amp;binder_fops</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// binder_open : 处理 open 系统调用的函数，用于打开 Binder 设备文件。</span></span><br><span class="line"><span class="comment">// binder_mmap: 处理 mmap 系统调用的函数，用于将 Binder 驱动的内存映射到用户空间。</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">binder_open</span><span class="params">(<span class="keyword">struct</span> inode *nodp, <span class="keyword">struct</span> file *filp)</span>&#123;......&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">binder_mmap</span><span class="params">(<span class="keyword">struct</span> file *filp, <span class="keyword">struct</span> vm_area_struct *vma)</span>&#123;......&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">binder_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="comment">// 创建名为binder的单线程的工作队列</span></span><br><span class="line">    binder_deferred_workqueue = create_singlethread_workqueue(<span class="string">&quot;binder&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!binder_deferred_workqueue)</span><br><span class="line">            <span class="keyword">return</span> -ENOMEM;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">// 注册驱动，misc设备其实也就是特殊的字符设备</span></span><br><span class="line">    ret = misc_register(&amp;binder_miscdev);</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 驱动注册函数</span></span><br><span class="line">device_initcall(binder_init);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>







<p><strong>Binder 通信流程:</strong></p>
<p><strong>Main_MediaServer.cpp</strong></p>
<p>Server获得ProcessState实例，使用该实例创建线程池 </p>
<p>Server调用<code>defaultServiceManager()</code>获得 IServiceManager，即BpBinder，对应ServiceManager的客户端Binder</p>
<p><strong>ProcessState.cpp</strong></p>
<p>ProcessState的构造函数初始化</p>
<img src="/2024/07/28/Android-Learning-Record/image-20240806155020313.png" class="" title="image-20240806155020313">

<img src="/2024/07/28/Android-Learning-Record/image-20240806155033149.png" class="" title="image-20240806155033149">

<p><code>open_driver()</code>函数打开了设备 <code>/dev/binder</code> ，并设置该进程在Binder中的线程池</p>
<blockquote>
<p>每个使用Binder的进程都在Binder驱动中有自己的线程池，该线程用于信息的处理</p>
</blockquote>
<p>然后，调用<code>mmap(...)</code>创建内存映射，即为下图中的Server进程中操作</p>
<img src="/2024/07/28/Android-Learning-Record/image-20240805194744173.png" class="" title="image-20240805194744173">

<p><strong>IServiceManager.cpp</strong></p>
<p>返回BpBinder(handler)，即 IServiceManager</p>
<h4 id="Message跨进程通信"><a href="#Message跨进程通信" class="headerlink" title="Message跨进程通信"></a>Message跨进程通信</h4><h4 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h4><img src="/2024/07/28/Android-Learning-Record/image-20240721155920403-1722133033018.png" class="" title="image-20240721155920403">





<h3 id="View与事件分发机制"><a href="#View与事件分发机制" class="headerlink" title="View与事件分发机制"></a>View与事件分发机制</h3><p><strong>坐标系</strong></p>
<p><strong>屏幕坐标系</strong>： Raw 以屏幕左上角作为坐标原点，水平向右方向为 X 轴正轴方向，竖直向下方向为 Y 轴正轴方向。</p>
<p><strong>View 坐标系</strong>： 默认 以 View 所在的 ViewGroup 的左上角作为坐标原点，水平向右方向为 X 轴正轴方向，竖直向下方向为 Y 轴正轴方向。View 类包含了以下几个方法用于获取其相对父容器 ViewGroup 的距离：</p>
<ul>
<li>getLeft()。View 左侧到 ViewGroup 左侧之间的距离</li>
<li>getTop()。View 顶部到 ViewGroup 顶部之间的距离</li>
<li>getRight()。View 右侧到 ViewGroup 左侧之间的距离</li>
<li>getBottom()。View 底部到 ViewGroup 顶部之间的距离</li>
</ul>
<p>参考链接：<a href="https://juejin.cn/post/6931914294980411406">https://juejin.cn/post/6931914294980411406</a></p>
<p><strong>事件序列</strong></p>
<p>一个触摸事件序列，指的是从手指触摸屏幕开始，到手指离开屏幕结束，期间产生的一系列事件。</p>
<p>这个序列包含如下三个阶段：</p>
<ol>
<li><strong>按下（ACTION_DOWN）：</strong> 手指触碰屏幕的瞬间触发。</li>
<li><strong>移动（ACTION_MOVE）：</strong> 手指在屏幕上滑动时，会多次触发该事件。</li>
<li><strong>抬起（ACTION_UP）：</strong> 手指离开屏幕的瞬间触发。</li>
</ol>
<p><strong>Mutil View</strong></p>
<p><strong>View</strong> </p>
<p>Android 界面中所有可视化元素的基类，代表一个矩形区域，负责自身内容的绘制、事件处理以及布局等。<strong>常见子类：</strong> TextView、Button、ImageView、EditText 等。</p>
<ul>
<li><p>DispatchTouchEvent</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> &#123;</span><br><span class="line">    ···</span><br><span class="line">    <span class="comment">//用于表示当前 View 是否消费了该事件</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">actionMasked</span> <span class="operator">=</span> event.getActionMasked();</span><br><span class="line">    ···</span><br><span class="line">    <span class="keyword">if</span> (onFilterTouchEventForSecurity(event)) &#123;</span><br><span class="line">        <span class="comment">//View启用&amp;&amp;handleScrollBarDragging返回true</span></span><br><span class="line">        <span class="keyword">if</span> ((mViewFlags &amp; ENABLED_MASK) == ENABLED &amp;&amp; handleScrollBarDragging(event)) &#123;</span><br><span class="line">            result = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//存在OnTouchListener&amp;&amp;View启用&amp;&amp;OnTouchListener返回true</span></span><br><span class="line">        <span class="comment">//OnTouchListener优先级高于onClickListener！！</span></span><br><span class="line">        <span class="type">ListenerInfo</span> <span class="variable">li</span> <span class="operator">=</span> mListenerInfo;</span><br><span class="line">        <span class="keyword">if</span> (li != <span class="literal">null</span> &amp;&amp; li.mOnTouchListener != <span class="literal">null</span></span><br><span class="line">            &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED</span><br><span class="line">            &amp;&amp; li.mOnTouchListener.onTouch(<span class="built_in">this</span>, event)) &#123;</span><br><span class="line">           result = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//result仍为false&amp;&amp;自身onTouchEvent消费动作事件</span></span><br><span class="line">        <span class="comment">// onClickListener在onTouchEvent方法中被调用的</span></span><br><span class="line">        <span class="keyword">if</span> (!result &amp;&amp; onTouchEvent(event)) &#123;</span><br><span class="line">            result = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    ···</span><br><span class="line">     <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>OntouchEvent</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouchEvent</span><span class="params">(MotionEvent event)</span> &#123;</span><br><span class="line">    ···</span><br><span class="line">    <span class="comment">// 事件可点击判断</span></span><br><span class="line">    <span class="comment">// CLICKABLE、LONG_CLICKABLE、CONTEXT_CLICKABLE对应着：可点击、可长按点击、可上下文点击</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">clickable</span> <span class="operator">=</span> ((viewFlags &amp; CLICKABLE) == CLICKABLE</span><br><span class="line">          || (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE)</span><br><span class="line">          || (viewFlags &amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((viewFlags &amp; ENABLED_MASK) == DISABLED) &#123;</span><br><span class="line">        ···</span><br><span class="line">        <span class="comment">// 如果当前 View 处于禁用状态 DISABLED 的话，当前 View 是否会消耗触摸事件都由 clickable 来决定，</span></span><br><span class="line">        <span class="keyword">return</span> clickable;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// TouchDelegate 可以用于改变 View 的触摸区域，例如将一个较小的 View 的触摸区域扩大。</span></span><br><span class="line">    <span class="comment">// 如果设置了 TouchDelegate，调用 TouchDelegate 的 onTouchEvent 方法处理触摸事件</span></span><br><span class="line">    <span class="keyword">if</span> (mTouchDelegate != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mTouchDelegate.onTouchEvent(event)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//可点击 OR View为工具提示</span></span><br><span class="line">    <span class="keyword">if</span> (clickable || (viewFlags &amp; TOOLTIP) == TOOLTIP) &#123;</span><br><span class="line">        ···</span><br><span class="line">        <span class="comment">// 判断是否取得焦点</span></span><br><span class="line">        <span class="keyword">if</span> (!focusTaken) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mPerformClick == <span class="literal">null</span>) &#123;</span><br><span class="line">                mPerformClick = <span class="keyword">new</span> <span class="title class_">PerformClick</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// PerformClick 对象添加到消息队列中</span></span><br><span class="line">            <span class="keyword">if</span> (!post(mPerformClick)) &#123;</span><br><span class="line">               <span class="comment">// 如果无法将 PerformClick 对象添加到消息队列中，则直接调用 performClickInternal 方法执行点击事件。performClickInternal() 方法是 View 类中的一个私有方法，它会执行实际的点击操作，例如调用 OnClickListener 的 onClick() 方法等。</span></span><br><span class="line">               performClickInternal();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ···</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>ViewGroup</strong> </p>
<p>继承自 View，但它本身是一个容器，可以包含多个子 View，并负责管理这些子 View 的布局和事件分发。<strong>常见子类：</strong>  LinearLayout、RelativeLayout、FrameLayout、ConstraintLayout 等。</p>
<ul>
<li><p>DispatchTouchEvent</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> &#123;</span><br><span class="line">     ···</span><br><span class="line">     <span class="type">boolean</span> <span class="variable">handled</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">     <span class="keyword">if</span> (onFilterTouchEventForSecurity(ev)) &#123;</span><br><span class="line">         <span class="keyword">final</span> <span class="type">int</span> <span class="variable">action</span> <span class="operator">=</span> ev.getAction();</span><br><span class="line">         <span class="keyword">final</span> <span class="type">int</span> <span class="variable">actionMasked</span> <span class="operator">=</span> action &amp; MotionEvent.ACTION_MASK;</span><br><span class="line">  </span><br><span class="line">         <span class="comment">// 新的事件序列</span></span><br><span class="line">         <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">             <span class="comment">// 清除旧事件引用</span></span><br><span class="line">             cancelAndClearTouchTargets(ev);</span><br><span class="line">             resetTouchState();</span><br><span class="line">         &#125;</span><br><span class="line">  </span><br><span class="line">         <span class="comment">// 新事件序列 或 存在旧事件引用</span></span><br><span class="line">         <span class="comment">// 存在旧事件引用意味着有子View消费了当前事件序列的ACTION_DOWN</span></span><br><span class="line">         <span class="keyword">final</span> <span class="type">boolean</span> intercepted;</span><br><span class="line">         <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN</span><br><span class="line">                 || mFirstTouchTarget != <span class="literal">null</span>) &#123;</span><br><span class="line">             <span class="comment">// 子View可以请求父View不拦截</span></span><br><span class="line">             <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">disallowIntercept</span> <span class="operator">=</span> (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != <span class="number">0</span>;</span><br><span class="line">             <span class="keyword">if</span> (!disallowIntercept) &#123;</span><br><span class="line">                 <span class="comment">// 调用onInterceptTouchEvent判断是否拦截</span></span><br><span class="line">                 intercepted = onInterceptTouchEvent(ev);</span><br><span class="line">                 ev.setAction(action);</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 <span class="comment">// 子View请求父View不拦截</span></span><br><span class="line">                 intercepted = <span class="literal">false</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             intercepted = <span class="literal">true</span>;</span><br><span class="line">         &#125;</span><br><span class="line">  </span><br><span class="line">         ···</span><br><span class="line">  </span><br><span class="line">         <span class="keyword">if</span> (!canceled &amp;&amp; !intercepted) &#123;</span><br><span class="line">             <span class="type">View</span> <span class="variable">childWithAccessibilityFocus</span> <span class="operator">=</span> ev.isTargetAccessibilityFocus()</span><br><span class="line">                     ? findChildWithAccessibilityFocus() : <span class="literal">null</span>;</span><br><span class="line">  </span><br><span class="line">             <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN</span><br><span class="line">                     || (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_DOWN)</span><br><span class="line">                     || actionMasked == MotionEvent.ACTION_HOVER_MOVE) &#123;</span><br><span class="line">                 <span class="keyword">final</span> <span class="type">int</span> <span class="variable">actionIndex</span> <span class="operator">=</span> ev.getActionIndex(); <span class="comment">// always 0 for down</span></span><br><span class="line">                 <span class="keyword">final</span> <span class="type">int</span> <span class="variable">idBitsToAssign</span> <span class="operator">=</span> split ? <span class="number">1</span> &lt;&lt; ev.getPointerId(actionIndex)</span><br><span class="line">                         : TouchTarget.ALL_POINTER_IDS;</span><br><span class="line">  </span><br><span class="line">                 <span class="comment">// Clean up earlier touch targets for this pointer id in case they</span></span><br><span class="line">                 <span class="comment">// have become out of sync.</span></span><br><span class="line">                 removePointersFromTouchTargets(idBitsToAssign);</span><br><span class="line">  </span><br><span class="line">                 <span class="comment">// 遍历子View找到ACTION_DOWN落点</span></span><br><span class="line">                 <span class="keyword">final</span> <span class="type">int</span> <span class="variable">childrenCount</span> <span class="operator">=</span> mChildrenCount;</span><br><span class="line">                 <span class="keyword">if</span> (newTouchTarget == <span class="literal">null</span> &amp;&amp; childrenCount != <span class="number">0</span>) &#123;</span><br><span class="line">                     ···</span><br><span class="line">                     <span class="keyword">final</span> View[] children = mChildren;</span><br><span class="line">                     <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> childrenCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                         ···</span><br><span class="line">                         &#125;</span><br><span class="line">                     &#125;</span><br><span class="line">                     ···</span><br><span class="line">                 &#125;</span><br><span class="line">	   ···</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">  </span><br><span class="line">         <span class="keyword">if</span> (mFirstTouchTarget == <span class="literal">null</span>) &#123;</span><br><span class="line">             <span class="comment">// 动作未被子类消费 或 被拦截</span></span><br><span class="line">             handled = dispatchTransformedTouchEvent(ev, canceled, <span class="literal">null</span>,</span><br><span class="line">                     TouchTarget.ALL_POINTER_IDS);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="comment">// </span></span><br><span class="line">             <span class="type">TouchTarget</span> <span class="variable">predecessor</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">             <span class="type">TouchTarget</span> <span class="variable">target</span> <span class="operator">=</span> mFirstTouchTarget;</span><br><span class="line">             <span class="keyword">while</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line">                 <span class="keyword">final</span> <span class="type">TouchTarget</span> <span class="variable">next</span> <span class="operator">=</span> target.next;</span><br><span class="line">                 <span class="keyword">if</span> (alreadyDispatchedToNewTouchTarget &amp;&amp; target == newTouchTarget) &#123;</span><br><span class="line">                     handled = <span class="literal">true</span>;</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">cancelChild</span> <span class="operator">=</span> resetCancelNextUpFlag(target.child)</span><br><span class="line">                             || intercepted;</span><br><span class="line">                     <span class="keyword">if</span> (dispatchTransformedTouchEvent(ev, cancelChild,</span><br><span class="line">                             target.child, target.pointerIdBits)) &#123;</span><br><span class="line">                         handled = <span class="literal">true</span>;</span><br><span class="line">                     &#125;</span><br><span class="line">                     <span class="keyword">if</span> (cancelChild) &#123;</span><br><span class="line">                         <span class="keyword">if</span> (predecessor == <span class="literal">null</span>) &#123;</span><br><span class="line">                             mFirstTouchTarget = next;</span><br><span class="line">                         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                             predecessor.next = next;</span><br><span class="line">                         &#125;</span><br><span class="line">                         target.recycle();</span><br><span class="line">                         target = next;</span><br><span class="line">                         <span class="keyword">continue</span>;</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">                 predecessor = target;</span><br><span class="line">                 target = next;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">···</span><br><span class="line">     &#125;</span><br><span class="line">  </span><br><span class="line">     <span class="keyword">if</span> (!handled &amp;&amp; mInputEventConsistencyVerifier != <span class="literal">null</span>) &#123;</span><br><span class="line">         mInputEventConsistencyVerifier.onUnhandledEvent(ev, <span class="number">1</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> handled;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>PhoneWindow与DecorView</strong></p>
<ul>
<li>每个 Activity 都对应一个 PhoneWindow，即每个 Activity 实例均包含了一个 PhoneWindow 对象</li>
<li>每个 PhoneWindow 都对应一个 DecorView，DecorView 依靠 PhoneWindow 作为构造参数之一来实例化</li>
<li>DecorView 是 FrameLayout 的子类，是 Activity 视图树的根视图，我们平时调用 setContentView 所添加的 View 就对应 DecorView 的 ContentParent 区域</li>
<li>在这三者中 DecorView 会最先接收到触摸事件，DecorView 作为视图树的根视图，就负责向其内部 View 下发触摸事件</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">Activity</span><br><span class="line">│</span><br><span class="line">└── PhoneWindow</span><br><span class="line">    │</span><br><span class="line">    └── DecorView (FrameLayout)</span><br><span class="line">        │</span><br><span class="line">        ├── TitleBar/ActionBar</span><br><span class="line">        │</span><br><span class="line">        └── ContentView (Activity 布局文件定义的根视图)</span><br><span class="line">            │</span><br><span class="line">            └── ... 其他 View</span><br></pre></td></tr></table></figure>

<blockquote>
<p>StatusBar (状态栏) 不属于 当前Activity，位于屏幕最上方</p>
<p>TitleBar&#x2F;ActionBar 属于 DecorView，位于 StatusBar (状态栏) 下方</p>
</blockquote>
<img src="/2024/07/28/Android-Learning-Record/image-20240812184518922.png" class="" title="image-20240812184518922">
<p>参考链接：<a href="https://juejin.cn/post/6931914294980411406">https://juejin.cn/post/6931914294980411406</a></p>
<blockquote>
<p>DecorView -&gt; Activity -&gt; PhoneWindow -&gt; DecorView -&gt; ViewGroup -&gt; View</p>
<p>这三者之间的联系又是怎样的呢？这样兜兜转转一圈，其实就是 DecorView 先将事件传给了 Activity，Activity 又传给了 PhoneWindow，PhoneWindow 又将事件传给了 DecorView，DecorView 最后又按照 ViewGroup 默认的方式进行事件分发，看起来就是在绕圈，这样设计的意义是什么呢？</p>
<p>其实，DecorView 作为触摸事件的第一个接收者，是触摸事件从系统下发到 Activity 之间的一个沟通桥梁，而开发者可以直接接触并继承的是 Activity。DecorView 需要先将事件转发给最外层的 Activity，使得开发者可以通过重写 dispatchTouchEvent 和 onTouchEvent 方法以达到对当前屏幕触摸事件进行拦截的目的。DecorView 作为 View 树的根节点，从 PhoneWindow 接收到事件后，又负责将将事件事件分发给子 View，从而将整个事件链给串联了起来</p>
</blockquote>
<h4 id="事件分发流程"><a href="#事件分发流程" class="headerlink" title="事件分发流程"></a>事件分发流程</h4><p>参考链接：<a href="https://juejin.cn/post/6931914294980411406">https://juejin.cn/post/6931914294980411406</a></p>
<p>每次进行事件传递的是单个事件，即 ACTION_DOWN, ACTION_MOVE, ACTION_UP, 并非事件序列</p>
<p>case 1: -&gt; dispatch -&gt; dispatch -&gt; InterceptTouchEvent -&gt; TouchEvent - &gt; TouchEvent</p>
<p>case 2: -&gt; dispatch -&gt; dispatch -&gt; TouchEvent - &gt; TouchEvent</p>
<p>case 3: -&gt; dispatch -&gt; dispatch -&gt; TouchEvent</p>
<ol>
<li><p><strong>事件传递：</strong> 当用户触摸屏幕时，系统会将事件封装成 MotionEvent 对象，并将其传递给当前 Activity 的 dispatchTouchEvent(…) 方法。</p>
</li>
<li><p><strong>分发：</strong> Activity 会将事件传递给其根视图ViewGroup（通常是 DecorView）的 dispatchTouchEvent(…) 方法。ViewGroup和View将继续调用dispatchTouchEvent(…) 方法分发该动作。</p>
</li>
</ol>
<ul>
<li>如果返回 true，则表示<strong>当前事件在此 View 及其子 View 中被处理</strong>，后续事件序列将被继续下发。</li>
<li>如果返回 false，则表示<strong>当前事件在此 View 及其子 View 中未被处理</strong>，后续事件序列将不会到达此View</li>
</ul>
<blockquote>
<p><strong>注意</strong>：</p>
<p>ViewGroup 在接收到 ACTION_DOWN 事件时，其 dispatchTouchEvent 方法内部会先调用 onInterceptTouchEvent(..) 判断是否要进行拦截，如果 onInterceptTouchEvent(…) 方法返回了 false，则意味着其不打算拦截该事件，那么就会继续调用 child 的 dispatchTouchEvent(..) 方法，继续重复以上步骤。如果拦截了，那么就会调用 onTouchEvent 进行消费。</p>
<p>如果根 ViewGroup 和内嵌的所有 ViewGroup 均没有拦截 ACTION_DOWN 事件的话，那么事件通过循环传递就会分发给最底层的 View。对于 View 来说，其不包含 onInterceptTouchEvent(..) 方法，dispatchTouchEvent(..) 方法会调用其 onTouchEvent(..) 方法来决定是否消费该事件。如果返回 false，则意味着其不打算消费该事件，事件将依次调用父容器的 onTouchEvent(..) 方法，通过递归方式；返回 true 的话则意味着事件被其消费了，事件终止传递</p>
</blockquote>
<ol start="3">
<li><p><strong>拦截：</strong> ViewGroup 在接收到事件后，会调用自身的 onInterceptTouchEvent() 方法判断是否拦截该事件。</p>
<blockquote>
<p> <strong>注意：</strong></p>
<p><strong>拦截为阻止该事件继续分发，若当前view不对事件进行处理，该事件仍将回传！！！</strong></p>
<p>同时，父ViewGroup可以在子View处理ACTION_DOWN后，拦截后续事件序列</p>
</blockquote>
<ul>
<li>如果返回 true，则表示拦截该事件，事件将由 ViewGroup 自身处理，调用自身的 onTouchEvent() 方法。</li>
<li>如果返回 false，则表示不拦截该事件，事件将继续传递给其子 View 或 ViewGroup 进行分发。</li>
</ul>
</li>
<li><p><strong>处理：</strong> View 和 ViewGroup 接收到事件后，会调用自身的 onTouchEvent() 方法进行处理。 ACTION_DOWN 事件在处理后，将归属于该View进行完整事件序列处理。</p>
<ul>
<li>如果返回 true，则表示该事件被消费，事件传递结束。</li>
<li>如果返回 false，则表示该事件没有被消费，事件将回传给父 View 的 onTouchEvent() 方法进行处理。</li>
</ul>
</li>
<li><p><strong>事件回传：</strong> 如果事件没有被任何 View 消费，最终会回到 Activity 的 onTouchEvent() 方法进行处理。</p>
</li>
</ol>
<blockquote>
<p><strong>事件传递方向：</strong></p>
<ul>
<li>向下传递（分发）： 事件是从根视图 (DecorView) 开始，沿着视图树 <strong>逐层向下</strong> 分发，直到传递到最终处理该事件的子视图或被某个 ViewGroup 拦截。</li>
<li>向上回传： 如果事件没有被任何子视图消费，则会 <strong>原路返回</strong>，沿着视图树 <strong>逐层向上</strong> 回传，直到被某个 View 或 ViewGroup 处理或最终到达 Activity。</li>
</ul>
<p><strong>View与ViewGroup</strong></p>
<p>ViewGroup包含分发，拦截和消费; View包含分发，消费</p>
<p>即ViewGroup存在方法dispatchTouchEvent(…)，方法onInterceptTouchEvent(…)，方法onTouchEvent(…)，通过继承重写可实现新的处理方式</p>
<p>View存在方法dispatchTouchEvent(…)，方法onTouchEvent(…)</p>
<p>PS: Activity也存在 dispatchTouchEvent(…) 和 onTouchEvent(…) 两个方法，所有View和ViewGroup没有处理的事件最终将由Activity的 onTouchEvent(..) 方法处理</p>
<p><strong>事件拦截</strong></p>
<p>在正常情况下，一个事件序列只应该由单独一个 View 或者 ViewGroup 进行处理。这意味着， 哪个 View 消费了 ACTION_DOWN 事件，哪个 View 就会接管整个事件序列的处理，不再经过其他事件</p>
<ol>
<li><p>拦截&amp;处理：整个事件序列将直接传递给该ViewGroup处理，不再经过其他事件</p>
</li>
<li><p>拦截&amp;不处理：后续事件序列将不会再传递给该 ViewGroup，而是直接交给其父视图处理</p>
</li>
</ol>
<p>ext：若所有View和ViewGroup均不处理 ACTION_DOWN 事件，后续事件序列将直接由Activity处理；</p>
</blockquote>
<p><strong>message，handler与View交互</strong></p>
<ol>
<li>触摸事件的产生：<br>当用户触摸屏幕时，Android系统的底层（Input系统）会捕获这个物理事件。</li>
<li>事件的初步处理：<br>这个触摸事件首先被封装成一个原始的输入事件（Input Event）。</li>
<li>事件分发到应用：<br>系统将这个事件分发给当前激活的应用程序。</li>
<li>转化为消息：<br>在应用程序这一层，这个输入事件被转换成一个消息（Message），并被添加到主线程的消息队列（MessageQueue）中。</li>
<li>Looper处理消息：<br>主线程的Looper从消息队列中取出这个消息，并将其分发给适当的Handler处理。</li>
<li>ViewRootImpl的角色：<br>在大多数情况下，这个Handler是与ViewRootImpl关联的。ViewRootImpl是连接WindowManager和DecorView的纽带。</li>
<li>事件的向下分发：<br>ViewRootImpl接收到消息后，会调用DecorView的dispatchTouchEvent()方法，开始事件的向下分发过程。</li>
<li>到达目标View：<br>事件会沿着View层级树向下传递，直到到达你点击的按钮（Button）。</li>
<li>OnClickListener的调用：<br>如果按钮设置了OnClickListener，其onClick()方法会在这个分发过程中被调用。</li>
</ol>
<h3 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h3><p>每个 Gradle 项目都由一个或多个 Project 构成，每个 Project 又都由 Task 构成。一个 <code>build.gradle</code>文件便是对一个 Project 对象的配置。在 Android 项目中，根目录会存在一个<code>build.gradle</code>文件，每个模块下也会有一个<code>build.gradle</code>文件。</p>
<p><strong>闭包</strong></p>
<p><strong>封装代码块</strong>: 就像普通的函数一样，闭包封装了一段可以执行的代码块。</p>
<p><strong>访问外部作用域</strong>: 闭包最关键的特点是，它可以“捕获”并访问定义它所在的外部作用域（也称为词法作用域）中的变量，即使在定义作用域之外执行也是如此。</p>
<p><strong>作为对象传递</strong>: 闭包可以像普通变量一样被传递、存储和返回，因为它本质上是一个对象。这可以防止外部对象被垃圾回收。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个函数，返回一个闭包</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">makeCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>; <span class="comment">// 定义在外部函数作用域</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="comment">// 返回一个闭包</span></span><br><span class="line">    <span class="keyword">return</span> ++count;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建两个计数器</span></span><br><span class="line"><span class="keyword">let</span> counter1 = <span class="title function_">makeCounter</span>();</span><br><span class="line"><span class="keyword">let</span> counter2 = <span class="title function_">makeCounter</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个计数器都拥有独立的 count 变量</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">counter1</span>()); <span class="comment">// 输出 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">counter1</span>()); <span class="comment">// 输出 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">counter2</span>()); <span class="comment">// 输出 1</span></span><br></pre></td></tr></table></figure>



<p><strong>Gradle Wrapper</strong></p>
<p>Gradle 包装器。为了应对团队开发中 Gradle 环境和版本的差异会对编译结果带来的不确定性，使用 Gradle Wrapper，它是一个脚本，可以指定构建版本、快速运行项目，从而达到标准化、提到开发效率。Android Studio 新建项目时自带 Gradle Wrapper，因此 Android 开发者很少单独下载安装 Gradle</p>
<p><strong>常见文件</strong></p>
<p><strong><code>build.gradle</code></strong></p>
<ul>
<li><p>定义项目的构建配置，包括依赖项、插件、任务等。</p>
</li>
<li><p><strong>类型:</strong></p>
<ul>
<li><p><strong>顶层 <code>build.gradle</code> (Project):</strong></p>
<ul>
<li><p><strong>作用:</strong> 配置整个项目的全局设置</p>
</li>
<li><p><strong>代码示例:</strong></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;java&#x27;</span> <span class="comment">// 用于声明项目需要使用的Gradle插件。这些插件直接影响项目的构建过程和可用任务。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">buildscript &#123;  <span class="comment">// 用于声明构建脚本自身需要的依赖。这些依赖通常是Gradle插件，它们在构建过程中被使用，但不直接成为项目的一部分。</span></span><br><span class="line">    repositories &#123;  </span><br><span class="line">        google()</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">  dependencies &#123;  </span><br><span class="line">        classpath <span class="string">&quot;com.android.tools.build:gradle:7.0.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123; <span class="comment">// 通常用于定义共享的配置和仓库, 不推荐在这里声明具体的项目依赖</span></span><br><span class="line">    repositories &#123;  </span><br><span class="line">      google()</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task clean(<span class="attr">type:</span> Delete) &#123;</span><br><span class="line">    delete rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>模块级 <code>build.gradle</code> (Module):</strong></p>
<ul>
<li><p><strong>作用:</strong> 配置特定模块的构建选项</p>
</li>
<li><p><strong>代码示例 (Android 应用模块):</strong></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">  plugins &#123;</span><br><span class="line">      id <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line">      id <span class="string">&#x27;kotlin-android&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">31</span>  <span class="comment">// 指定用于编译应用的Android SDK版本</span></span><br><span class="line">      </span><br><span class="line">      defaultConfig &#123;</span><br><span class="line">          applicationId <span class="string">&quot;com.example.myapp&quot;</span></span><br><span class="line">          minSdkVersion <span class="number">21</span>  <span class="comment">// 指定您希望应用支持的最低 Android 版本。设置 minSdk 可限制哪些设备可以安装您的应用。</span></span><br><span class="line">          targetSdkVersion <span class="number">31</span>  <span class="comment">// 如果设备搭载的 Android 版本高于 targetSdk，Android 会以兼容模式运行您的应用</span></span><br><span class="line">          versionCode <span class="number">1</span></span><br><span class="line">          versionName <span class="string">&quot;1.0&quot;</span></span><br><span class="line">          <span class="comment">// 借助 compileSdk，您可以访问新 API</span></span><br><span class="line">  		<span class="comment">// targetSdk 用于设置应用的运行时行为</span></span><br><span class="line">  		<span class="comment">// targetSdk必须小于或等于 compileSdk</span></span><br><span class="line">          </span><br><span class="line">          testInstrumentationRunner <span class="string">&quot;androidx.test.runner.AndroidJUnitRunner&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      buildTypes &#123;  <span class="comment">// 定义不同的构建类型。这里配置了release构建类型,启用了代码混淆。</span></span><br><span class="line">          release &#123;</span><br><span class="line">              minifyEnabled <span class="literal">true</span></span><br><span class="line">              proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android-optimize.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      compileOptions &#123;  <span class="comment">// 设置Java编译选项。</span></span><br><span class="line">          sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">          targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      kotlinOptions &#123;  <span class="comment">// 设置Kotlin编译选项。</span></span><br><span class="line">          jvmTarget = <span class="string">&#x27;1.8&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  dependencies &#123;</span><br><span class="line">      implementation <span class="string">&#x27;androidx.core:core-ktx:1.7.0&#x27;</span></span><br><span class="line">      implementation <span class="string">&#x27;androidx.appcompat:appcompat:1.4.1&#x27;</span></span><br><span class="line">      implementation <span class="string">&#x27;com.google.android.material:material:1.5.0&#x27;</span></span><br><span class="line">      implementation <span class="string">&#x27;androidx.constraintlayout:constraintlayout:2.1.3&#x27;</span></span><br><span class="line">      testImplementation <span class="string">&#x27;junit:junit:4.13.2&#x27;</span></span><br><span class="line">      androidTestImplementation <span class="string">&#x27;androidx.test.ext:junit:1.1.3&#x27;</span></span><br><span class="line">      androidTestImplementation <span class="string">&#x27;androidx.test.espresso:espresso-core:3.4.0&#x27;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>Plugins是用于Gradle的，Dependencies是用于java&#x2F;kotlin项目的</p>
<p>通过引入不同的Plugins，可以构建不同语言的项目，比如说java语言编写的android项目，kotlin语言编写的android项目，混合Java和Kotlin的Android项目，Flutter项目…</p>
<p>Dependencies 主要是指项目所需的外部库或模块，如Java库，Kotlin库</p>
</blockquote>
<p><strong><code>gradle.properties</code></strong></p>
<ul>
<li><p><strong>作用:</strong> 配置全局 Gradle 设置，影响所有使用该 Gradle 版本的项目。</p>
</li>
<li><p><strong>示例:</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">org.gradle.daemon</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">org.gradle.parallel</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">android.useAndroidX</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong><code>gradle-wrapper.properties</code></strong></p>
<ul>
<li><p><strong>作用:</strong> 配置 Gradle Wrapper，确保项目使用特定版本的 Gradle 进行构建。</p>
</li>
<li><p><strong>示例:</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">gradle-wrapperdistributionBase</span>=<span class="string">GRADLE_USER_HOME</span></span><br><span class="line"><span class="attr">distributionPath</span>=<span class="string">wrapper/dists</span></span><br><span class="line"><span class="attr">distributionUrl</span>=<span class="string">https\://services.gradle.org/distributions/gradle-7.4.2-bin.zip</span></span><br><span class="line"><span class="attr">zipStoreBase</span>=<span class="string">GRADLE_USER_HOME</span></span><br><span class="line"><span class="attr">zipStorePath</span>=<span class="string">wrapper/dists</span></span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>gradle-wrapper</p>
<p>gradle-wrapper就像python的vir_env&#x2F;miniconda，为每个项目提供了相互独立的gradle环境。通过读取配置文件中gradle的版本，为每个项目自动的下载和配置gradle</p>
<ol>
<li>当执行 gradlew 脚本时，它会读取 gradle-wrapper.properties 文件中的配置信息。</li>
<li>如果本地没有找到指定的 Gradle 版本，Gradle Wrapper 会自动从 distributionUrl 下载并缓存到本地。</li>
<li>下载完成后，Gradle Wrapper 会使用指定的 Gradle 版本执行构建任务。</li>
</ol>
</blockquote>
<p><strong><code>settings.gradle</code></strong></p>
<ul>
<li><p><strong>作用:</strong> 此设置文件会定义项目级代码库设置，并告知 Gradle 在构建应用时应将哪些模块包含在内。多模块项目需要指定应包含在最终 build 中的每个模块。</p>
</li>
<li><p><strong>示例:</strong></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">pluginManagement &#123;  <span class="comment">// 集中管理插件版本：项目中使用的所有的使用于 Gradle 的插件版本 与 配置插件获取仓库</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * pluginManagement.repositories 代码块配置了 Gradle 用于</span></span><br><span class="line"><span class="comment">      * 搜索或下载 Gradle 插件及其传递依赖项的仓库。Gradle 预先配置了对远程仓库的支持，</span></span><br><span class="line"><span class="comment">      * 例如 JCenter、Maven Central 和 Ivy。您也可以使用本地仓库或定义自己的远程仓库。</span></span><br><span class="line"><span class="comment">      * 下面的代码将 Gradle 插件门户、Google 的 Maven 仓库和 Maven 中央仓库定义为</span></span><br><span class="line"><span class="comment">      * Gradle 应该用来查找其依赖项的仓库。</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"></span><br><span class="line">    repositories &#123;</span><br><span class="line">        gradlePluginPortal()</span><br><span class="line">        google()</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencyResolutionManagement &#123;  <span class="comment">// 集中管理项目依赖项（Java 库、Android 库等），获取仓库与配置依赖解析规则</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 您可以在 dependencyResolutionManagement.repositories 代码块中配置</span></span><br><span class="line"><span class="comment">      * 项目中所有模块使用的仓库和依赖项，例如您用于创建应用程序的库。但是，您应该</span></span><br><span class="line"><span class="comment">      * 在每个模块级别的 build.gradle 文件中配置模块特定的依赖项。对于新项目，</span></span><br><span class="line"><span class="comment">      * Android Studio 默认包含 Google 的 Maven 仓库和 Maven 中央仓库，</span></span><br><span class="line"><span class="comment">      * 但它不会配置任何依赖项（除非您选择需要某些依赖项的模板）。</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"></span><br><span class="line">    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)  <span class="comment">// 这意味着 Gradle 将只在 settings.gradle.kts 文件中定义的仓库中查找依赖项，而不会在项目模块的 build.gradle 文件中定义的仓库中查找。</span></span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;&#125;  <span class="comment">// 声明依赖版本，但不会将依赖添加到任何模块，仅用于版本约束。</span></span><br><span class="line">    resolutionStrategy &#123;</span><br><span class="line">        <span class="comment">// 强制使用 2.0.0 版本的 Gson 库</span></span><br><span class="line">        force(<span class="string">&quot;com.google.code.gson:gson:2.0.0&quot;</span>) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">rootProject.name = <span class="string">&quot;My Application&quot;</span>  <span class="comment">// 设置项目的根模块名称为 &quot;My Application&quot;。</span></span><br><span class="line">include <span class="string">&#x27;:app&#x27;</span>  <span class="comment">// 这意味着项目中存在一个名为 &quot;app&quot; 的子目录，其中包含一个模块级别的 build.gradle 文件，用于配置该模块的构建设置。</span></span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p><code>build.gradle</code> allprojects {} 中的 <code>settings.gradle</code> dependencies {} 的区别</p>
<ul>
<li>dependencyResolutionManagement {} 中的 dependencies {} 仅声明依赖版本，不添加依赖。</li>
<li>allprojects {} 中的 dependencies {} 会将依赖添加到所有模块。</li>
</ul>
</blockquote>
<p><strong><code>local.properties</code></strong></p>
<ul>
<li><p><strong>作用:</strong> 为构建系统配置本地环境属性，例如 SDK 和 NDK 路径。由Android Studio自动生成</p>
</li>
<li><p><strong>示例:</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">## This file is automatically generated by Android Studio.</span></span><br><span class="line"><span class="comment"># Do not modify this file -- YOUR CHANGES WILL BE ERASED!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Local properties for the project.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sdk.dir</span>=<span class="string">/Users/username/Library/Android/Sdk</span></span><br><span class="line"><span class="attr">ndk.dir</span>=<span class="string">/Users/username/Library/Android/Sdk/ndk</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong><code>multiDexKeep.pro</code>&amp;<code>proguard-rules.pro</code></strong>: 可选的混淆文件，用于配置放置在主 Dex 的类、声明避免混淆的类</p>
<p><strong>常见块</strong></p>
<p><strong><code>buildscript</code> 块</strong>:</p>
<ul>
<li><strong>作用</strong>: 配置 Gradle 构建系统本身所需的依赖和仓库。</li>
<li><strong>出现位置</strong>: 顶层 <code>build.gradle</code> 文件。</li>
</ul>
<p><strong>代码案例:</strong></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google() <span class="comment">// Google Maven 仓库</span></span><br><span class="line">        mavenCentral() <span class="comment">// Maven 中央仓库</span></span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">&quot;com.android.tools.build:gradle:7.2.1&quot;</span> <span class="comment">// Android Gradle 插件</span></span><br><span class="line">        classpath <span class="string">&quot;org.jetbrains.kotlin:kotlin-gradle-plugin:1.7.10&quot;</span> <span class="comment">// Kotlin Gradle 插件 (如果使用 Kotlin)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><code>allprojects</code> 块</strong>:</p>
<ul>
<li><strong>作用</strong>: 配置所有子项目&#x2F;模块通用的选项，例如仓库、插件版本等。</li>
<li><strong>出现位置</strong>: 顶层 <code>build.gradle</code> 文件。</li>
</ul>
<p><strong>代码案例:</strong></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        mavenCentral()</span><br><span class="line">        <span class="comment">// 添加其他需要的仓库</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><code>plugins</code> 块</strong>:</p>
<ul>
<li><strong>作用</strong>: 声明和应用插件，用于扩展 Gradle 的功能。</li>
<li><strong>出现位置</strong>: 顶层或模块级 <code>build.gradle</code> 文件。</li>
</ul>
<p><strong>代码案例:</strong></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;com.android.application&#x27;</span> version <span class="string">&#x27;7.2.1&#x27;</span> apply <span class="literal">false</span> <span class="comment">// 应用 Android Application 插件 (仅在模块级应用)</span></span><br><span class="line">    id <span class="string">&#x27;org.jetbrains.kotlin.android&#x27;</span> version <span class="string">&#x27;1.7.10&#x27;</span> apply <span class="literal">false</span> <span class="comment">// 应用 Kotlin Android 插件 (仅在模块级应用)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><code>android</code> 块</strong>:</p>
<ul>
<li><strong>作用</strong>: 配置 Android 项目相关的构建选项。</li>
<li><strong>出现位置</strong>: 模块级 <code>build.gradle</code> 文件。</li>
</ul>
<p><strong>代码案例:</strong></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">33</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">&quot;com.example.myapp&quot;</span></span><br><span class="line">        minSdkVersion <span class="number">21</span></span><br><span class="line">        targetSdkVersion <span class="number">33</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">&quot;1.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">true</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android-optimize.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>dependencies</code> 块: 声明项目的依赖项。</p>
<p><code>repositories</code>: 定义 Gradle 查找依赖项的仓库地址。</p>
<p><code>task</code>: 定义 Gradle 任务，用于执行特定的构建操作。</p>
<p><code>ext</code>: 定义额外的属性，可以在构建脚本中使用。</p>
<h3 id="Android启动"><a href="#Android启动" class="headerlink" title="Android启动"></a>Android启动</h3><p>Android系统启动过程中，会先启动linux内核，然后加载init.rc文件，启动init进程。然后，init进程通过解析init.rc文件fork生成Zygote进程，该进程也是Android系统的首个Java进程。之后Zygote进程负责孵化System Server进程和APP进程。</p>
<p><img src="/Android-learning-record/image-20240714103234291.png" alt="image-20240714103234291"></p>
<h4 id="Init进程"><a href="#Init进程" class="headerlink" title="Init进程"></a>Init进程</h4><p>设置子进程退出信号处理函数</p>
<img src="/2024/07/28/Android-Learning-Record/image-20240731155705321.png" class="" title="image-20240731155705321">

<blockquote>
<p>本进程在接受到子进程退出信号后，调用sigchld_handler函数</p>
</blockquote>
<p>创建文件夹与挂载设备</p>
<p>将标准输入、标准输出和标准错误重定向到 <code>/dev/null</code> 和 将<code>init</code> 进程的日志输出设置为 <code>/dev/__kmsg__</code></p>
<img src="/2024/07/28/Android-Learning-Record/image-20240731160912852.png" class="" title="image-20240731160912852">

<blockquote>
<p>重定向标准输入&#x2F;输出&#x2F;错误的方式是通过修改进程的文件描述符表</p>
<p>int dup2(int oldfd, int newfd)：通过将旧文件描述符复制到新文件描述符位置（即将oldfd内容写入newfd在文件描述符表中所在的位置），若新文件描述符已打开，则将其关闭并复制，使得后续访问文件描述符表对应位置的时候被重定向到修改后位置</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> fd = open(<span class="string">&quot;/dev/null&quot;</span>, O_RDWR); <span class="comment">// 读写方式打开 /dev/null</span></span><br><span class="line"><span class="keyword">if</span> (fd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    dup2(fd, <span class="number">0</span>); <span class="comment">// 重定向标准输入到 /dev/null</span></span><br><span class="line">    dup2(fd, <span class="number">1</span>); <span class="comment">// 重定向标准输出到 /dev/null</span></span><br><span class="line">    dup2(fd, <span class="number">2</span>); <span class="comment">// 重定向标准错误到 /dev/null</span></span><br><span class="line">    <span class="keyword">if</span> (fd &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        close(fd); <span class="comment">// 关闭多余的文件描述符</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>解析<code>init.rc</code>文件</p>
<p>获取硬件名并根据硬件名解析<code>init.&lt;硬件名&gt;.rc</code>文件</p>
<p>从文件中获得<code>early-init</code>阶段需要执行的动作，将动作添加到一个执行队列的尾部并执行队列中的所有动作</p>
<img src="/2024/07/28/Android-Learning-Record/image-20240731162932328.png" class="" title="image-20240731162932328">

<blockquote>
<p>动作一般是函数指针，执行动作时通过函数指针执行函数</p>
</blockquote>
<p>获得 <code>device</code>, <code>property</code>, <code>keychord</code>的文件描述符</p>
<p>加载文件作为系统的开机画面</p>
<p>判断系统是否在QEMU虚拟机运行，执行？操作</p>
<p>设置系统属性</p>
<p>执行位于<code>init</code>阶段的动作</p>
<img src="/2024/07/28/Android-Learning-Record/image-20240801102057483.png" class="" title="image-20240801102057483">

<p>启动属性服务</p>
<p>创建socket</p>
<p>执行 <code>early-boot</code> 和 <code>boot</code> 阶段动作</p>
<img src="/2024/07/28/Android-Learning-Record/image-20240801102304897.png" class="" title="image-20240801102304897">

<p>创建文件描述符数组，将<code>device</code>, <code>property</code>, <code>signal_recv</code>,<code>keychord</code>的文件描述符写入，添加期望动作。</p>
<img src="/2024/07/28/Android-Learning-Record/image-20240801102823567.png" class="" title="image-20240801102823567">

<img src="/2024/07/28/Android-Learning-Record/image-20240801102846996.png" class="" title="image-20240801102846996">

<p>循环，清空接收动作；开始监视文件描述符传入信息，并根据传入信息执行对应动作</p>
<img src="/2024/07/28/Android-Learning-Record/image-20240801103107985.png" class="" title="image-20240801103107985">

<blockquote>
<p>poll() 函数监视多个文件描述符(实际上监视的是文件描述符对应的文件表项的<code>f_flags</code>属性)，等待它们中的任何一个变为可读、可写或发生错误。在其变化时，revent将记录该变化。</p>
</blockquote>
<h4 id="Zygote进程"><a href="#Zygote进程" class="headerlink" title="Zygote进程"></a>Zygote进程</h4><p><strong>App_main.cpp</strong></p>
<p>对传入参数进行统计与设置</p>
<p>创建<code>AppRuntime</code>，并设置成员值</p>
<p>判断条件，修改进程名与执行<code>runtime.start(...)</code></p>
<p><strong>AndroidRuntime.cpp</strong></p>
<p><code>runtime.start(...)</code></p>
<ul>
<li>创建虚拟机<code>AndroidRuntime:startVm(...)</code></li>
<li>注册JNI函数<code>AndroidRuntime:startReg(...)</code></li>
<li>使用注册JNI函数的<code>JNIEnv</code>调用Java函数，进入Java</li>
</ul>
<p><code>AndroidRuntime:startVm(...)</code></p>
<ul>
<li>设置虚拟机参数</li>
<li>调用<code>JNI_CreateJavaVM(...)</code>创建虚拟机并得到当前线程的<code>JNIEnv</code></li>
</ul>
<p><code>AndroidRuntime:startReg(...)</code></p>
<ul>
<li>调用<code>register_jni_procs(...)</code>注册JNI函数</li>
</ul>
<img src="/2024/07/28/Android-Learning-Record/image-20240805152408375.png" class="" title="image-20240805152408375">

<img src="/2024/07/28/Android-Learning-Record/image-20240805152418585.png" class="" title="image-20240805152418585">

<blockquote>
<p>注册JNI函数即将该函数指针写入指定java类的方法表(Method Table)中，在java类使用该方法时，可以直接查方法表得到该函数的地址并访问&#x2F;使用</p>
</blockquote>
<p><strong>ZygoteInit.java</strong></p>
<p>调用<code>registerZygoteSocket()</code>注册zygote的socket</p>
<p>调用<code>preloadClasses()</code>&amp;<code>preloadResource()</code>预加载类和资源</p>
<p>调用<code>startSystemServer()</code>启动system_server进程</p>
<p>调用<code>runSelectLoopMode()</code>函数</p>
<p>调用<code>caller.run()</code>函数</p>
<p><code>registerZygoteSocket()</code></p>
<ul>
<li>创建服务端Socket</li>
</ul>
<p><code>preloadClasses()</code>&amp;<code>preloadResource()</code></p>
<ul>
<li>加载资源</li>
</ul>
<p><code>startSystemServer()</code></p>
<ul>
<li>fork子进程，创建system_server进程</li>
</ul>
<p><code>runSelectLoopMode()</code></p>
<ul>
<li>处理客户连接和客户请求</li>
</ul>
<img src="/2024/07/28/Android-Learning-Record/image-20240805193239427.png" class="" title="image-20240805193239427">

<p>-&gt; <code>runOnce()</code></p>
<img src="/2024/07/28/Android-Learning-Record/image-20240805193517661.png" class="" title="image-20240805193517661">

<img src="/2024/07/28/Android-Learning-Record/image-20240805193529451.png" class="" title="image-20240805193529451">







<h4 id="SystemServer进程"><a href="#SystemServer进程" class="headerlink" title="SystemServer进程"></a>SystemServer进程</h4><ul>
<li>由Zygote进程fork生成，SystemServer是Zygote孵化的第一个进程。</li>
<li>负责启动、管理整个Java Framework，系统里面重要的服务都是在这个进程里面开启的，比如ActivityManagerService、WindowManagerService。</li>
</ul>
<p><strong>ActivityManagerService.java</strong></p>
<p>函数<code>startProcessLocked(...)</code>中调用<code>Process.start()</code>启动Process</p>
<p><strong>Process.java</strong></p>
<p><code>Process.start()</code></p>
<ul>
<li>调用<code>startViaZygote(...)</code></li>
</ul>
<p><code>startViaZygote(...)</code></p>
<ul>
<li>参数处理</li>
<li>调用<code>zygoteSendArgsAndGetPid(参数)</code></li>
</ul>
<p><code>zygoteSendArgsAndGetPid(...)</code></p>
<ul>
<li>判断是否存在与zygote通信的Socket，并创建连接</li>
<li>发送请求参数到Zygote并获取返回结果pid</li>
</ul>
<h4 id="APP进程"><a href="#APP进程" class="headerlink" title="APP进程"></a>APP进程</h4><ul>
<li>Zygote进程在App层中孵化出的第一个进程是Launcher进程，即手机的桌面APP。</li>
<li>Zygote还会孵化出Browser、Email、Phone等APP进程，每个APP至少运行在一个进程上。</li>
<li>所有APP进程都由Zygote进程fork生成。</li>
</ul>
<img src="/2024/07/28/Android-Learning-Record/image-20240805193338222.png" class="" title="image-20240805193338222">



<p>上接<code>runOnce()</code></p>
<img src="/2024/07/28/Android-Learning-Record/image-20240805193638556.png" class="" title="image-20240805193638556">







<h3 id="常用框架"><a href="#常用框架" class="headerlink" title="常用框架"></a>常用框架</h3><h4 id="Glide"><a href="#Glide" class="headerlink" title="Glide"></a>Glide</h4><h4 id="Retrofit"><a href="#Retrofit" class="headerlink" title="Retrofit"></a>Retrofit</h4><h4 id="RxJava"><a href="#RxJava" class="headerlink" title="RxJava"></a>RxJava</h4>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android, Java</tag>
      </tags>
  </entry>
</search>
